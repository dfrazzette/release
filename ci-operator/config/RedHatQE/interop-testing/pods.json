{
  "metadata": {
    "resourceVersion": "625016136"
  },
  "items": [
    {
      "metadata": {
        "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-gather-audit-logs",
        "namespace": "ci-op-9gmi3mdh",
        "uid": "a837865c-ae08-4bcc-9e50-d2cca0b09008",
        "resourceVersion": "625016135",
        "generation": 2,
        "creationTimestamp": "2025-10-16T05:43:53Z",
        "labels": {
          "OPENSHIFT_CI": "true",
          "ci-workload": "tests",
          "ci-workload-namespace": "ci-op-9gmi3mdh",
          "ci.openshift.io/jobid": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5",
          "ci.openshift.io/jobname": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cxxx",
          "ci.openshift.io/jobtype": "presubmit",
          "ci.openshift.io/metadata.branch": "master",
          "ci.openshift.io/metadata.org": "RedHatQE",
          "ci.openshift.io/metadata.repo": "interop-testing",
          "ci.openshift.io/metadata.step": "gather-audit-logs",
          "ci.openshift.io/metadata.target": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "ci.openshift.io/metadata.variant": "cnv-odf-ocp4.19-lp-gs_baremetal",
          "ci.openshift.io/multi-stage-test": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "created-by-ci": "true",
          "multiarch.openshift.io/amd64": "",
          "multiarch.openshift.io/node-affinity": "set",
          "multiarch.openshift.io/preferred-node-affinity": "set",
          "multiarch.openshift.io/scheduling-gate": "removed",
          "multiarch.openshift.io/single-arch": ""
        },
        "annotations": {
          "ci-operator.openshift.io/container-sub-tests": "test",
          "ci-operator.openshift.io/save-container-logs": "true",
          "ci.openshift.io/job-spec": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}",
          "k8s.ovn.org/pod-networks": "{\"default\":{\"ip_addresses\":[\"172.24.98.153/23\"],\"mac_address\":\"0a:58:ac:18:62:99\",\"gateway_ips\":[\"172.24.98.1\"],\"routes\":[{\"dest\":\"172.24.0.0/16\",\"nextHop\":\"172.24.98.1\"},{\"dest\":\"172.30.0.0/16\",\"nextHop\":\"172.24.98.1\"},{\"dest\":\"169.254.0.5/32\",\"nextHop\":\"172.24.98.1\"},{\"dest\":\"100.64.0.0/16\",\"nextHop\":\"172.24.98.1\"}],\"ip_address\":\"172.24.98.153/23\",\"gateway_ip\":\"172.24.98.1\",\"role\":\"primary\"}}",
          "k8s.v1.cni.cncf.io/network-status": "[{\n    \"name\": \"ovn-kubernetes\",\n    \"interface\": \"eth0\",\n    \"ips\": [\n        \"172.24.98.153\"\n    ],\n    \"mac\": \"0a:58:ac:18:62:99\",\n    \"default\": true,\n    \"dns\": {}\n}]",
          "openshift.io/scc": "restricted-v2",
          "seccomp.security.alpha.kubernetes.io/pod": "runtime/default",
          "security.openshift.io/validated-scc-subject-type": "user"
        },
        "ownerReferences": [
          {
            "apiVersion": "image.openshift.io/v1",
            "kind": "ImageStream",
            "name": "pipeline",
            "uid": "9700f4ec-d56c-4638-afaf-6ab72b2e7e93"
          }
        ],
        "managedFields": [
          {
            "manager": "ci-operator",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T05:43:53Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:ci-operator.openshift.io/container-sub-tests": {},
                  "f:ci-operator.openshift.io/save-container-logs": {},
                  "f:ci.openshift.io/job-spec": {}
                },
                "f:labels": {
                  ".": {},
                  "f:OPENSHIFT_CI": {},
                  "f:ci.openshift.io/jobid": {},
                  "f:ci.openshift.io/jobname": {},
                  "f:ci.openshift.io/jobtype": {},
                  "f:ci.openshift.io/metadata.branch": {},
                  "f:ci.openshift.io/metadata.org": {},
                  "f:ci.openshift.io/metadata.repo": {},
                  "f:ci.openshift.io/metadata.step": {},
                  "f:ci.openshift.io/metadata.target": {},
                  "f:ci.openshift.io/metadata.variant": {},
                  "f:ci.openshift.io/multi-stage-test": {},
                  "f:created-by-ci": {}
                },
                "f:ownerReferences": {
                  ".": {},
                  "k:{\"uid\":\"9700f4ec-d56c-4638-afaf-6ab72b2e7e93\"}": {}
                }
              },
              "f:spec": {
                "f:containers": {
                  "k:{\"name\":\"sidecar\"}": {
                    ".": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SIDECAR_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/builder-dockercfg-4z6z8\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-operator-dockercfg-shmx5\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/default-dockercfg-b9qkj\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/deployer-dockercfg-4l8ch\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gce-sa-credentials-gcs-publisher\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gcs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/registry-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cnv-ci-brew-pull-secret\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"test\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"ARTIFACT_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"BUILD_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ENTRYPOINT_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_COUNT\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_KEY_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_VALUE_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"IMAGE_FORMAT\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"JOB_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_SAFE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBEADMIN_PASSWORD_FILE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIG\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIGMINIMAL\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"LEASED_RESOURCE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"NAMESPACE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"OPENSHIFT_CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ORIGINAL_RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PROW_JOB_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_REF\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_HEAD_REF\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"PULL_NUMBER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_PULL_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_REFS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_TITLE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_OWNER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SHARED_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"UNIQUE_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/alabama\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/multi-stage\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:dnsPolicy": {},
                "f:enableServiceLinks": {},
                "f:initContainers": {
                  ".": {},
                  "k:{\"name\":\"cp-entrypoint-wrapper\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {},
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"place-entrypoint\"}": {
                    ".": {},
                    "f:args": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:restartPolicy": {},
                "f:schedulerName": {},
                "f:securityContext": {},
                "f:serviceAccount": {},
                "f:serviceAccountName": {},
                "f:terminationGracePeriodSeconds": {},
                "f:volumes": {
                  ".": {},
                  "k:{\"name\":\"censor-0\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-1\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-10\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-11\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-2\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-3\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-4\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-5\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-6\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-7\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-8\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-9\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cluster-profile\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"entrypoint-wrapper\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"gcs-credentials\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"home\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"logs\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"tools\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  }
                }
              }
            }
          },
          {
            "manager": "ip-10-28-65-116",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T05:43:56Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.ovn.org/pod-networks": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "manager",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T05:43:56Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:labels": {
                  "f:multiarch.openshift.io/amd64": {},
                  "f:multiarch.openshift.io/node-affinity": {},
                  "f:multiarch.openshift.io/preferred-node-affinity": {},
                  "f:multiarch.openshift.io/scheduling-gate": {},
                  "f:multiarch.openshift.io/single-arch": {}
                }
              },
              "f:spec": {
                "f:affinity": {
                  "f:nodeAffinity": {
                    "f:preferredDuringSchedulingIgnoredDuringExecution": {},
                    "f:requiredDuringSchedulingIgnoredDuringExecution": {}
                  }
                }
              }
            }
          },
          {
            "manager": "multus-daemon",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T05:43:57Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.v1.cni.cncf.io/network-status": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "kubelet",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T05:45:56Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:conditions": {
                  "k:{\"type\":\"ContainersReady\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Initialized\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"PodReadyToStartContainers\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Ready\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                },
                "f:containerStatuses": {},
                "f:hostIP": {},
                "f:hostIPs": {},
                "f:initContainerStatuses": {},
                "f:phase": {},
                "f:podIP": {},
                "f:podIPs": {
                  ".": {},
                  "k:{\"ip\":\"172.24.98.153\"}": {
                    ".": {},
                    "f:ip": {}
                  }
                },
                "f:startTime": {}
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "volumes": [
          {
            "name": "logs",
            "emptyDir": {}
          },
          {
            "name": "tools",
            "emptyDir": {}
          },
          {
            "name": "gcs-credentials",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "home",
            "emptyDir": {}
          },
          {
            "name": "censor-0",
            "secret": {
              "secretName": "builder-dockercfg-4z6z8",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-1",
            "secret": {
              "secretName": "ci-operator-dockercfg-shmx5",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-2",
            "secret": {
              "secretName": "ci-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-3",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-4",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-5",
            "secret": {
              "secretName": "default-dockercfg-b9qkj",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-6",
            "secret": {
              "secretName": "deployer-dockercfg-4l8ch",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-7",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-8",
            "secret": {
              "secretName": "registry-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-9",
            "secret": {
              "secretName": "test-credentials-cluster-secrets-aws-interop-qe",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-10",
            "secret": {
              "secretName": "test-credentials-cnv-ci-brew-pull-secret",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-11",
            "secret": {
              "secretName": "test-credentials-openshift-virtualization-tests-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "entrypoint-wrapper",
            "emptyDir": {}
          },
          {
            "name": "cluster-profile",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
              "defaultMode": 420
            }
          },
          {
            "name": "kube-api-access-8r8sb",
            "projected": {
              "sources": [
                {
                  "serviceAccountToken": {
                    "expirationSeconds": 3607,
                    "path": "token"
                  }
                },
                {
                  "configMap": {
                    "name": "kube-XXXX-ca.crt",
                    "items": [
                      {
                        "key": "ca.crt",
                        "path": "ca.crt"
                      }
                    ]
                  }
                },
                {
                  "downwardAPI": {
                    "items": [
                      {
                        "path": "namespace",
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.namespace"
                        }
                      }
                    ]
                  }
                },
                {
                  "configMap": {
                    "name": "openshift-service-ca.crt",
                    "items": [
                      {
                        "key": "service-ca.crt",
                        "path": "service-ca.crt"
                      }
                    ]
                  }
                }
              ],
              "defaultMode": 420
            }
          }
        ],
        "initContainers": [
          {
            "name": "ci-scheduling-dns-wait",
            "image": "registry.access.redhat.com/ubi8",
            "command": [
              "/bin/sh",
              "-c",
              "declare -i T; until [[ \"$ret\" == \"0\" ]] || [[ \"$T\" -gt \"120\" ]]; do curl http://static.redhat.com/test/rhel-networkmanager.txt \u003e /dev/null; ret=$?; sleep 1; let \"T+=1\"; done"
            ],
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-8r8sb",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "Always",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "place-entrypoint",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "args": [
              "--copy-mode-only"
            ],
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-8r8sb",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "command": [
              "cp"
            ],
            "args": [
              "/bin/entrypoint-wrapper",
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-8r8sb",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "containers": [
          {
            "name": "test",
            "image": "quay-proxy.ci.openshift.org/openshift/ci@sha256:64d611a0baa708e16bbd95413fed8bf57a06ca57ca9a732e2b7b7661326824ce",
            "command": [
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "args": [
              "/tools/entrypoint"
            ],
            "env": [
              {
                "name": "BUILD_ID",
                "value": "1978661561102766080"
              },
              {
                "name": "CI",
                "value": "true"
              },
              {
                "name": "JOB_NAME",
                "value": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"15m0s\",\"grace_period\":\"15s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "JOB_TYPE",
                "value": "presubmit"
              },
              {
                "name": "OPENSHIFT_CI",
                "value": "true"
              },
              {
                "name": "PROW_JOB_ID",
                "value": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5"
              },
              {
                "name": "PULL_BASE_REF",
                "value": "master"
              },
              {
                "name": "PULL_BASE_SHA",
                "value": "3847d2254f63a2740d3b9c81edab848d00aeec49"
              },
              {
                "name": "PULL_HEAD_REF"
              },
              {
                "name": "PULL_NUMBER",
                "value": "70234"
              },
              {
                "name": "PULL_PULL_SHA",
                "value": "f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_REFS",
                "value": "master:3847d2254f63a2740d3b9c81edab848d00aeec49,70234:f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_TITLE",
                "value": "[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster."
              },
              {
                "name": "REPO_NAME",
                "value": "release"
              },
              {
                "name": "REPO_OWNER",
                "value": "openshift"
              },
              {
                "name": "GIT_CONFIG_COUNT",
                "value": "1"
              },
              {
                "name": "GIT_CONFIG_KEY_0",
                "value": "safe.directory"
              },
              {
                "name": "GIT_CONFIG_VALUE_0",
                "value": "*"
              },
              {
                "name": "ENTRYPOINT_OPTIONS",
                "value": "{\"timeout\":900000000000,\"grace_period\":15000000000,\"artifact_dir\":\"/logs/artifacts\",\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\n\\nif test ! -f \\\"${KUBECONFIG}\\\"\\nthen\\n\\techo \\\"No kubeconfig, so no point in gathering audit logs.\\\"\\n\\texit 0\\nfi\\n\\n# For disconnected or otherwise unreachable environments, we want to\\n# have steps use an HTTP(S) proxy to reach the API server. This proxy\\n# configuration file should export HTTP_PROXY, HTTPS_PROXY, and NO_PROXY\\n# environment variables, as well as their lowercase equivalents (note\\n# that libcurl doesn't recognize the uppercase variables).\\nif test -f \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nthen\\n\\t# shellcheck disable=SC1090\\n\\tsource \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nfi\\n\\n# Allow a job to override the must-gather image, this is needed for\\n# disconnected environments prior to 4.8.\\nif test -f \\\"${SHARED_DIR}/must-gather-image.sh\\\"\\nthen\\n\\t# shellcheck disable=SC1090\\n\\tsource \\\"${SHARED_DIR}/must-gather-image.sh\\\"\\nelse\\n\\tMUST_GATHER_IMAGE=${MUST_GATHER_IMAGE:-\\\"\\\"}\\nfi\\n\\nmkdir -p \\\"${ARTIFACT_DIR}/audit-logs\\\"\\nVOLUME_PERCENTAGE_FLAG=\\\"\\\"\\nif oc adm must-gather --help 2\\u003e\\u00261 | grep -q -- '--volume-percentage'; then\\n   VOLUME_PERCENTAGE_FLAG=\\\"--volume-percentage=100\\\"\\nfi\\n\\noc adm must-gather $MUST_GATHER_IMAGE $VOLUME_PERCENTAGE_FLAG --dest-dir=\\\"${ARTIFACT_DIR}/audit-logs\\\" -- /usr/bin/gather_audit_logs\\ntar -czC \\\"${ARTIFACT_DIR}/audit-logs\\\" -f \\\"${ARTIFACT_DIR}/audit-logs.tar.gz\\\" .\\nrm -rf \\\"${ARTIFACT_DIR}/audit-logs\\\"\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}"
              },
              {
                "name": "ARTIFACT_DIR",
                "value": "/logs/artifacts"
              },
              {
                "name": "NAMESPACE",
                "value": "ci-op-9gmi3mdh"
              },
              {
                "name": "JOB_NAME_SAFE",
                "value": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_NAME_HASH",
                "value": "59604"
              },
              {
                "name": "UNIQUE_HASH",
                "value": "59604"
              },
              {
                "name": "LEASED_RESOURCE",
                "value": "9c68b29a-693f-4a38-b1e6-f559fa73f31a"
              },
              {
                "name": "ORIGINAL_RELEASE_IMAGE_LATEST",
                "value": "registry.ci.openshift.org/ocp/release:4.19.0-0.nightly-2025-10-15-051359"
              },
              {
                "name": "RELEASE_IMAGE_LATEST",
                "value": "registry.build10.ci.openshift.org/ci-op-9gmi3mdh/release@sha256:88597cc1247e97e4fbe14ead836fc08d776787e825fa3455c031e770442669fc"
              },
              {
                "name": "IMAGE_FORMAT"
              },
              {
                "name": "KUBECONFIG",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig"
              },
              {
                "name": "KUBECONFIGMINIMAL",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig-minimal"
              },
              {
                "name": "KUBEADMIN_PASSWORD_FILE",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeadmin-password"
              },
              {
                "name": "CLUSTER_PROFILE_NAME",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_TYPE",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_PROFILE_DIR",
                "value": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "SHARED_DIR",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage"
              }
            ],
            "resources": {
              "requests": {
                "cpu": "300m",
                "memory": "300Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "kube-api-access-8r8sb",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "sidecar",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "env": [
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "SIDECAR_OPTIONS",
                "value": "{\"gcs_options\":{\"items\":[\"/logs/artifacts\"],\"sub_dir\":\"artifacts/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal/gather-audit-logs\",\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"],\"gcs_credentials_file\":\"/secrets/gcs/service-account.json\",\"dry_run\":false},\"entries\":[{\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\n\\nif test ! -f \\\"${KUBECONFIG}\\\"\\nthen\\n\\techo \\\"No kubeconfig, so no point in gathering audit logs.\\\"\\n\\texit 0\\nfi\\n\\n# For disconnected or otherwise unreachable environments, we want to\\n# have steps use an HTTP(S) proxy to reach the API server. This proxy\\n# configuration file should export HTTP_PROXY, HTTPS_PROXY, and NO_PROXY\\n# environment variables, as well as their lowercase equivalents (note\\n# that libcurl doesn't recognize the uppercase variables).\\nif test -f \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nthen\\n\\t# shellcheck disable=SC1090\\n\\tsource \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nfi\\n\\n# Allow a job to override the must-gather image, this is needed for\\n# disconnected environments prior to 4.8.\\nif test -f \\\"${SHARED_DIR}/must-gather-image.sh\\\"\\nthen\\n\\t# shellcheck disable=SC1090\\n\\tsource \\\"${SHARED_DIR}/must-gather-image.sh\\\"\\nelse\\n\\tMUST_GATHER_IMAGE=${MUST_GATHER_IMAGE:-\\\"\\\"}\\nfi\\n\\nmkdir -p \\\"${ARTIFACT_DIR}/audit-logs\\\"\\nVOLUME_PERCENTAGE_FLAG=\\\"\\\"\\nif oc adm must-gather --help 2\\u003e\\u00261 | grep -q -- '--volume-percentage'; then\\n   VOLUME_PERCENTAGE_FLAG=\\\"--volume-percentage=100\\\"\\nfi\\n\\noc adm must-gather $MUST_GATHER_IMAGE $VOLUME_PERCENTAGE_FLAG --dest-dir=\\\"${ARTIFACT_DIR}/audit-logs\\\" -- /usr/bin/gather_audit_logs\\ntar -czC \\\"${ARTIFACT_DIR}/audit-logs\\\" -f \\\"${ARTIFACT_DIR}/audit-logs.tar.gz\\\" .\\nrm -rf \\\"${ARTIFACT_DIR}/audit-logs\\\"\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}],\"ignore_interrupts\":true,\"censoring_options\":{\"secret_directories\":[\"/secrets/builder-dockercfg-4z6z8\",\"/secrets/ci-operator-dockercfg-shmx5\",\"/secrets/ci-pull-credentials\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\",\"/secrets/default-dockercfg-b9qkj\",\"/secrets/deployer-dockercfg-4l8ch\",\"/secrets/gce-sa-credentials-gcs-publisher\",\"/secrets/registry-pull-credentials\",\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\",\"/secrets/test-credentials-cnv-ci-brew-pull-secret\",\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"],\"minimum_secret_length\":6}}"
              }
            ],
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-8r8sb",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "restartPolicy": "Never",
        "terminationGracePeriodSeconds": 18,
        "dnsPolicy": "ClusterFirst",
        "nodeSelector": {
          "ci-workload": "tests"
        },
        "serviceAccountName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "serviceAccount": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "nodeName": "ip-10-28-65-116.us-east-2.compute.internal",
        "securityContext": {
          "seLinuxOptions": {
            "level": "s0:c68,c27"
          },
          "fsGroup": 1004610000,
          "seccompProfile": {
            "type": "RuntimeDefault"
          }
        },
        "imagePullSecrets": [
          {
            "name": "registry-pull-credentials"
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
          }
        ],
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "NotIn",
                      "values": [
                        "ip-10-28-65-78.us-east-2.compute.internal"
                      ]
                    },
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              ]
            },
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 100,
                "preference": {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "schedulerName": "default-scheduler",
        "tolerations": [
          {
            "key": "node.kubernetes.io/not-ready",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/unreachable",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/memory-pressure",
            "operator": "Exists",
            "effect": "NoSchedule"
          },
          {
            "key": "node-role.kubernetes.io/ci-tests-worker",
            "operator": "Exists",
            "effect": "NoSchedule"
          }
        ],
        "priority": 0,
        "runtimeClassName": "ci-scheduler-runtime-tests",
        "enableServiceLinks": true,
        "preemptionPolicy": "PreemptLowerPriority",
        "overhead": {
          "cpu": "300m",
          "memory": "600Mi"
        }
      },
      "status": {
        "phase": "Running",
        "conditions": [
          {
            "type": "PodReadyToStartContainers",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T05:43:59Z"
          },
          {
            "type": "Initialized",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T05:44:02Z",
            "reason": "PodCompleted"
          },
          {
            "type": "Ready",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T05:44:54Z",
            "reason": "PodCompleted"
          },
          {
            "type": "ContainersReady",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T05:44:54Z",
            "reason": "PodCompleted"
          },
          {
            "type": "PodScheduled",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T05:43:56Z"
          }
        ],
        "hostIP": "10.28.65.116",
        "hostIPs": [
          {
            "ip": "10.28.65.116"
          }
        ],
        "podIP": "172.24.98.153",
        "podIPs": [
          {
            "ip": "172.24.98.153"
          }
        ],
        "startTime": "2025-10-16T05:43:56Z",
        "initContainerStatuses": [
          {
            "name": "ci-scheduling-dns-wait",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T05:43:58Z",
                "finishedAt": "2025-10-16T05:43:59Z",
                "containerID": "cri-o://884bb009ad4808a7620c8c6f11214523126057fa91de2b618798a04350454ef8"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "registry.access.redhat.com/ubi8:latest",
            "imageID": "registry.access.redhat.com/ubi8@sha256:96ede92bab65df0386c9dabe6ec946aaa13a8717d2d5ad52d5d9a1d2e1f90e0f",
            "containerID": "cri-o://884bb009ad4808a7620c8c6f11214523126057fa91de2b618798a04350454ef8",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "200Mi"
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-8r8sb",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "place-entrypoint",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T05:44:00Z",
                "finishedAt": "2025-10-16T05:44:00Z",
                "containerID": "cri-o://352586bf1702d0530d386d508d9ae9736f8bb94e721456dd0db98b8b978726ef"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint@sha256:543f25b78ff850958624960f8f9e2cd73a680ea80a97746b957dbab9d210e6e9",
            "containerID": "cri-o://352586bf1702d0530d386d508d9ae9736f8bb94e721456dd0db98b8b978726ef",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "25Mi"
            },
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-8r8sb",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T05:44:01Z",
                "finishedAt": "2025-10-16T05:44:01Z",
                "containerID": "cri-o://dc6165f55de48ba44d89807b03d2b4c576e7a68d1b899cd99617194e48c0a93b"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "imageID": "quay-proxy.ci.openshift.org/openshift/ci@sha256:5092ebbc6a951284f2c5389556826b4a3403bc3a02f37ee9358b9fc2824e65fc",
            "containerID": "cri-o://dc6165f55de48ba44d89807b03d2b4c576e7a68d1b899cd99617194e48c0a93b",
            "started": false,
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-8r8sb",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "containerStatuses": [
          {
            "name": "sidecar",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T05:44:02Z",
                "finishedAt": "2025-10-16T05:45:56Z",
                "containerID": "cri-o://3eb0244760b5b2ec3c41b23e3c029759d9ca70002de8708963a2abd34c9ce125"
              }
            },
            "lastState": {},
            "ready": false,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar@sha256:41d0901d20b0546472edd74026e1bb03b4d71c739b06a7a06dbecdb967e2a910",
            "containerID": "cri-o://3eb0244760b5b2ec3c41b23e3c029759d9ca70002de8708963a2abd34c9ce125",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "250Mi"
            },
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-8r8sb",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "test",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T05:44:02Z",
                "finishedAt": "2025-10-16T05:44:54Z",
                "containerID": "cri-o://48984a114bc99bd2e842f55d6c2dd14eaa64d53752b2c4d8324a4339dae3baa4"
              }
            },
            "lastState": {},
            "ready": false,
            "restartCount": 0,
            "image": "quay-proxy.ci.openshift.org/openshift/ci@sha256:64d611a0baa708e16bbd95413fed8bf57a06ca57ca9a732e2b7b7661326824ce",
            "imageID": "quay-proxy.ci.openshift.org/openshift/ci@sha256:64d611a0baa708e16bbd95413fed8bf57a06ca57ca9a732e2b7b7661326824ce",
            "containerID": "cri-o://48984a114bc99bd2e842f55d6c2dd14eaa64d53752b2c4d8324a4339dae3baa4",
            "started": false,
            "allocatedResources": {
              "cpu": "300m",
              "memory": "300Mi"
            },
            "resources": {
              "requests": {
                "cpu": "300m",
                "memory": "300Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "kube-api-access-8r8sb",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "qosClass": "Burstable"
      }
    },
    {
      "metadata": {
        "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-gather-extra",
        "namespace": "ci-op-9gmi3mdh",
        "uid": "485f500a-61bd-4b0d-a8a3-992faa81e1bc",
        "resourceVersion": "625011209",
        "generation": 2,
        "creationTimestamp": "2025-10-16T03:42:39Z",
        "labels": {
          "OPENSHIFT_CI": "true",
          "ci-workload": "tests",
          "ci-workload-namespace": "ci-op-9gmi3mdh",
          "ci.openshift.io/jobid": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5",
          "ci.openshift.io/jobname": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cxxx",
          "ci.openshift.io/jobtype": "presubmit",
          "ci.openshift.io/metadata.branch": "master",
          "ci.openshift.io/metadata.org": "RedHatQE",
          "ci.openshift.io/metadata.repo": "interop-testing",
          "ci.openshift.io/metadata.step": "gather-extra",
          "ci.openshift.io/metadata.target": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "ci.openshift.io/metadata.variant": "cnv-odf-ocp4.19-lp-gs_baremetal",
          "ci.openshift.io/multi-stage-test": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "created-by-ci": "true",
          "multiarch.openshift.io/amd64": "",
          "multiarch.openshift.io/node-affinity": "set",
          "multiarch.openshift.io/preferred-node-affinity": "set",
          "multiarch.openshift.io/scheduling-gate": "removed",
          "multiarch.openshift.io/single-arch": ""
        },
        "annotations": {
          "ci-operator.openshift.io/container-sub-tests": "test",
          "ci-operator.openshift.io/save-container-logs": "true",
          "ci.openshift.io/job-spec": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}",
          "k8s.ovn.org/pod-networks": "{\"default\":{\"ip_addresses\":[\"172.24.150.83/23\"],\"mac_address\":\"0a:58:ac:18:96:53\",\"gateway_ips\":[\"172.24.150.1\"],\"routes\":[{\"dest\":\"172.24.0.0/16\",\"nextHop\":\"172.24.150.1\"},{\"dest\":\"172.30.0.0/16\",\"nextHop\":\"172.24.150.1\"},{\"dest\":\"169.254.0.5/32\",\"nextHop\":\"172.24.150.1\"},{\"dest\":\"100.64.0.0/16\",\"nextHop\":\"172.24.150.1\"}],\"ip_address\":\"172.24.150.83/23\",\"gateway_ip\":\"172.24.150.1\",\"role\":\"primary\"}}",
          "k8s.v1.cni.cncf.io/network-status": "[{\n    \"name\": \"ovn-kubernetes\",\n    \"interface\": \"eth0\",\n    \"ips\": [\n        \"172.24.150.83\"\n    ],\n    \"mac\": \"0a:58:ac:18:96:53\",\n    \"default\": true,\n    \"dns\": {}\n}]",
          "openshift.io/scc": "restricted-v2",
          "seccomp.security.alpha.kubernetes.io/pod": "runtime/default",
          "security.openshift.io/validated-scc-subject-type": "user"
        },
        "ownerReferences": [
          {
            "apiVersion": "image.openshift.io/v1",
            "kind": "ImageStream",
            "name": "pipeline",
            "uid": "9700f4ec-d56c-4638-afaf-6ab72b2e7e93"
          }
        ],
        "managedFields": [
          {
            "manager": "ci-operator",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:42:39Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:ci-operator.openshift.io/container-sub-tests": {},
                  "f:ci-operator.openshift.io/save-container-logs": {},
                  "f:ci.openshift.io/job-spec": {}
                },
                "f:labels": {
                  ".": {},
                  "f:OPENSHIFT_CI": {},
                  "f:ci.openshift.io/jobid": {},
                  "f:ci.openshift.io/jobname": {},
                  "f:ci.openshift.io/jobtype": {},
                  "f:ci.openshift.io/metadata.branch": {},
                  "f:ci.openshift.io/metadata.org": {},
                  "f:ci.openshift.io/metadata.repo": {},
                  "f:ci.openshift.io/metadata.step": {},
                  "f:ci.openshift.io/metadata.target": {},
                  "f:ci.openshift.io/metadata.variant": {},
                  "f:ci.openshift.io/multi-stage-test": {},
                  "f:created-by-ci": {}
                },
                "f:ownerReferences": {
                  ".": {},
                  "k:{\"uid\":\"9700f4ec-d56c-4638-afaf-6ab72b2e7e93\"}": {}
                }
              },
              "f:spec": {
                "f:containers": {
                  "k:{\"name\":\"sidecar\"}": {
                    ".": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SIDECAR_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/builder-dockercfg-4z6z8\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-operator-dockercfg-shmx5\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/default-dockercfg-b9qkj\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/deployer-dockercfg-4l8ch\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gce-sa-credentials-gcs-publisher\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gcs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/registry-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cnv-ci-brew-pull-secret\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"test\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"ARTIFACT_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"BUILD_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ENTRYPOINT_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_COUNT\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_KEY_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_VALUE_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"IMAGE_FORMAT\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"JOB_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_SAFE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBEADMIN_PASSWORD_FILE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIG\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIGMINIMAL\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"LEASED_RESOURCE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"NAMESPACE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"OPENSHIFT_CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ORIGINAL_RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PROW_JOB_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_REF\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_HEAD_REF\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"PULL_NUMBER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_PULL_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_REFS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_TITLE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_OWNER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SHARED_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"UNIQUE_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/alabama\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/multi-stage\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:dnsPolicy": {},
                "f:enableServiceLinks": {},
                "f:initContainers": {
                  ".": {},
                  "k:{\"name\":\"cp-entrypoint-wrapper\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {},
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"place-entrypoint\"}": {
                    ".": {},
                    "f:args": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:restartPolicy": {},
                "f:schedulerName": {},
                "f:securityContext": {},
                "f:serviceAccount": {},
                "f:serviceAccountName": {},
                "f:terminationGracePeriodSeconds": {},
                "f:volumes": {
                  ".": {},
                  "k:{\"name\":\"censor-0\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-1\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-10\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-11\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-2\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-3\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-4\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-5\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-6\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-7\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-8\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-9\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cluster-profile\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"entrypoint-wrapper\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"gcs-credentials\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"home\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"logs\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"tools\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  }
                }
              }
            }
          },
          {
            "manager": "ip-10-28-65-106",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:42:40Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.ovn.org/pod-networks": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "kube-scheduler",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:42:40Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:conditions": {
                  "k:{\"type\":\"PodScheduled\"}": {
                    "f:message": {},
                    "f:reason": {}
                  }
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "manager",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:42:40Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:labels": {
                  "f:multiarch.openshift.io/amd64": {},
                  "f:multiarch.openshift.io/node-affinity": {},
                  "f:multiarch.openshift.io/preferred-node-affinity": {},
                  "f:multiarch.openshift.io/scheduling-gate": {},
                  "f:multiarch.openshift.io/single-arch": {}
                }
              },
              "f:spec": {
                "f:affinity": {
                  "f:nodeAffinity": {
                    "f:preferredDuringSchedulingIgnoredDuringExecution": {},
                    "f:requiredDuringSchedulingIgnoredDuringExecution": {}
                  }
                }
              }
            }
          },
          {
            "manager": "multus-daemon",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:42:40Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.v1.cni.cncf.io/network-status": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "kubelet",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T05:43:53Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:conditions": {
                  "k:{\"type\":\"ContainersReady\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Initialized\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"PodReadyToStartContainers\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Ready\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:message": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                },
                "f:containerStatuses": {},
                "f:hostIP": {},
                "f:hostIPs": {},
                "f:initContainerStatuses": {},
                "f:phase": {},
                "f:podIP": {},
                "f:podIPs": {
                  ".": {},
                  "k:{\"ip\":\"172.24.150.83\"}": {
                    ".": {},
                    "f:ip": {}
                  }
                },
                "f:startTime": {}
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "volumes": [
          {
            "name": "logs",
            "emptyDir": {}
          },
          {
            "name": "tools",
            "emptyDir": {}
          },
          {
            "name": "gcs-credentials",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "home",
            "emptyDir": {}
          },
          {
            "name": "censor-0",
            "secret": {
              "secretName": "builder-dockercfg-4z6z8",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-1",
            "secret": {
              "secretName": "ci-operator-dockercfg-shmx5",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-2",
            "secret": {
              "secretName": "ci-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-3",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-4",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-5",
            "secret": {
              "secretName": "default-dockercfg-b9qkj",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-6",
            "secret": {
              "secretName": "deployer-dockercfg-4l8ch",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-7",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-8",
            "secret": {
              "secretName": "registry-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-9",
            "secret": {
              "secretName": "test-credentials-cluster-secrets-aws-interop-qe",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-10",
            "secret": {
              "secretName": "test-credentials-cnv-ci-brew-pull-secret",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-11",
            "secret": {
              "secretName": "test-credentials-openshift-virtualization-tests-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "entrypoint-wrapper",
            "emptyDir": {}
          },
          {
            "name": "cluster-profile",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
              "defaultMode": 420
            }
          },
          {
            "name": "kube-api-access-5rz2n",
            "projected": {
              "sources": [
                {
                  "serviceAccountToken": {
                    "expirationSeconds": 3607,
                    "path": "token"
                  }
                },
                {
                  "configMap": {
                    "name": "kube-XXXX-ca.crt",
                    "items": [
                      {
                        "key": "ca.crt",
                        "path": "ca.crt"
                      }
                    ]
                  }
                },
                {
                  "downwardAPI": {
                    "items": [
                      {
                        "path": "namespace",
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.namespace"
                        }
                      }
                    ]
                  }
                },
                {
                  "configMap": {
                    "name": "openshift-service-ca.crt",
                    "items": [
                      {
                        "key": "service-ca.crt",
                        "path": "service-ca.crt"
                      }
                    ]
                  }
                }
              ],
              "defaultMode": 420
            }
          }
        ],
        "initContainers": [
          {
            "name": "ci-scheduling-dns-wait",
            "image": "registry.access.redhat.com/ubi8",
            "command": [
              "/bin/sh",
              "-c",
              "declare -i T; until [[ \"$ret\" == \"0\" ]] || [[ \"$T\" -gt \"120\" ]]; do curl http://static.redhat.com/test/rhel-networkmanager.txt \u003e /dev/null; ret=$?; sleep 1; let \"T+=1\"; done"
            ],
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-5rz2n",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "Always",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "place-entrypoint",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "args": [
              "--copy-mode-only"
            ],
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-5rz2n",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "command": [
              "cp"
            ],
            "args": [
              "/bin/entrypoint-wrapper",
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-5rz2n",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "containers": [
          {
            "name": "test",
            "image": "quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:cb036d946c201af0690e24cde73d291aa4b30e5b8c17a4537548e6d15645bed5",
            "command": [
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "args": [
              "/tools/entrypoint"
            ],
            "env": [
              {
                "name": "BUILD_ID",
                "value": "1978661561102766080"
              },
              {
                "name": "CI",
                "value": "true"
              },
              {
                "name": "JOB_NAME",
                "value": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"2h0m0s\",\"grace_period\":\"1m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "JOB_TYPE",
                "value": "presubmit"
              },
              {
                "name": "OPENSHIFT_CI",
                "value": "true"
              },
              {
                "name": "PROW_JOB_ID",
                "value": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5"
              },
              {
                "name": "PULL_BASE_REF",
                "value": "master"
              },
              {
                "name": "PULL_BASE_SHA",
                "value": "3847d2254f63a2740d3b9c81edab848d00aeec49"
              },
              {
                "name": "PULL_HEAD_REF"
              },
              {
                "name": "PULL_NUMBER",
                "value": "70234"
              },
              {
                "name": "PULL_PULL_SHA",
                "value": "f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_REFS",
                "value": "master:3847d2254f63a2740d3b9c81edab848d00aeec49,70234:f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_TITLE",
                "value": "[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster."
              },
              {
                "name": "REPO_NAME",
                "value": "release"
              },
              {
                "name": "REPO_OWNER",
                "value": "openshift"
              },
              {
                "name": "GIT_CONFIG_COUNT",
                "value": "1"
              },
              {
                "name": "GIT_CONFIG_KEY_0",
                "value": "safe.directory"
              },
              {
                "name": "GIT_CONFIG_VALUE_0",
                "value": "*"
              },
              {
                "name": "ENTRYPOINT_OPTIONS",
                "value": "{\"timeout\":7200000000000,\"grace_period\":60000000000,\"artifact_dir\":\"/logs/artifacts\",\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\nfunction queue() {\\n  local TARGET=\\\"${1}\\\"\\n  shift\\n  local LIVE\\n  LIVE=\\\"$(jobs | wc -l)\\\"\\n  while [[ \\\"${LIVE}\\\" -ge 45 ]]; do\\n    sleep 1\\n    LIVE=\\\"$(jobs | wc -l)\\\"\\n  done\\n  echo \\\"${@}\\\"\\n  if [[ -n \\\"${FILTER:-}\\\" ]]; then\\n    \\\"${@}\\\" | \\\"${FILTER}\\\" \\u003e\\\"${TARGET}\\\" \\u0026\\n  else\\n    \\\"${@}\\\" \\u003e\\\"${TARGET}\\\" \\u0026\\n  fi\\n}\\n\\nif test ! -f \\\"${KUBECONFIG}\\\"\\nthen\\n\\techo \\\"No kubeconfig, so no point in gathering extra artifacts.\\\"\\n\\texit 0\\nfi\\n\\n# For disconnected or otherwise unreachable environments, we want to\\n# have steps use an HTTP(S) proxy to reach the API server. This proxy\\n# configuration file should export HTTP_PROXY, HTTPS_PROXY, and NO_PROXY\\n# environment variables, as well as their lowercase equivalents (note\\n# that libcurl doesn't recognize the uppercase variables).\\nif test -f \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nthen\\n    # shellcheck disable=SC1090\\n    source \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nfi\\n\\necho \\\"Gathering artifacts ...\\\"\\nmkdir -p ${ARTIFACT_DIR}/pods ${ARTIFACT_DIR}/nodes ${ARTIFACT_DIR}/metrics ${ARTIFACT_DIR}/bootstrap ${ARTIFACT_DIR}/network ${ARTIFACT_DIR}/oc_cmds ${ARTIFACT_DIR}/inspect\\n\\noc --insecure-skip-tls-verify --request-timeout=5s get nodes -o jsonpath --template '{range .items[*]}{.metadata.name}{\\\"\\\\n\\\"}{end}' \\u003e /tmp/nodes\\noc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces --template '{{ range .items }}{{ $name := .metadata.name }}{{ $ns := .metadata.namespace }}{{ range .spec.containers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ \\\"\\\\n\\\" }}{{ end }}{{ range .spec.initContainers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ \\\"\\\\n\\\" }}{{ end }}{{ end }}' \\u003e /tmp/containers\\noc --insecure-skip-tls-verify --request-timeout=5s get pods -l openshift.io/component=api --all-namespaces --template '{{ range .items }}-n {{ .metadata.namespace }} {{ .metadata.name }}{{ \\\"\\\\n\\\" }}{{ end }}' \\u003e /tmp/pods-api\\n\\noc --insecure-skip-tls-verify --request-timeout=5s adm inspect clusteroperators --dest-dir ${ARTIFACT_DIR}/inspect || true\\n\\nPLATFORM=$(oc get infrastructure cluster -o jsonpath=\\\"{.status.platform}\\\")\\nCAPI_PLATFORM=$(echo \\\"$PLATFORM\\\" | tr '[:upper:]' '[:lower:]')\\n\\nif [[ \\\"${CAPI_PLATFORM}\\\" == \\\"baremetal\\\" ]]; then\\n  CAPI_PLATFORM=metal3\\nfi\\n\\nif [[ \\\"${CAPI_PLATFORM}\\\" == \\\"powervs\\\" ]]; then\\n  CAPI_PLATFORM=ibmpower\\nfi\\n\\nqueue ${ARTIFACT_DIR}/config-resources.json oc --insecure-skip-tls-verify --request-timeout=5s get apiserver.config.openshift.io authentication.config.openshift.io build.config.openshift.io console.config.openshift.io dns.config.openshift.io featuregate.config.openshift.io image.config.openshift.io infrastructure.config.openshift.io ingress.config.openshift.io network.config.openshift.io oauth.config.openshift.io project.config.openshift.io scheduler.config.openshift.io -o json\\nqueue ${ARTIFACT_DIR}/apiservices.json oc --insecure-skip-tls-verify --request-timeout=5s get apiservices -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/apiservices oc --insecure-skip-tls-verify --request-timeout=5s get apiservices\\nqueue ${ARTIFACT_DIR}/clusteroperators.json oc --insecure-skip-tls-verify --request-timeout=5s get clusteroperators -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/clusteroperators oc --insecure-skip-tls-verify --request-timeout=5s get clusteroperators\\nqueue ${ARTIFACT_DIR}/clusterversion.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterversion -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/clusterversion oc --insecure-skip-tls-verify --request-timeout=5s get clusterversion\\nqueue ${ARTIFACT_DIR}/configmaps.json oc --insecure-skip-tls-verify --request-timeout=5s get configmaps --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/configmaps oc --insecure-skip-tls-verify --request-timeout=5s get configmaps --all-namespaces\\nqueue ${ARTIFACT_DIR}/credentialsrequests.json oc --insecure-skip-tls-verify --request-timeout=5s get credentialsrequests --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/credentialsrequests oc --insecure-skip-tls-verify --request-timeout=5s get credentialsrequests --all-namespaces\\nqueue ${ARTIFACT_DIR}/csr.json oc --insecure-skip-tls-verify --request-timeout=5s get csr -o json\\nqueue ${ARTIFACT_DIR}/endpoints.json oc --insecure-skip-tls-verify --request-timeout=5s get endpoints --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/endpoints oc --insecure-skip-tls-verify --request-timeout=5s get endpoints --all-namespaces\\nFILTER=gzip queue ${ARTIFACT_DIR}/deployments.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get deployments --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/deployments oc --insecure-skip-tls-verify --request-timeout=5s get deployments --all-namespaces -o wide\\nFILTER=gzip queue ${ARTIFACT_DIR}/daemonsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get daemonsets --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/daemonsets oc --insecure-skip-tls-verify --request-timeout=5s get daemonsets --all-namespaces -o wide\\nFILTER=gzip queue ${ARTIFACT_DIR}/jobs.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get jobs.batch --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/events.json oc --insecure-skip-tls-verify --request-timeout=5s get events --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/events oc --insecure-skip-tls-verify --request-timeout=5s get events --all-namespaces\\nqueue ${ARTIFACT_DIR}/featuregate.json oc --insecure-skip-tls-verify --request-timeout=5s get featuregate -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/featuregate oc --insecure-skip-tls-verify --request-timeout=5s get featuregate\\nqueue ${ARTIFACT_DIR}/kubeapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get kubeapiserver -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/kubeapiserver oc --insecure-skip-tls-verify --request-timeout=5s get kubeapiserver\\nqueue ${ARTIFACT_DIR}/kubecontrollermanager.json oc --insecure-skip-tls-verify --request-timeout=5s get kubecontrollermanager -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/kubecontrollermanager oc --insecure-skip-tls-verify --request-timeout=5s get kubecontrollermanager\\nqueue ${ARTIFACT_DIR}/machineconfigpools.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigpools -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/machineconfigpools oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigpools\\nqueue ${ARTIFACT_DIR}/machineconfigs.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigs -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/machineconfigs oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigs\\nqueue ${ARTIFACT_DIR}/controlplanemachinesets.json oc --insecure-skip-tls-verify --request-timeout=5s get controlplanemachinesets -A -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/controlplanemachinesets oc --insecure-skip-tls-verify --request-timeout=5s get controlplanemachinesets -A\\nqueue ${ARTIFACT_DIR}/machinesets.json oc --insecure-skip-tls-verify --request-timeout=5s get machinesets.machine.openshift.io -A -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/machinesets oc --insecure-skip-tls-verify --request-timeout=5s get machinesets.machine.openshift.io -A\\nqueue ${ARTIFACT_DIR}/machinesets.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get machinesets.cluster.x-k8s.io -A -o json\\n\\nqueue ${ARTIFACT_DIR}/machines.json oc --insecure-skip-tls-verify --request-timeout=5s get machines.machine.openshift.io -A -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/machines oc --insecure-skip-tls-verify --request-timeout=5s get machines.machine.openshift.io -A -o wide\\n\\nqueue ${ARTIFACT_DIR}/machines.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get machines.cluster.x-k8s.io -A -o json\\n\\nqueue ${ARTIFACT_DIR}/${CAPI_PLATFORM}clusters.infrastructure.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get ${CAPI_PLATFORM}clusters.infrastructure.cluster.x-k8s.io -A -o json\\nqueue ${ARTIFACT_DIR}/${CAPI_PLATFORM}machines.infrastructure.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get ${CAPI_PLATFORM}machines.infrastructure.cluster.x-k8s.io -A -o json\\nqueue ${ARTIFACT_DIR}/${CAPI_PLATFORM}machinetemplates.infrastructure.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get ${CAPI_PLATFORM}machinetemplates.infrastructure.cluster.x-k8s.io -A -o json\\n\\nqueue ${ARTIFACT_DIR}/namespaces.json oc --insecure-skip-tls-verify --request-timeout=5s get namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/namespaces oc --insecure-skip-tls-verify --request-timeout=5s get namespaces\\nqueue ${ARTIFACT_DIR}/nodes.json oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/nodes oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o wide\\nqueue ${ARTIFACT_DIR}/openshiftapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get openshiftapiserver -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/openshiftapiserver oc --insecure-skip-tls-verify --request-timeout=5s get openshiftapiserver\\nqueue ${ARTIFACT_DIR}/pods.json oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/pods oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces -o wide\\nqueue ${ARTIFACT_DIR}/persistentvolumes.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumes --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/persistentvolumes oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumes --all-namespaces -o wide\\nqueue ${ARTIFACT_DIR}/persistentvolumeclaims.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumeclaims --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/persistentvolumeclaims oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumeclaims --all-namespaces -o wide\\nFILTER=gzip queue ${ARTIFACT_DIR}/replicasets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get replicasets --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/replicasets oc --insecure-skip-tls-verify --request-timeout=5s get replicasets --all-namespaces -o wide\\nqueue ${ARTIFACT_DIR}/rolebindings.json oc --insecure-skip-tls-verify --request-timeout=5s get rolebindings --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/rolebindings oc --insecure-skip-tls-verify --request-timeout=5s get rolebindings --all-namespaces\\nqueue ${ARTIFACT_DIR}/roles.json oc --insecure-skip-tls-verify --request-timeout=5s get roles --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/roles oc --insecure-skip-tls-verify --request-timeout=5s get roles --all-namespaces\\nqueue ${ARTIFACT_DIR}/services.json oc --insecure-skip-tls-verify --request-timeout=5s get services --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/services oc --insecure-skip-tls-verify --request-timeout=5s get services --all-namespaces\\nFILTER=gzip queue ${ARTIFACT_DIR}/statefulsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get statefulsets --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/statefulsets oc --insecure-skip-tls-verify --request-timeout=5s get statefulsets --all-namespaces\\nqueue ${ARTIFACT_DIR}/routes.json oc --insecure-skip-tls-verify --request-timeout=5s get routes --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/routes oc --insecure-skip-tls-verify --request-timeout=5s get routes --all-namespaces\\nqueue ${ARTIFACT_DIR}/subscriptions.json oc --insecure-skip-tls-verify --request-timeout=5s get subscriptions --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/subscriptions oc --insecure-skip-tls-verify --request-timeout=5s get subscriptions --all-namespaces\\nqueue ${ARTIFACT_DIR}/clusterserviceversions.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterserviceversions --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/clusterserviceversions oc --insecure-skip-tls-verify --request-timeout=5s get clusterserviceversions --all-namespaces\\nqueue ${ARTIFACT_DIR}/releaseinfo.json oc --insecure-skip-tls-verify --request-timeout=5s adm release info -o json\\nqueue ${ARTIFACT_DIR}/clusterrolebindings.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterrolebindings --all-namespaces -o json\\n\\nFILTER=gzip queue ${ARTIFACT_DIR}/openapi.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get --raw /openapi/v2\\n\\n# gather nodes first in parallel since they may contain the most relevant debugging info\\nwhile IFS= read -r i; do\\n  mkdir -p ${ARTIFACT_DIR}/nodes/$i\\n  queue ${ARTIFACT_DIR}/nodes/$i/heap oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/debug/pprof/heap\\n  FILTER=gzip queue ${ARTIFACT_DIR}/nodes/$i/journal.gz oc --insecure-skip-tls-verify adm node-logs $i --unify=false\\n  FILTER=gzip queue ${ARTIFACT_DIR}/nodes/$i/audit.gz oc --insecure-skip-tls-verify adm node-logs $i --unify=false --path=audit/audit.log\\ndone \\u003c /tmp/nodes\\n\\necho \\\"INFO: gathering the audit logs for each master\\\"\\npaths=(openshift-apiserver kube-apiserver oauth-apiserver etcd)\\nfor path in \\\"${paths[@]}\\\" ; do\\n  output_dir=\\\"${ARTIFACT_DIR}/audit_logs/$path\\\"\\n  mkdir -p \\\"$output_dir\\\"\\n\\n  # Skip downloading of .terminating and .lock files.\\n  oc adm node-logs --role=master --path=\\\"$path\\\" | \\\\\\n    grep -v \\\".terminating\\\" | \\\\\\n    grep -v \\\".lock\\\" | \\\\\\n  tee \\\"${output_dir}.audit_logs_listing\\\"\\n\\n  # The ${output_dir}.audit_logs_listing file contains lines with the node and filename\\n  # separated by a space.\\n  while IFS= read -r item; do\\n    node=$(echo $item |cut -d ' ' -f 1)\\n    fname=$(echo $item |cut -d ' ' -f 2)\\n    echo \\\"INFO: Queueing download/gzip of ${path}/${fname} from ${node}\\\";\\n    echo \\\"INFO:   gziping to ${output_dir}/${node}-${fname}.gz\\\";\\n    FILTER=gzip queue ${output_dir}/${node}-${fname}.gz oc --insecure-skip-tls-verify adm node-logs ${node} --path=${path}/${fname}\\n  done \\u003c ${output_dir}.audit_logs_listing\\ndone\\n\\n# change to the network artifact dir\\nmkdir -p ${ARTIFACT_DIR}/network/multus_logs/\\npushd ${ARTIFACT_DIR}/network/multus_logs/ || return\\n\\nVOLUME_PERCENTAGE_FLAG=\\\"\\\"\\nif oc adm must-gather --help 2\\u003e\\u00261 | grep -q -- '--volume-percentage'; then\\n   VOLUME_PERCENTAGE_FLAG=\\\"--volume-percentage=100\\\"\\nfi\\n\\noc get node -oname | xargs oc adm must-gather $VOLUME_PERCENTAGE_FLAG -- /usr/bin/gather_multus_logs\\npopd || return\\n\\n# If the tcpdump-service or conntrackdump-service step was used, grab the files.\\nfor capture_type in tcpdump conntrackdump; do\\n  echo \\\"INFO: gathering ${capture_type} information if present\\\"\\n  output_dir=\\\"${ARTIFACT_DIR}/${capture_type}/\\\"\\n  mkdir -p \\\"$output_dir\\\"\\n\\n  # Skip downloading of .terminating and .lock files.\\n  oc adm node-logs -l kubernetes.io/os=linux --path=\\\"/${capture_type}\\\" | \\\\\\n  grep -v \\\".terminating\\\" | \\\\\\n  grep -v \\\".lock\\\" | \\\\\\n  tee \\\"${output_dir}.${capture_type}_listing\\\"\\n  cat \\\"${output_dir}.${capture_type}_listing\\\"\\n\\n  # The ${output_dir}.${capture_type}_listing file contains lines with the node and filename\\n  # separated by a space.\\n  while IFS= read -r item; do\\n    node=$(echo $item |cut -d ' ' -f 1)\\n    fname=$(echo $item |cut -d ' ' -f 2)\\n    echo \\\"INFO: Queueing download/gzip of /${capture_type}/${fname} from ${node}\\\";\\n    echo \\\"INFO: gziping to ${output_dir}/${node}-${fname}.gz\\\";\\n    FILTER=gzip queue ${output_dir}/${node}-${fname}.gz oc --insecure-skip-tls-verify adm node-logs ${node} --path=/${capture_type}/${fname}\\n  done \\u003c ${output_dir}.${capture_type}_listing\\ndone\\n\\n# Gather etcd strace and pprof output if present:\\necho \\\"INFO: Fetching debug info from etcd pods if present\\\"\\noutput_dir=\\\"${ARTIFACT_DIR}/etcd-debug\\\"\\nmkdir -p \\\"$output_dir\\\"\\nTARGET_FILES=\\\"cpu.prof\\\"\\nfor pqn in $(oc get pods -n openshift-etcd -l app=etcd --no-headers -o=name); do\\n\\techo ${pqn}\\n\\tpod_name=$(echo ${pqn} | cut -d '/' -f 2)\\n\\tfor file_name in $TARGET_FILES; do\\n\\t\\tDEST_FILE=\\\"${output_dir}/${pod_name}_${file_name}\\\"\\n\\t\\toc cp openshift-etcd/${pod_name}:/var/lib/etcd/debug/${file_name} ${DEST_FILE}\\n\\tdone\\ndone\\necho \\\"INFO: done attempting to fetch etcd debug info\\\"\\n\\n\\nfunction gather_network() {\\n  local namespace=$1\\n  local selector=$2\\n  local container=$3\\n  local netfilter=$4\\n\\n  if ! oc --insecure-skip-tls-verify --request-timeout=20s get ns ${namespace}; then\\n    echo \\\"Namespace ${namespace} does not exist, skipping ${namespace} network pods\\\"\\n    return\\n  fi\\n\\n  local podlist=\\\"/tmp/${namespace}-pods\\\"\\n\\n  # Snapshot iptables/nftables rules on each node\\n  oc --insecure-skip-tls-verify --request-timeout=20s get -n \\\"${namespace}\\\" -l \\\"${selector}\\\" pods --template '{{ range .items }}{{ .metadata.name }}{{ \\\"\\\\n\\\" }}{{ end }}' \\u003e ${podlist}\\n  while IFS= read -r i; do\\n    queue ${ARTIFACT_DIR}/network/iptables-save-$i oc --insecure-skip-tls-verify --request-timeout=20s rsh -n ${namespace} -c ${container} $i iptables-save -c\\n    if [[ ${netfilter} == \\\"nftables\\\" ]]; then\\n      queue ${ARTIFACT_DIR}/network/nft-list-ruleset-$i oc --insecure-skip-tls-verify --request-timeout=20s rsh -n ${namespace} -c ${container} $i nft list ruleset\\n    fi\\n  done \\u003c ${podlist}\\n  # Snapshot all used ports on each node.\\n  while IFS= read -r i; do\\n    queue ${ARTIFACT_DIR}/network/ss-$i oc --insecure-skip-tls-verify --request-timeout=20s rsh -n ${namespace} -c ${container} $i ss -apn\\n  done \\u003c ${podlist}\\n}\\n\\n# Gather network details both from SDN and OVN. One of them should succeed.\\ngather_network openshift-sdn app=sdn sdn iptables\\nsample_node=$(oc get no -o jsonpath='{.items[0].metadata.name}')\\nsample_node_zone=$(oc get node \\\"${sample_node}\\\" -o jsonpath='{.metadata.annotations.k8s\\\\.ovn\\\\.org/zone-name}')\\nif [ \\\"${sample_node}\\\" = \\\"${sample_node_zone}\\\" ]; then\\n  echo \\\"INFO: INTERCONNECT MODE\\\"\\n  ovnkube_container=ovnkube-controller\\n  ovnkube_netfilter=nftables\\nelse\\n  echo \\\"INFO: LEGACY MODE\\\"\\n  ovnkube_container=ovnkube-node\\n  ovnkube_netfilter=iptables\\nfi\\ngather_network openshift-ovn-kubernetes app=ovnkube-node ${ovnkube_container} ${ovnkube_netfilter}\\n\\nwhile IFS= read -r i; do\\n  file=\\\"$( echo \\\"$i\\\" | cut -d ' ' -f 3 | tr -s ' ' '_' )\\\"\\n  queue ${ARTIFACT_DIR}/metrics/${file}-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server \\\"https://$( hostname ):8443\\\" --config /etc/origin/master/admin.kubeconfig'\\n  queue ${ARTIFACT_DIR}/metrics/${file}-controllers-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server \\\"https://$( hostname ):8444\\\" --config /etc/origin/master/admin.kubeconfig'\\ndone \\u003c /tmp/pods-api\\n\\nwhile IFS= read -r i; do\\n  file=\\\"$( echo \\\"$i\\\" | cut -d ' ' -f 2,3,5 | tr -s ' ' '_' )\\\"\\n  options=\\\"\\\"\\n  if [[ $i == *\\\"dns-default\\\"* ]]; then\\n      options=\\\"--timestamps\\\"\\n  fi\\n  FILTER=gzip queue ${ARTIFACT_DIR}/pods/${file}.log.gz oc --insecure-skip-tls-verify logs ${options} --request-timeout=20s $i\\n  FILTER=gzip queue ${ARTIFACT_DIR}/pods/${file}_previous.log.gz oc --insecure-skip-tls-verify logs ${options} --request-timeout=20s -p $i\\ndone \\u003c /tmp/containers\\n\\nprometheus=\\\"$( oc --insecure-skip-tls-verify --request-timeout=20s get pods -n openshift-monitoring -l app.kubernetes.io/name=prometheus --ignore-not-found -o name )\\\"\\nif [[ -n \\\"${prometheus}\\\" ]]; then\\n\\techo \\\"${prometheus}\\\" | while read prompod; do\\n\\t  prompod=${prompod#\\\"pod/\\\"}\\n\\t\\tFILE_NAME=\\\"${prompod}\\\"\\n\\t\\t# for backwards compatibility with promecious we keep the first files beginning with \\\"prometheus\\\"\\n\\t\\tif [[ \\\"$prompod\\\" == *-0 ]]; then\\n\\t\\t\\tFILE_NAME=\\\"prometheus\\\"\\n\\t\\tfi\\n\\n\\t\\techo \\\"Snapshotting prometheus from ${prompod} as ${FILE_NAME} (may take 15s) ...\\\"\\n\\t\\tqueue \\\"${ARTIFACT_DIR}/metrics/${FILE_NAME}.tar.gz\\\" oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- tar cvzf - -C /prometheus .\\n\\n\\t\\tFILTER=gzip queue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-target-metadata.json.gz oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/targets/metadata --data-urlencode 'match_target={instance!=\\\\\\\"\\\\\\\"}'\\\"\\n\\t\\tFILTER=gzip queue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-config.json.gz oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/status/config\\\"\\n\\t\\tqueue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-tsdb-status.json oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/status/tsdb\\\"\\n\\t\\tqueue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-runtimeinfo.json oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/status/runtimeinfo\\\"\\n\\t\\tqueue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-targets.json oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/targets\\\"\\n\\tdone\\n\\n\\tcat \\u003e\\u003e ${SHARED_DIR}/custom-links.txt \\u003c\\u003c-EOF\\n\\t\\u003cscript\\u003e\\n\\tlet prom = document.createElement('a');\\n\\tprom.href=\\\"https://promecieus.dptools.openshift.org/?search=\\\"+document.referrer;\\n\\tprom.title=\\\"Creates a new prometheus deployment with data from this job run.\\\";\\n\\tprom.innerHTML=\\\"PromeCIeus\\\";\\n\\tprom.target=\\\"_blank\\\";\\n\\tdocument.getElementById(\\\"wrapper\\\").append(prom);\\n\\t\\u003c/script\\u003e\\n\\tEOF\\nelse\\n\\techo \\\"Unable to find a Prometheus pod to snapshot.\\\"\\nfi\\n\\necho \\\"Adding debug tools link to sippy for intervals\\\"\\nif [[ \\\"${JOB_TYPE}\\\" == \\\"presubmit\\\" ]]; then\\n  extra_args=\\\"${JOB_NAME}/${REPO_OWNER}_${REPO_NAME}/${PULL_NUMBER}\\\"\\nelse\\n  extra_args=\\\"${JOB_NAME}\\\"\\nfi\\ncat \\u003e\\u003e ${SHARED_DIR}/custom-links.txt \\u003c\\u003c EOF\\n\\u003ca target=\\\"_blank\\\" href=\\\"https://sippy.dptools.openshift.org/sippy-ng/job_runs/${BUILD_ID}/${extra_args}/intervals\\\" title=\\\"Intervals charts give insight into what was happening on the cluster at various points in time, including when tests failed or when operators were in certain states.\\\"\\u003eIntervals\\u003c/a\\u003e\\nEOF\\n\\n# Calculate metrics suitable for apples-to-apples comparison across CI runs.\\n# Load whatever timestamps we can, generate the metrics script, and then send it to the\\n# thanos-querier pod on the cluster via exec (so we don't need to have a route exposed).\\necho \\\"Saving job metrics\\\"\\ncat \\u003e/tmp/generate.sh \\u003c\\u003c'GENERATE'\\n#!/bin/bash\\n\\nset -o nounset\\nset -o errexit\\nset -o pipefail\\n\\n# CI job metrics extraction\\n#\\n# This script gathers a number of important query metrics from the metrics\\n# stack in a cluster after tests are complete. It gathers metrics related to\\n# three phases - install, test, and overall (install start to test end).\\n#\\n# Prometheus may not have data from early in an install, and some runs may\\n# result in outage to prometheus, so queries have to look at measurements\\n# that may have gaps or be incomplete.\\n#\\n# A metric belongs in this set if it is useful in tracking a trend over time\\n# in the behavior of the cluster at install time or over the test run - for\\n# instance, by looking at the total CPU usage of the control plane, we can\\n# perform apples to apples comparisons between two cloud platforms and look\\n# for places where we are inadequate. The metrics are output to the artifacts\\n# dir and then are processed by the ci-search indexer cloud functions to be\\n# visualized by ci-search.\\n#\\n# The output of the script is a file with one JSON object per line consisting\\n# of:\\n#\\n# {\\\"\\u003cname_of_metric\\u003e\\\":\\u003cprometheus query result object\\u003e}\\n#\\n# The prometheus query result object is described here:\\n# https://prometheus.io/docs/prometheus/latest/querying/api/\\n#\\n# Metrics are expected to return a scalar, a vector with a single entry and\\n# no labels, or a vector with a single label and a single entry.\\n#\\n# This script outputs a script that is intended to be invoked against a local\\n# prometheus instance. In the CI environment we run this script inside the\\n# pod that contains the Thanos querier, but it can be used locally for testing\\n# against a prometheus instance running at localhost:9090.\\n\\n#########\\n\\n# Take as arguments a set of env vars for the phases (install, test, all) that\\n# contain the unix timestamp of the start and end of the two main phases, then\\n# calculate what we can. If a phase is missing, that may mean the test script\\n# could not run to completion, in which case we will not define the variable\\n# and some metrics will not be calculated or output. Omitting a query if it\\n# can't be calculate is important, because the zero value may be meaningful.\\n#\\n# - t_* is the unix timestamp at the end\\n# - s_* is the number of seconds the phase took\\n# - d_* is a prometheus duration of the phase as \\\"\\u003cseconds\\u003es\\\"\\nt_now=$(date +%s)\\nif [[ -n \\\"${TEST_TIME_INSTALL_END-}\\\" ]]; then\\n  t_install=${TEST_TIME_INSTALL_END}\\n  if [[ -n \\\"${TEST_TIME_INSTALL_START-}\\\" ]]; then\\n    s_install=\\\"$(( TEST_TIME_INSTALL_END - TEST_TIME_INSTALL_START ))\\\"\\n    d_install=\\\"${s_install}s\\\"\\n  fi\\nfi\\nif [[ -n \\\"${TEST_TIME_TEST_END-}\\\" ]]; then\\n  t_test=${TEST_TIME_TEST_END}\\n  if [[ -n \\\"${TEST_TIME_TEST_START-}\\\" ]]; then\\n    s_test=\\\"$(( TEST_TIME_TEST_END - TEST_TIME_TEST_START ))\\\"\\n    d_test=\\\"${s_test}s\\\"\\n  fi\\nfi\\n\\nif [[ -n \\\"${TEST_TIME_TEST_START-}\\\" || \\\"${TEST_TIME_INSTALL_START-}\\\" ]]; then\\n  t_start=${TEST_TIME_INSTALL_START:-${TEST_TIME_TEST_START}}\\nfi\\nt_all=${t_test:-${t_install:-${t_now}}}\\nif [[ -n \\\"${t_start-}\\\" ]]; then\\n  s_all=\\\"$(( t_all - t_start ))\\\"\\n  d_all=\\\"${s_all}s\\\"\\nfi\\n\\n# We process this query file one line at a time - if a variable is undefined we'll skip the\\n# entire query.\\ncat \\u003e /tmp/queries \\u003c\\u003c'END'\\n${t_install} cluster:capacity:cpu:total:cores         sum(cluster:capacity_cpu_cores:sum)\\n${t_install} cluster:capacity:cpu:control_plane:cores max(cluster:capacity_cpu_cores:sum{label_node_role_kubernetes_io=\\\"master\\\"})\\n\\n${t_all}     cluster:usage:cpu:total:seconds:quantile      label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[90s:30s]))[${d_all}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_install} cluster:usage:cpu:install:seconds:quantile    label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[90s:30s]))[${d_all}:${d_test}]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_test}    cluster:usage:cpu:test:seconds:quantile       label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[90s:30s]))[${d_test}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n\\n${t_test}    cluster:outage:kubelet:metrics:total:seconds      sum(sum_over_time((1 - up{job=\\\"kubelet\\\",metrics_path=\\\"/metrics\\\"})[8h:1s])) by (metrics_path)\\n\\n${t_all}     cluster:usage:cpu:kubelet:total:seconds:quantile      label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[90s:30s]))[${d_all}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_install} cluster:usage:cpu:kubelet:install:seconds:quantile    label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[90s:30s]))[${d_all}:${d_test}]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_test}    cluster:usage:cpu:kubelet:test:seconds:quantile       label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[90s:30s]))[${d_test}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n\\n${t_all}     cluster:usage:cpu:crio:total:seconds:quantile      label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[90s:30s]))[${d_all}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_install} cluster:usage:cpu:crio:install:seconds:quantile    label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[90s:30s]))[${d_all}:${d_test}]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_test}    cluster:usage:cpu:crio:test:seconds:quantile       label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[90s:30s]))[${d_test}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n\\n${t_all}     cluster:usage:cpu:total:seconds   sum(increase(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:install:seconds sum(increase(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:test:seconds    sum(increase(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:kubelet:total:seconds   sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:kubelet:install:seconds sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:kubelet:test:seconds    sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:crio:total:seconds   sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:crio:install:seconds sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:crio:test:seconds    sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:total:rate   sum(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:install:rate sum(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:test:rate    sum(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:kubelet:total:rate   sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:kubelet:install:rate sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:kubelet:test:rate    sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:crio:total:rate   sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:crio:install:rate sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:crio:test:rate    sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:control_plane:total:avg   avg(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_all}]) * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"}))\\n${t_install} cluster:usage:cpu:control_plane:install:avg avg(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_install}]) * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"}))\\n${t_test}    cluster:usage:cpu:control_plane:test:avg    avg(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_test}]) * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"}))\\n\\n${t_all}     cluster:usage:cpu:kube_apiserver:total:avg   avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:cpu:kube_apiserver:install:avg avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:cpu:kube_apiserver:test:avg    avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:cpu:apiserver:total:seconds:quantile label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[90s:30s]))[${d_all}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_install} cluster:usage:cpu:apiserver:install:seconds:quantile label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[90s:30s]))[${d_all}:${d_test}]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_test}    cluster:usage:cpu:apiserver:test:seconds:quantile label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[90s:30s]))[${d_test}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n\\n${t_all}     cluster:usage:cpu:etcd:total:avg   avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"etcd-ip-.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:cpu:etcd:install:avg avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"etcd-ip-.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:cpu:etcd:test:avg    avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"etcd-ip-.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:cpu:openshift_apiserver:total:avg   avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:cpu:openshift_apiserver:install:avg avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:cpu:openshift_apiserver:test:avg    avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:cpu:oauth_apiserver:total:avg   avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:cpu:oauth_apiserver:install:avg avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:cpu:oauth_apiserver:test:avg    avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:mem:rss:control_plane:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_rss{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:control_plane:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_rss{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:control_plane:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_rss{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:rss:kubelet:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_rss{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:kubelet:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_rss{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:kubelet:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_rss{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:rss:crio:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_rss{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:crio:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_rss{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:crio:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_rss{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:working_set:control_plane:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_working_set_bytes{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:control_plane:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_working_set_bytes{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:control_plane:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_working_set_bytes{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:working_set:kubelet:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:kubelet:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:kubelet:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:working_set:crio:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:crio:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:crio:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:memory:kubelet:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}[${t_all}])) by (node))\\n${t_install} cluster:usage:memory:kubelet:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}[${t_install}])) by (node))\\n${t_test}    cluster:usage:memory:kubelet:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}[${t_test}])) by (node))\\n\\n${t_all}     cluster:usage:memory:crio:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}[${t_all}])) by (node))\\n${t_install} cluster:usage:memory:crio:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}[${t_install}])) by (node))\\n${t_test}    cluster:usage:memory:crio:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}[${t_test}])) by (node))\\n\\n${t_all}     cluster:usage:memory:kube_apiserver:total:avg   avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"kube-apiserver-ip.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:memory:kube_apiserver:install:avg avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"kube-apiserver-ip.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:memory:kube_apiserver:test:avg    avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"kube-apiserver-ip.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:memory:etcd:total:avg   avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"etcd-ip-.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:memory:etcd:install:avg avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"etcd-ip.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:memory:etcd:test:avg    avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"etcd-ip.*\\\", namespace\\\"openshift-etcd\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:memory:openshift_apiserver:total:avg   avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:memory:openshift_apiserver:install:avg avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:memory:openshift_apiserver:test:avg    avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:memory:oauth_apiserver:total:avg   avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:memory:oauth_apiserver:install:avg avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:memory:oauth_apiserver:test:avg    avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:alerts:total:firing:distinct:severity count by (severity) (count by (alertname,severity) (count_over_time(ALERTS{alertstate=\\\"firing\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}[${d_all}])))\\n\\n${t_test}    cluster:alerts:total:firing:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"firing\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_test}:1s]))\\n${t_install} cluster:alerts:install:firing:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"firing\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_install}:1s]))\\n${t_test}    cluster:alerts:test:firing:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"firing\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_test}:1s]))\\n\\n${t_test}    cluster:alerts:total:pending:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"pending\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_test}:1s]))\\n${t_install} cluster:alerts:install:pending:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"pending\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_install}:1s]))\\n${t_test}    cluster:alerts:test:pending:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"pending\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_test}:1s]))\\n\\n${t_all}     cluster:api:total:requests sum(increase(apiserver_request_total[${d_all}]))\\n${t_install} cluster:api:install:requests sum(increase(apiserver_request_total[${d_install}]))\\n${t_test}    cluster:api:requests:test sum(increase(apiserver_request_total[${d_test}]))\\n\\n${t_all}     cluster:api:read:total:requests sum(increase(apiserver_request_total{verb=~\\\"GET|LIST|WATCH\\\"}[${d_all}]))\\n${t_install} cluster:api:read:install:requests sum(increase(apiserver_request_total{verb=~\\\"GET|LIST|WATCH\\\"}[${d_install}]))\\n${t_test}    cluster:api:read:test:requests sum(increase(apiserver_request_total{verb=~\\\"GET|LIST|WATCH\\\"}[${d_test}]))\\n${t_all}     cluster:api:write:total:requests sum(increase(apiserver_request_total{verb!~\\\"GET|LIST|WATCH\\\"}[${d_all}]))\\n${t_install} cluster:api:write:install:requests sum(increase(apiserver_request_total{verb!~\\\"GET|LIST|WATCH\\\"}[${d_install}]))\\n${t_test}    cluster:api:write:test:requests sum(increase(apiserver_request_total{verb!~\\\"GET|LIST|WATCH\\\"}[${d_test}]))\\n\\n${t_all}     cluster:api:read:requests:latency:total:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_all}])) by (le,scope))\\n${t_install} cluster:api:read:requests:latency:install:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_install}])) by (le,scope))\\n${t_test}    cluster:api:read:requests:latency:test:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_test}])) by (le,scope))\\n${t_all}     cluster:api:write:requests:latency:total:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_all}])) by (le,scope))\\n${t_install} cluster:api:write:requests:latency:install:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_install}])) by (le,scope))\\n${t_test}    cluster:api:write:requests:latency:test:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_test}])) by (le,scope))\\n\\n${t_all}     cluster:api:read:requests:latency:total:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_all}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_all}])) by (le,scope)\\n${t_install} cluster:api:read:requests:latency:install:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_install}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_install}])) by (le,scope)\\n${t_test}    cluster:api:read:requests:latency:test:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_test}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_test}])) by (le,scope)\\n${t_all}     cluster:api:write:requests:latency:total:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_all}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_all}])) by (le,scope)\\n${t_install} cluster:api:write:requests:latency:install:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_install}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_install}])) by (le,scope)\\n${t_test}    cluster:api:write:requests:latency:test:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_test}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_test}])) by (le,scope)\\n\\n${t_all}     cluster:api:errors:total:requests sum(increase(apiserver_request_total{code=~\\\"5\\\\\\\\\\\\\\\\d\\\\\\\\\\\\\\\\d|0\\\"}[${d_all}]))\\n${t_install} cluster:api:errors:install:requests sum(increase(apiserver_request_total{code=~\\\"5\\\\\\\\\\\\\\\\d\\\\\\\\\\\\\\\\d|0\\\"}[${d_install}]))\\n\\n${t_install} cluster:resource:install:count sort_desc(max by(resource) (etcd_object_counts)) \\u003e 1\\n${t_test}    cluster:resource:test:delta sort_desc(max by(resource) (delta(etcd_object_counts[${d_test}]))) != 0\\n\\n${t_all}     cluster:etcd:read:requests:latency:total:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"get|list|listWithCount\\\"}[${d_all}])) by (le,scope))\\n${t_install} cluster:etcd:read:requests:latency:install:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"get|list|listWithCount\\\"}[${d_install}])) by (le,scope))\\n${t_test}    cluster:etcd:read:requests:latency:test:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"get|list|listWithCount\\\"}[${d_test}])) by (le,scope))\\n${t_all}     cluster:etcd:write:requests:latency:total:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"create|update|delete\\\"}[${d_all}])) by (le,scope))\\n${t_install} cluster:etcd:write:requests:latency:install:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"create|update|delete\\\"}[${d_install}])) by (le,scope))\\n${t_test}    cluster:etcd:write:requests:latency:test:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"create|update|delete\\\"}[${d_test}])) by (le,scope))\\n\\n${t_all}     cluster:etcd:read:requests:latency:total:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"get|list|listWithCount\\\"}[${d_all}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"get|list|listWithCount\\\"}[${d_all}])) by (le,scope)\\n${t_install} cluster:etcd:read:requests:latency:install:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"get|list|listWithCount\\\"}[${d_install}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"get|list|listWithCount\\\"}[${d_install}])) by (le,scope)\\n${t_test}    cluster:etcd:read:requests:latency:test:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"get|list|listWithCount\\\"}[${d_test}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"get|list|listWithCount\\\"}[${d_test}])) by (le,scope)\\n${t_all}     cluster:etcd:write:requests:latency:total:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"create|update|delete\\\"}[${d_all}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"create|update|delete\\\"}[${d_all}])) by (le,scope)\\n${t_install} cluster:etcd:write:requests:latency:install:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"create|update|delete\\\"}[${d_install}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"create|update|delete\\\"}[${d_install}])) by (le,scope)\\n${t_test}    cluster:etcd:write:requests:latency:test:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"create|update|delete\\\"}[${d_test}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"create|update|delete\\\"}[${d_test}])) by (le,scope)\\n\\n${t_all}     cluster:node:total:boots sum(increase(node_boots_total[${d_all}]))\\n${t_test}    cluster:node:test:boots sum(increase(node_boots_total[${d_test}]))\\n\\n${t_all}     cluster:pod:openshift:unready:total:fraction   1-max(avg_over_time(cluster:usage:openshift:kube_running_pod_ready:avg[${d_all}]))\\n${t_install} cluster:pod:openshift:unready:install:fraction 1-max(avg_over_time(cluster:usage:openshift:kube_running_pod_ready:avg[${d_install}]))\\n${t_test}    cluster:pod:openshift:unready:test:fraction    1-max(avg_over_time(cluster:usage:openshift:kube_running_pod_ready:avg[${d_test}]))\\n\\n${t_all}     cluster:pod:openshift:started:total:count sum(changes(kube_pod_start_time{namespace=~\\\"openshift-.*\\\"}[${d_all}]) + 1)\\n${t_install} cluster:pod:openshift:started:install:count sum(changes(kube_pod_start_time{namespace=~\\\"openshift-.*\\\"}[${d_install}]) + 1)\\n${t_test}    cluster:pod:openshift:started:test:count sum(changes(kube_pod_start_time{namespace=~\\\"openshift-.*\\\"}[${d_test}]))\\n\\n${t_all}     cluster:container:total:started count(count_over_time((count without(container,endpoint,name,namespace,pod,service,job,metrics_path,instance,image) (container_start_time_seconds{container!=\\\"\\\",container!=\\\"POD\\\",pod!=\\\"\\\"}))[${d_all}:30s]))\\n${t_install} cluster:container:install:started  count(count_over_time((count without(container,endpoint,name,namespace,pod,service,job,metrics_path,instance,image) (container_start_time_seconds{container!=\\\"\\\",container!=\\\"POD\\\",pod!=\\\"\\\"}))[${d_install}:30s]))\\n${t_test}    cluster:container:test:started  count(count_over_time((count without(container,endpoint,name,namespace,pod,service,job,metrics_path,instance,image) (container_start_time_seconds{container!=\\\"\\\",container!=\\\"POD\\\",pod!=\\\"\\\"} \\u003e (${t_test}-${s_test})))[${d_test}:30s]))\\n\\n${t_all}     cluster:version:info:total   topk(1, max by (version) (max_over_time(cluster_version{type=\\\"completed\\\"}[${d_all}])))*0+1\\n${t_install} cluster:version:info:install topk(1, max by (version) (max_over_time(cluster_version{type=\\\"completed\\\"}[${d_install}])))*0+1\\n\\n${t_all}     cluster:version:current:seconds count_over_time(max by (version) ((cluster_version{type=\\\"current\\\"}))[${d_all}:1s])\\n${t_test}    cluster:version:updates:seconds max by (from_version,version) (max_over_time(((time() - cluster_version{type=\\\"updating\\\",version!=\\\"\\\",from_version!=\\\"\\\"}))[${d_test}:1s]))\\n\\n${t_all}     job:duration:total:seconds vector(${s_all})\\n${t_install} job:duration:install:seconds vector(${s_install})\\n${t_test}    job:duration:test:seconds vector(${s_test})\\n\\n${t_all}     cluster:rest:client:requests:latency:total:quantile sum by(type) (histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"},\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\")[${d_all}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\")[${d_all}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\")[${d_all}:30s])) by (le,type)))\\n${t_install} cluster:rest:client:requests:latency:install:quantile sum by(type) (histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"},\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\")[${d_install}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\")[${d_install}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\")[${d_install}:30s])) by (le,type)))\\n${t_test}    cluster:rest:client:requests:latency:test:quantile sum by(type) (histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"},\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\")[${d_test}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\")[${d_test}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\")[${d_test}:30s])) by (le,type)))\\n\\n${t_all}     cluster:rest:client:requests:latency:total:avg sum by(type) (label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_all}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_all}:30s])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}:30s])) /sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}:30s])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}:30s])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n${t_install} cluster:rest:client:requests:latency:install:avg sum by(type) (label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_install}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_install}:30s])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}:30s])) /sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}:30s])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}:30s])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n${t_test}    cluster:rest:client:requests:latency:test:avg sum by(type) (label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_test}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_test}:30s])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}:30s])) /sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}:30s])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}:30s])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n\\n${t_all}     cluster:rest:client:requests:error:total:rate sum by(type) (label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"api-int.*\\\"}[${d_all}])) / sum(rate(rest_client_requests_total{host=~\\\"api-int.*\\\"}[${d_all}])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}])) / sum(rate(rest_client_requests_total{host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}])) / sum(rate(rest_client_requests_total{host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n${t_install} cluster:rest:client:requests:error:install:rate sum by(type) (label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"api-int.*\\\"}[${d_install}])) / sum(rate(rest_client_requests_total{host=~\\\"api-int.*\\\"}[${d_install}])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}])) / sum(rate(rest_client_requests_total{host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}])) / sum(rate(rest_client_requests_total{host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n${t_test}    cluster:rest:client:requests:error:test:rate sum by(type) (label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"api-int.*\\\"}[${d_test}])) / sum(rate(rest_client_requests_total{host=~\\\"api-int.*\\\"}[${d_test}])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}])) / sum(rate(rest_client_requests_total{host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}])) / sum(rate(rest_client_requests_total{host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n\\nEND\\n\\n# topk(1, max by (image, version) (max_over_time(cluster_version{type=\\\"completed\\\"}[30m])))\\n\\n# Perform variable replacement by putting each line of the query file through an eval and then outputting\\n# it back to a file.\\n# glob expansion is disabled because we use '*' in queries for multiplication\\nset -f\\n# clear the file\\necho \\u003e /tmp/queries_resolved\\nwhile IFS= read -r i; do\\n  if [[ -z \\\"${i}\\\" ]]; then continue; fi\\n  # Try to convert the line of the file into a query, performing bash substitution AND catch undefined variables\\n  # The heredoc is necessary because bash will perform quote evaluation on labels in queries (pod=\\\"x\\\" becomes pod=x)\\n  if ! q=$( eval $'cat \\u003c\\u003cEND\\\\n'$i$'\\\\nEND\\\\n' 2\\u003e/dev/null ); then\\n    # evaluate the errors and output them to stderr\\n    (\\n      set +e\\n      set +x\\n      q=$( eval $'cat \\u003c\\u003cEND\\\\n'$i$'\\\\nEND\\\\n' 2\\u003e\\u00261 1\\u003e/dev/null )\\n      echo \\\"error: Query '${i}' was not valid:$(echo \\\"${q}\\\" | cut -f 3- -d ':')\\\" 1\\u003e\\u00262\\n    )\\n    continue\\n  fi\\n  echo \\\"${q}\\\" \\u003e\\u003e /tmp/queries_resolved\\ndone \\u003c /tmp/queries\\nset +f\\n\\n# Output the script to execute. The first part embeds the evaluated queries and will write them to /tmp\\n# on the remote system.\\ncat \\u003c\\u003cSCRIPT\\n#!/bin/bash\\nset -euo pipefail\\n\\ncat \\u003e /tmp/queries \\u003c\\u003c'END'\\n$( cat /tmp/queries_resolved )\\nEND\\nSCRIPT\\n# The second part of the script iterates over the evaluated queries and queries a local prometheus.\\n# Variables are not expanded in this section.\\ncat \\u003c\\u003c'SCRIPT'\\nwhile IFS= read -r q; do\\n  if [[ -z \\\"${q}\\\" ]]; then continue; fi\\n  # part up the line '\\u003cunix_timestamp_query_time\\u003e \\u003cname\\u003e \\u003cquery\\u003e'\\n  timestamp=${q%% *}\\n  q=${q#* }\\n  name=${q%% *}\\n  query=\\\"${q#* }\\\"\\n  # perform the query against the local prometheus instance\\n  if ! out=$( curl -f --silent http://localhost:9090/api/v1/query --data-urlencode \\\"time=${timestamp}\\\" --data-urlencode \\\"query=${query}\\\" ); then\\n    echo \\\"error: Query ${name} failed at ${timestamp}: ${query}\\\" 1\\u003e\\u00262\\n    continue\\n  fi\\n  # wrap the\\n  echo \\\"{\\\\\\\"${name}\\\\\\\":${out}}\\\"\\ndone \\u003c /tmp/queries\\nSCRIPT\\nGENERATE\\nscript=\\\"$(\\n  TEST_TIME_INSTALL_START=\\\"$( cat ${SHARED_DIR}/TEST_TIME_INSTALL_START || true )\\\" \\\\\\n  TEST_TIME_INSTALL_END=\\\"$( cat ${SHARED_DIR}/TEST_TIME_INSTALL_END || true  )\\\" \\\\\\n  TEST_TIME_TEST_START=\\\"$( cat ${SHARED_DIR}/TEST_TIME_TEST_START || true  )\\\" \\\\\\n  TEST_TIME_TEST_END=\\\"$( cat ${SHARED_DIR}/TEST_TIME_TEST_END || true  )\\\" \\\\\\n  bash /tmp/generate.sh\\n)\\\"\\nqueue ${ARTIFACT_DIR}/metrics/job_metrics.json oc --insecure-skip-tls-verify rsh -T -n openshift-monitoring -c thanos-query deploy/thanos-querier /bin/bash -c \\\"${script}\\\"\\n\\nwait\\n\\nmkdir -p ${ARTIFACT_DIR}/junit/\\n\\nif openshift-tests e2e-analysis --help \\u0026\\u003e/dev/null; then\\n    echo \\\"Post e2e-analysis check for the cluster\\\"\\n    openshift-tests e2e-analysis --junit-dir \\\"${ARTIFACT_DIR}/junit\\\" || true\\nfi\\n\\n# C2S/SC2S proxy can not access internet\\nif [[ \\\"${CLUSTER_TYPE:-}\\\" =~ ^aws-s?c2s$ ]]; then\\n  source \\\"${SHARED_DIR}/unset-proxy.sh\\\"\\nfi\\n# This is a temporary conversion of cluster operator status to JSON matching the upgrade - may be moved to code in the future\\ncurl -sL https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \\u003e/tmp/jq \\u0026\\u0026 chmod ug+x /tmp/jq\\n\\n\\u003c${ARTIFACT_DIR}/clusteroperators.json /tmp/jq -r 'def one(condition; t): t as $t | first([.[] | select(condition)] | map(.type=t)[]) // null; def msg: \\\"Operator \\\\(.type) (\\\\(.reason)): \\\\(.message)\\\"; def xmlfailure: if .failure then \\\"\\u003cfailure message=\\\\\\\"\\\\(.failure | @html)\\\\\\\"\\u003e\\\\(.failure | @html)\\u003c/failure\\u003e\\\" else \\\"\\\" end; def xmltest: \\\"\\u003ctestcase name=\\\\\\\"\\\\(.name | @html)\\\\\\\"\\u003e\\\\( xmlfailure )\\u003c/testcase\\u003e\\\"; def withconditions: map({name: \\\"operator conditions \\\\(.metadata.name)\\\"} + ((.status.conditions // [{type:\\\"Available\\\",status: \\\"False\\\",message:\\\"operator is not reporting conditions\\\"}]) | (one(.type==\\\"Available\\\" and .status!=\\\"True\\\"; \\\"unavailable\\\") // one(.type==\\\"Degraded\\\" and .status==\\\"True\\\"; \\\"degraded\\\") // one(.type==\\\"Progressing\\\" and .status==\\\"True\\\"; \\\"progressing\\\") // null) | if . then {failure: .|msg} else null end)); .items | withconditions | \\\"\\u003ctestsuite name=\\\\\\\"Operator results\\\\\\\" tests=\\\\\\\"\\\\( length )\\\\\\\" failures=\\\\\\\"\\\\( [.[] | select(.failure)] | length )\\\\\\\"\\u003e\\\\n\\\\( [.[] | xmltest] | join(\\\"\\\\n\\\"))\\\\n\\u003c/testsuite\\u003e\\\"' \\u003e${ARTIFACT_DIR}/junit/junit_install_status.xml\\n\\n# This is an experimental wiring of autogenerated failure detection.\\necho \\\"Detect known failures from symptoms (experimental) ...\\\"\\ncurl -f https://gist.githubusercontent.com/liangxia/1188ce4d25f42138694e32ac8ee9a373/raw/994d3bedeb7cb4cfc679b1e27e1a659a3d845d61/symptom.sh 2\\u003e/dev/null | bash -s ${ARTIFACT_DIR} \\u003e ${ARTIFACT_DIR}/junit/junit_symptoms.xml\\n\\nif test -f \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nthen\\n    # shellcheck disable=SC1090\\n    source \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nfi\\n\\n# Create custom-link-tools.html from custom-links.txt\\nREPORT=\\\"${ARTIFACT_DIR}/custom-link-tools.html\\\"\\ncat \\u003e\\u003e ${REPORT} \\u003c\\u003c EOF\\n\\u003chtml\\u003e\\n\\u003chead\\u003e\\n  \\u003ctitle\\u003eDebug tools\\u003c/title\\u003e\\n  \\u003cmeta name=\\\"description\\\" content=\\\"Contains links to OpenShift-specific tools like Loki log collection, PromeCIeus, etc.\\\"\\u003e\\n  \\u003clink rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"/static/style.css\\\"\\u003e\\n  \\u003clink rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"/static/extensions/style.css\\\"\\u003e\\n  \\u003clink href=\\\"https://fonts.googleapis.com/css?family=Roboto:400,700\\\" rel=\\\"stylesheet\\\"\\u003e\\n  \\u003clink rel=\\\"stylesheet\\\" href=\\\"https://code.getmdl.io/1.3.0/material.indigo-pink.min.css\\\"\\u003e\\n  \\u003clink rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"/static/spyglass/spyglass.css\\\"\\u003e\\n  \\u003cstyle\\u003e\\n    a {\\n        display: inline-block;\\n        padding: 5px 20px 5px 20px;\\n        margin: 10px;\\n        border: 2px solid #4E9AF1;\\n        border-radius: 1em;\\n        text-decoration: none;\\n        color: #FFFFFF !important;\\n        text-align: center;\\n        transition: all 0.2s;\\n        background-color: #4E9AF1\\n    }\\n\\n    a:hover {\\n        border-color: #FFFFFF;\\n    }\\n  \\u003c/style\\u003e\\n\\u003c/head\\u003e\\n\\u003cbody\\u003e\\nEOF\\n\\nif [[ -f ${SHARED_DIR}/custom-links.txt ]]; then\\n  cat ${SHARED_DIR}/custom-links.txt \\u003e\\u003e ${REPORT}\\nfi\\n\\ncat \\u003e\\u003e ${REPORT} \\u003c\\u003c EOF\\n\\u003c/body\\u003e\\n\\u003c/html\\u003e\\nEOF\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}"
              },
              {
                "name": "ARTIFACT_DIR",
                "value": "/logs/artifacts"
              },
              {
                "name": "NAMESPACE",
                "value": "ci-op-9gmi3mdh"
              },
              {
                "name": "JOB_NAME_SAFE",
                "value": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_NAME_HASH",
                "value": "59604"
              },
              {
                "name": "UNIQUE_HASH",
                "value": "59604"
              },
              {
                "name": "LEASED_RESOURCE",
                "value": "9c68b29a-693f-4a38-b1e6-f559fa73f31a"
              },
              {
                "name": "ORIGINAL_RELEASE_IMAGE_LATEST",
                "value": "registry.ci.openshift.org/ocp/release:4.19.0-0.nightly-2025-10-15-051359"
              },
              {
                "name": "RELEASE_IMAGE_LATEST",
                "value": "registry.build10.ci.openshift.org/ci-op-9gmi3mdh/release@sha256:88597cc1247e97e4fbe14ead836fc08d776787e825fa3455c031e770442669fc"
              },
              {
                "name": "IMAGE_FORMAT"
              },
              {
                "name": "KUBECONFIG",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig"
              },
              {
                "name": "KUBECONFIGMINIMAL",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig-minimal"
              },
              {
                "name": "KUBEADMIN_PASSWORD_FILE",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeadmin-password"
              },
              {
                "name": "CLUSTER_PROFILE_NAME",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_TYPE",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_PROFILE_DIR",
                "value": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "SHARED_DIR",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage"
              }
            ],
            "resources": {
              "requests": {
                "cpu": "300m",
                "memory": "619569230"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "kube-api-access-5rz2n",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "sidecar",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "env": [
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "SIDECAR_OPTIONS",
                "value": "{\"gcs_options\":{\"items\":[\"/logs/artifacts\"],\"sub_dir\":\"artifacts/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal/gather-extra\",\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"],\"gcs_credentials_file\":\"/secrets/gcs/service-account.json\",\"dry_run\":false},\"entries\":[{\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\nfunction queue() {\\n  local TARGET=\\\"${1}\\\"\\n  shift\\n  local LIVE\\n  LIVE=\\\"$(jobs | wc -l)\\\"\\n  while [[ \\\"${LIVE}\\\" -ge 45 ]]; do\\n    sleep 1\\n    LIVE=\\\"$(jobs | wc -l)\\\"\\n  done\\n  echo \\\"${@}\\\"\\n  if [[ -n \\\"${FILTER:-}\\\" ]]; then\\n    \\\"${@}\\\" | \\\"${FILTER}\\\" \\u003e\\\"${TARGET}\\\" \\u0026\\n  else\\n    \\\"${@}\\\" \\u003e\\\"${TARGET}\\\" \\u0026\\n  fi\\n}\\n\\nif test ! -f \\\"${KUBECONFIG}\\\"\\nthen\\n\\techo \\\"No kubeconfig, so no point in gathering extra artifacts.\\\"\\n\\texit 0\\nfi\\n\\n# For disconnected or otherwise unreachable environments, we want to\\n# have steps use an HTTP(S) proxy to reach the API server. This proxy\\n# configuration file should export HTTP_PROXY, HTTPS_PROXY, and NO_PROXY\\n# environment variables, as well as their lowercase equivalents (note\\n# that libcurl doesn't recognize the uppercase variables).\\nif test -f \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nthen\\n    # shellcheck disable=SC1090\\n    source \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nfi\\n\\necho \\\"Gathering artifacts ...\\\"\\nmkdir -p ${ARTIFACT_DIR}/pods ${ARTIFACT_DIR}/nodes ${ARTIFACT_DIR}/metrics ${ARTIFACT_DIR}/bootstrap ${ARTIFACT_DIR}/network ${ARTIFACT_DIR}/oc_cmds ${ARTIFACT_DIR}/inspect\\n\\noc --insecure-skip-tls-verify --request-timeout=5s get nodes -o jsonpath --template '{range .items[*]}{.metadata.name}{\\\"\\\\n\\\"}{end}' \\u003e /tmp/nodes\\noc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces --template '{{ range .items }}{{ $name := .metadata.name }}{{ $ns := .metadata.namespace }}{{ range .spec.containers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ \\\"\\\\n\\\" }}{{ end }}{{ range .spec.initContainers }}-n {{ $ns }} {{ $name }} -c {{ .name }}{{ \\\"\\\\n\\\" }}{{ end }}{{ end }}' \\u003e /tmp/containers\\noc --insecure-skip-tls-verify --request-timeout=5s get pods -l openshift.io/component=api --all-namespaces --template '{{ range .items }}-n {{ .metadata.namespace }} {{ .metadata.name }}{{ \\\"\\\\n\\\" }}{{ end }}' \\u003e /tmp/pods-api\\n\\noc --insecure-skip-tls-verify --request-timeout=5s adm inspect clusteroperators --dest-dir ${ARTIFACT_DIR}/inspect || true\\n\\nPLATFORM=$(oc get infrastructure cluster -o jsonpath=\\\"{.status.platform}\\\")\\nCAPI_PLATFORM=$(echo \\\"$PLATFORM\\\" | tr '[:upper:]' '[:lower:]')\\n\\nif [[ \\\"${CAPI_PLATFORM}\\\" == \\\"baremetal\\\" ]]; then\\n  CAPI_PLATFORM=metal3\\nfi\\n\\nif [[ \\\"${CAPI_PLATFORM}\\\" == \\\"powervs\\\" ]]; then\\n  CAPI_PLATFORM=ibmpower\\nfi\\n\\nqueue ${ARTIFACT_DIR}/config-resources.json oc --insecure-skip-tls-verify --request-timeout=5s get apiserver.config.openshift.io authentication.config.openshift.io build.config.openshift.io console.config.openshift.io dns.config.openshift.io featuregate.config.openshift.io image.config.openshift.io infrastructure.config.openshift.io ingress.config.openshift.io network.config.openshift.io oauth.config.openshift.io project.config.openshift.io scheduler.config.openshift.io -o json\\nqueue ${ARTIFACT_DIR}/apiservices.json oc --insecure-skip-tls-verify --request-timeout=5s get apiservices -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/apiservices oc --insecure-skip-tls-verify --request-timeout=5s get apiservices\\nqueue ${ARTIFACT_DIR}/clusteroperators.json oc --insecure-skip-tls-verify --request-timeout=5s get clusteroperators -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/clusteroperators oc --insecure-skip-tls-verify --request-timeout=5s get clusteroperators\\nqueue ${ARTIFACT_DIR}/clusterversion.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterversion -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/clusterversion oc --insecure-skip-tls-verify --request-timeout=5s get clusterversion\\nqueue ${ARTIFACT_DIR}/configmaps.json oc --insecure-skip-tls-verify --request-timeout=5s get configmaps --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/configmaps oc --insecure-skip-tls-verify --request-timeout=5s get configmaps --all-namespaces\\nqueue ${ARTIFACT_DIR}/credentialsrequests.json oc --insecure-skip-tls-verify --request-timeout=5s get credentialsrequests --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/credentialsrequests oc --insecure-skip-tls-verify --request-timeout=5s get credentialsrequests --all-namespaces\\nqueue ${ARTIFACT_DIR}/csr.json oc --insecure-skip-tls-verify --request-timeout=5s get csr -o json\\nqueue ${ARTIFACT_DIR}/endpoints.json oc --insecure-skip-tls-verify --request-timeout=5s get endpoints --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/endpoints oc --insecure-skip-tls-verify --request-timeout=5s get endpoints --all-namespaces\\nFILTER=gzip queue ${ARTIFACT_DIR}/deployments.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get deployments --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/deployments oc --insecure-skip-tls-verify --request-timeout=5s get deployments --all-namespaces -o wide\\nFILTER=gzip queue ${ARTIFACT_DIR}/daemonsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get daemonsets --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/daemonsets oc --insecure-skip-tls-verify --request-timeout=5s get daemonsets --all-namespaces -o wide\\nFILTER=gzip queue ${ARTIFACT_DIR}/jobs.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get jobs.batch --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/events.json oc --insecure-skip-tls-verify --request-timeout=5s get events --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/events oc --insecure-skip-tls-verify --request-timeout=5s get events --all-namespaces\\nqueue ${ARTIFACT_DIR}/featuregate.json oc --insecure-skip-tls-verify --request-timeout=5s get featuregate -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/featuregate oc --insecure-skip-tls-verify --request-timeout=5s get featuregate\\nqueue ${ARTIFACT_DIR}/kubeapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get kubeapiserver -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/kubeapiserver oc --insecure-skip-tls-verify --request-timeout=5s get kubeapiserver\\nqueue ${ARTIFACT_DIR}/kubecontrollermanager.json oc --insecure-skip-tls-verify --request-timeout=5s get kubecontrollermanager -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/kubecontrollermanager oc --insecure-skip-tls-verify --request-timeout=5s get kubecontrollermanager\\nqueue ${ARTIFACT_DIR}/machineconfigpools.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigpools -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/machineconfigpools oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigpools\\nqueue ${ARTIFACT_DIR}/machineconfigs.json oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigs -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/machineconfigs oc --insecure-skip-tls-verify --request-timeout=5s get machineconfigs\\nqueue ${ARTIFACT_DIR}/controlplanemachinesets.json oc --insecure-skip-tls-verify --request-timeout=5s get controlplanemachinesets -A -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/controlplanemachinesets oc --insecure-skip-tls-verify --request-timeout=5s get controlplanemachinesets -A\\nqueue ${ARTIFACT_DIR}/machinesets.json oc --insecure-skip-tls-verify --request-timeout=5s get machinesets.machine.openshift.io -A -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/machinesets oc --insecure-skip-tls-verify --request-timeout=5s get machinesets.machine.openshift.io -A\\nqueue ${ARTIFACT_DIR}/machinesets.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get machinesets.cluster.x-k8s.io -A -o json\\n\\nqueue ${ARTIFACT_DIR}/machines.json oc --insecure-skip-tls-verify --request-timeout=5s get machines.machine.openshift.io -A -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/machines oc --insecure-skip-tls-verify --request-timeout=5s get machines.machine.openshift.io -A -o wide\\n\\nqueue ${ARTIFACT_DIR}/machines.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get machines.cluster.x-k8s.io -A -o json\\n\\nqueue ${ARTIFACT_DIR}/${CAPI_PLATFORM}clusters.infrastructure.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get ${CAPI_PLATFORM}clusters.infrastructure.cluster.x-k8s.io -A -o json\\nqueue ${ARTIFACT_DIR}/${CAPI_PLATFORM}machines.infrastructure.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get ${CAPI_PLATFORM}machines.infrastructure.cluster.x-k8s.io -A -o json\\nqueue ${ARTIFACT_DIR}/${CAPI_PLATFORM}machinetemplates.infrastructure.cluster.x-k8s.io.json oc --insecure-skip-tls-verify --request-timeout=5s get ${CAPI_PLATFORM}machinetemplates.infrastructure.cluster.x-k8s.io -A -o json\\n\\nqueue ${ARTIFACT_DIR}/namespaces.json oc --insecure-skip-tls-verify --request-timeout=5s get namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/namespaces oc --insecure-skip-tls-verify --request-timeout=5s get namespaces\\nqueue ${ARTIFACT_DIR}/nodes.json oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/nodes oc --insecure-skip-tls-verify --request-timeout=5s get nodes -o wide\\nqueue ${ARTIFACT_DIR}/openshiftapiserver.json oc --insecure-skip-tls-verify --request-timeout=5s get openshiftapiserver -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/openshiftapiserver oc --insecure-skip-tls-verify --request-timeout=5s get openshiftapiserver\\nqueue ${ARTIFACT_DIR}/pods.json oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/pods oc --insecure-skip-tls-verify --request-timeout=5s get pods --all-namespaces -o wide\\nqueue ${ARTIFACT_DIR}/persistentvolumes.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumes --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/persistentvolumes oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumes --all-namespaces -o wide\\nqueue ${ARTIFACT_DIR}/persistentvolumeclaims.json oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumeclaims --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/persistentvolumeclaims oc --insecure-skip-tls-verify --request-timeout=5s get persistentvolumeclaims --all-namespaces -o wide\\nFILTER=gzip queue ${ARTIFACT_DIR}/replicasets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get replicasets --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/replicasets oc --insecure-skip-tls-verify --request-timeout=5s get replicasets --all-namespaces -o wide\\nqueue ${ARTIFACT_DIR}/rolebindings.json oc --insecure-skip-tls-verify --request-timeout=5s get rolebindings --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/rolebindings oc --insecure-skip-tls-verify --request-timeout=5s get rolebindings --all-namespaces\\nqueue ${ARTIFACT_DIR}/roles.json oc --insecure-skip-tls-verify --request-timeout=5s get roles --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/roles oc --insecure-skip-tls-verify --request-timeout=5s get roles --all-namespaces\\nqueue ${ARTIFACT_DIR}/services.json oc --insecure-skip-tls-verify --request-timeout=5s get services --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/services oc --insecure-skip-tls-verify --request-timeout=5s get services --all-namespaces\\nFILTER=gzip queue ${ARTIFACT_DIR}/statefulsets.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get statefulsets --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/statefulsets oc --insecure-skip-tls-verify --request-timeout=5s get statefulsets --all-namespaces\\nqueue ${ARTIFACT_DIR}/routes.json oc --insecure-skip-tls-verify --request-timeout=5s get routes --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/routes oc --insecure-skip-tls-verify --request-timeout=5s get routes --all-namespaces\\nqueue ${ARTIFACT_DIR}/subscriptions.json oc --insecure-skip-tls-verify --request-timeout=5s get subscriptions --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/subscriptions oc --insecure-skip-tls-verify --request-timeout=5s get subscriptions --all-namespaces\\nqueue ${ARTIFACT_DIR}/clusterserviceversions.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterserviceversions --all-namespaces -o json\\nqueue ${ARTIFACT_DIR}/oc_cmds/clusterserviceversions oc --insecure-skip-tls-verify --request-timeout=5s get clusterserviceversions --all-namespaces\\nqueue ${ARTIFACT_DIR}/releaseinfo.json oc --insecure-skip-tls-verify --request-timeout=5s adm release info -o json\\nqueue ${ARTIFACT_DIR}/clusterrolebindings.json oc --insecure-skip-tls-verify --request-timeout=5s get clusterrolebindings --all-namespaces -o json\\n\\nFILTER=gzip queue ${ARTIFACT_DIR}/openapi.json.gz oc --insecure-skip-tls-verify --request-timeout=5s get --raw /openapi/v2\\n\\n# gather nodes first in parallel since they may contain the most relevant debugging info\\nwhile IFS= read -r i; do\\n  mkdir -p ${ARTIFACT_DIR}/nodes/$i\\n  queue ${ARTIFACT_DIR}/nodes/$i/heap oc --insecure-skip-tls-verify get --request-timeout=20s --raw /api/v1/nodes/$i/proxy/debug/pprof/heap\\n  FILTER=gzip queue ${ARTIFACT_DIR}/nodes/$i/journal.gz oc --insecure-skip-tls-verify adm node-logs $i --unify=false\\n  FILTER=gzip queue ${ARTIFACT_DIR}/nodes/$i/audit.gz oc --insecure-skip-tls-verify adm node-logs $i --unify=false --path=audit/audit.log\\ndone \\u003c /tmp/nodes\\n\\necho \\\"INFO: gathering the audit logs for each master\\\"\\npaths=(openshift-apiserver kube-apiserver oauth-apiserver etcd)\\nfor path in \\\"${paths[@]}\\\" ; do\\n  output_dir=\\\"${ARTIFACT_DIR}/audit_logs/$path\\\"\\n  mkdir -p \\\"$output_dir\\\"\\n\\n  # Skip downloading of .terminating and .lock files.\\n  oc adm node-logs --role=master --path=\\\"$path\\\" | \\\\\\n    grep -v \\\".terminating\\\" | \\\\\\n    grep -v \\\".lock\\\" | \\\\\\n  tee \\\"${output_dir}.audit_logs_listing\\\"\\n\\n  # The ${output_dir}.audit_logs_listing file contains lines with the node and filename\\n  # separated by a space.\\n  while IFS= read -r item; do\\n    node=$(echo $item |cut -d ' ' -f 1)\\n    fname=$(echo $item |cut -d ' ' -f 2)\\n    echo \\\"INFO: Queueing download/gzip of ${path}/${fname} from ${node}\\\";\\n    echo \\\"INFO:   gziping to ${output_dir}/${node}-${fname}.gz\\\";\\n    FILTER=gzip queue ${output_dir}/${node}-${fname}.gz oc --insecure-skip-tls-verify adm node-logs ${node} --path=${path}/${fname}\\n  done \\u003c ${output_dir}.audit_logs_listing\\ndone\\n\\n# change to the network artifact dir\\nmkdir -p ${ARTIFACT_DIR}/network/multus_logs/\\npushd ${ARTIFACT_DIR}/network/multus_logs/ || return\\n\\nVOLUME_PERCENTAGE_FLAG=\\\"\\\"\\nif oc adm must-gather --help 2\\u003e\\u00261 | grep -q -- '--volume-percentage'; then\\n   VOLUME_PERCENTAGE_FLAG=\\\"--volume-percentage=100\\\"\\nfi\\n\\noc get node -oname | xargs oc adm must-gather $VOLUME_PERCENTAGE_FLAG -- /usr/bin/gather_multus_logs\\npopd || return\\n\\n# If the tcpdump-service or conntrackdump-service step was used, grab the files.\\nfor capture_type in tcpdump conntrackdump; do\\n  echo \\\"INFO: gathering ${capture_type} information if present\\\"\\n  output_dir=\\\"${ARTIFACT_DIR}/${capture_type}/\\\"\\n  mkdir -p \\\"$output_dir\\\"\\n\\n  # Skip downloading of .terminating and .lock files.\\n  oc adm node-logs -l kubernetes.io/os=linux --path=\\\"/${capture_type}\\\" | \\\\\\n  grep -v \\\".terminating\\\" | \\\\\\n  grep -v \\\".lock\\\" | \\\\\\n  tee \\\"${output_dir}.${capture_type}_listing\\\"\\n  cat \\\"${output_dir}.${capture_type}_listing\\\"\\n\\n  # The ${output_dir}.${capture_type}_listing file contains lines with the node and filename\\n  # separated by a space.\\n  while IFS= read -r item; do\\n    node=$(echo $item |cut -d ' ' -f 1)\\n    fname=$(echo $item |cut -d ' ' -f 2)\\n    echo \\\"INFO: Queueing download/gzip of /${capture_type}/${fname} from ${node}\\\";\\n    echo \\\"INFO: gziping to ${output_dir}/${node}-${fname}.gz\\\";\\n    FILTER=gzip queue ${output_dir}/${node}-${fname}.gz oc --insecure-skip-tls-verify adm node-logs ${node} --path=/${capture_type}/${fname}\\n  done \\u003c ${output_dir}.${capture_type}_listing\\ndone\\n\\n# Gather etcd strace and pprof output if present:\\necho \\\"INFO: Fetching debug info from etcd pods if present\\\"\\noutput_dir=\\\"${ARTIFACT_DIR}/etcd-debug\\\"\\nmkdir -p \\\"$output_dir\\\"\\nTARGET_FILES=\\\"cpu.prof\\\"\\nfor pqn in $(oc get pods -n openshift-etcd -l app=etcd --no-headers -o=name); do\\n\\techo ${pqn}\\n\\tpod_name=$(echo ${pqn} | cut -d '/' -f 2)\\n\\tfor file_name in $TARGET_FILES; do\\n\\t\\tDEST_FILE=\\\"${output_dir}/${pod_name}_${file_name}\\\"\\n\\t\\toc cp openshift-etcd/${pod_name}:/var/lib/etcd/debug/${file_name} ${DEST_FILE}\\n\\tdone\\ndone\\necho \\\"INFO: done attempting to fetch etcd debug info\\\"\\n\\n\\nfunction gather_network() {\\n  local namespace=$1\\n  local selector=$2\\n  local container=$3\\n  local netfilter=$4\\n\\n  if ! oc --insecure-skip-tls-verify --request-timeout=20s get ns ${namespace}; then\\n    echo \\\"Namespace ${namespace} does not exist, skipping ${namespace} network pods\\\"\\n    return\\n  fi\\n\\n  local podlist=\\\"/tmp/${namespace}-pods\\\"\\n\\n  # Snapshot iptables/nftables rules on each node\\n  oc --insecure-skip-tls-verify --request-timeout=20s get -n \\\"${namespace}\\\" -l \\\"${selector}\\\" pods --template '{{ range .items }}{{ .metadata.name }}{{ \\\"\\\\n\\\" }}{{ end }}' \\u003e ${podlist}\\n  while IFS= read -r i; do\\n    queue ${ARTIFACT_DIR}/network/iptables-save-$i oc --insecure-skip-tls-verify --request-timeout=20s rsh -n ${namespace} -c ${container} $i iptables-save -c\\n    if [[ ${netfilter} == \\\"nftables\\\" ]]; then\\n      queue ${ARTIFACT_DIR}/network/nft-list-ruleset-$i oc --insecure-skip-tls-verify --request-timeout=20s rsh -n ${namespace} -c ${container} $i nft list ruleset\\n    fi\\n  done \\u003c ${podlist}\\n  # Snapshot all used ports on each node.\\n  while IFS= read -r i; do\\n    queue ${ARTIFACT_DIR}/network/ss-$i oc --insecure-skip-tls-verify --request-timeout=20s rsh -n ${namespace} -c ${container} $i ss -apn\\n  done \\u003c ${podlist}\\n}\\n\\n# Gather network details both from SDN and OVN. One of them should succeed.\\ngather_network openshift-sdn app=sdn sdn iptables\\nsample_node=$(oc get no -o jsonpath='{.items[0].metadata.name}')\\nsample_node_zone=$(oc get node \\\"${sample_node}\\\" -o jsonpath='{.metadata.annotations.k8s\\\\.ovn\\\\.org/zone-name}')\\nif [ \\\"${sample_node}\\\" = \\\"${sample_node_zone}\\\" ]; then\\n  echo \\\"INFO: INTERCONNECT MODE\\\"\\n  ovnkube_container=ovnkube-controller\\n  ovnkube_netfilter=nftables\\nelse\\n  echo \\\"INFO: LEGACY MODE\\\"\\n  ovnkube_container=ovnkube-node\\n  ovnkube_netfilter=iptables\\nfi\\ngather_network openshift-ovn-kubernetes app=ovnkube-node ${ovnkube_container} ${ovnkube_netfilter}\\n\\nwhile IFS= read -r i; do\\n  file=\\\"$( echo \\\"$i\\\" | cut -d ' ' -f 3 | tr -s ' ' '_' )\\\"\\n  queue ${ARTIFACT_DIR}/metrics/${file}-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server \\\"https://$( hostname ):8443\\\" --config /etc/origin/master/admin.kubeconfig'\\n  queue ${ARTIFACT_DIR}/metrics/${file}-controllers-heap oc --insecure-skip-tls-verify exec $i -- /bin/bash -c 'oc --insecure-skip-tls-verify get --raw /debug/pprof/heap --server \\\"https://$( hostname ):8444\\\" --config /etc/origin/master/admin.kubeconfig'\\ndone \\u003c /tmp/pods-api\\n\\nwhile IFS= read -r i; do\\n  file=\\\"$( echo \\\"$i\\\" | cut -d ' ' -f 2,3,5 | tr -s ' ' '_' )\\\"\\n  options=\\\"\\\"\\n  if [[ $i == *\\\"dns-default\\\"* ]]; then\\n      options=\\\"--timestamps\\\"\\n  fi\\n  FILTER=gzip queue ${ARTIFACT_DIR}/pods/${file}.log.gz oc --insecure-skip-tls-verify logs ${options} --request-timeout=20s $i\\n  FILTER=gzip queue ${ARTIFACT_DIR}/pods/${file}_previous.log.gz oc --insecure-skip-tls-verify logs ${options} --request-timeout=20s -p $i\\ndone \\u003c /tmp/containers\\n\\nprometheus=\\\"$( oc --insecure-skip-tls-verify --request-timeout=20s get pods -n openshift-monitoring -l app.kubernetes.io/name=prometheus --ignore-not-found -o name )\\\"\\nif [[ -n \\\"${prometheus}\\\" ]]; then\\n\\techo \\\"${prometheus}\\\" | while read prompod; do\\n\\t  prompod=${prompod#\\\"pod/\\\"}\\n\\t\\tFILE_NAME=\\\"${prompod}\\\"\\n\\t\\t# for backwards compatibility with promecious we keep the first files beginning with \\\"prometheus\\\"\\n\\t\\tif [[ \\\"$prompod\\\" == *-0 ]]; then\\n\\t\\t\\tFILE_NAME=\\\"prometheus\\\"\\n\\t\\tfi\\n\\n\\t\\techo \\\"Snapshotting prometheus from ${prompod} as ${FILE_NAME} (may take 15s) ...\\\"\\n\\t\\tqueue \\\"${ARTIFACT_DIR}/metrics/${FILE_NAME}.tar.gz\\\" oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- tar cvzf - -C /prometheus .\\n\\n\\t\\tFILTER=gzip queue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-target-metadata.json.gz oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/targets/metadata --data-urlencode 'match_target={instance!=\\\\\\\"\\\\\\\"}'\\\"\\n\\t\\tFILTER=gzip queue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-config.json.gz oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/status/config\\\"\\n\\t\\tqueue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-tsdb-status.json oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/status/tsdb\\\"\\n\\t\\tqueue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-runtimeinfo.json oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/status/runtimeinfo\\\"\\n\\t\\tqueue ${ARTIFACT_DIR}/metrics/${FILE_NAME}-targets.json oc --insecure-skip-tls-verify exec -n openshift-monitoring \\\"${prompod}\\\" -- /bin/bash -c \\\"curl -G http://localhost:9090/api/v1/targets\\\"\\n\\tdone\\n\\n\\tcat \\u003e\\u003e ${SHARED_DIR}/custom-links.txt \\u003c\\u003c-EOF\\n\\t\\u003cscript\\u003e\\n\\tlet prom = document.createElement('a');\\n\\tprom.href=\\\"https://promecieus.dptools.openshift.org/?search=\\\"+document.referrer;\\n\\tprom.title=\\\"Creates a new prometheus deployment with data from this job run.\\\";\\n\\tprom.innerHTML=\\\"PromeCIeus\\\";\\n\\tprom.target=\\\"_blank\\\";\\n\\tdocument.getElementById(\\\"wrapper\\\").append(prom);\\n\\t\\u003c/script\\u003e\\n\\tEOF\\nelse\\n\\techo \\\"Unable to find a Prometheus pod to snapshot.\\\"\\nfi\\n\\necho \\\"Adding debug tools link to sippy for intervals\\\"\\nif [[ \\\"${JOB_TYPE}\\\" == \\\"presubmit\\\" ]]; then\\n  extra_args=\\\"${JOB_NAME}/${REPO_OWNER}_${REPO_NAME}/${PULL_NUMBER}\\\"\\nelse\\n  extra_args=\\\"${JOB_NAME}\\\"\\nfi\\ncat \\u003e\\u003e ${SHARED_DIR}/custom-links.txt \\u003c\\u003c EOF\\n\\u003ca target=\\\"_blank\\\" href=\\\"https://sippy.dptools.openshift.org/sippy-ng/job_runs/${BUILD_ID}/${extra_args}/intervals\\\" title=\\\"Intervals charts give insight into what was happening on the cluster at various points in time, including when tests failed or when operators were in certain states.\\\"\\u003eIntervals\\u003c/a\\u003e\\nEOF\\n\\n# Calculate metrics suitable for apples-to-apples comparison across CI runs.\\n# Load whatever timestamps we can, generate the metrics script, and then send it to the\\n# thanos-querier pod on the cluster via exec (so we don't need to have a route exposed).\\necho \\\"Saving job metrics\\\"\\ncat \\u003e/tmp/generate.sh \\u003c\\u003c'GENERATE'\\n#!/bin/bash\\n\\nset -o nounset\\nset -o errexit\\nset -o pipefail\\n\\n# CI job metrics extraction\\n#\\n# This script gathers a number of important query metrics from the metrics\\n# stack in a cluster after tests are complete. It gathers metrics related to\\n# three phases - install, test, and overall (install start to test end).\\n#\\n# Prometheus may not have data from early in an install, and some runs may\\n# result in outage to prometheus, so queries have to look at measurements\\n# that may have gaps or be incomplete.\\n#\\n# A metric belongs in this set if it is useful in tracking a trend over time\\n# in the behavior of the cluster at install time or over the test run - for\\n# instance, by looking at the total CPU usage of the control plane, we can\\n# perform apples to apples comparisons between two cloud platforms and look\\n# for places where we are inadequate. The metrics are output to the artifacts\\n# dir and then are processed by the ci-search indexer cloud functions to be\\n# visualized by ci-search.\\n#\\n# The output of the script is a file with one JSON object per line consisting\\n# of:\\n#\\n# {\\\"\\u003cname_of_metric\\u003e\\\":\\u003cprometheus query result object\\u003e}\\n#\\n# The prometheus query result object is described here:\\n# https://prometheus.io/docs/prometheus/latest/querying/api/\\n#\\n# Metrics are expected to return a scalar, a vector with a single entry and\\n# no labels, or a vector with a single label and a single entry.\\n#\\n# This script outputs a script that is intended to be invoked against a local\\n# prometheus instance. In the CI environment we run this script inside the\\n# pod that contains the Thanos querier, but it can be used locally for testing\\n# against a prometheus instance running at localhost:9090.\\n\\n#########\\n\\n# Take as arguments a set of env vars for the phases (install, test, all) that\\n# contain the unix timestamp of the start and end of the two main phases, then\\n# calculate what we can. If a phase is missing, that may mean the test script\\n# could not run to completion, in which case we will not define the variable\\n# and some metrics will not be calculated or output. Omitting a query if it\\n# can't be calculate is important, because the zero value may be meaningful.\\n#\\n# - t_* is the unix timestamp at the end\\n# - s_* is the number of seconds the phase took\\n# - d_* is a prometheus duration of the phase as \\\"\\u003cseconds\\u003es\\\"\\nt_now=$(date +%s)\\nif [[ -n \\\"${TEST_TIME_INSTALL_END-}\\\" ]]; then\\n  t_install=${TEST_TIME_INSTALL_END}\\n  if [[ -n \\\"${TEST_TIME_INSTALL_START-}\\\" ]]; then\\n    s_install=\\\"$(( TEST_TIME_INSTALL_END - TEST_TIME_INSTALL_START ))\\\"\\n    d_install=\\\"${s_install}s\\\"\\n  fi\\nfi\\nif [[ -n \\\"${TEST_TIME_TEST_END-}\\\" ]]; then\\n  t_test=${TEST_TIME_TEST_END}\\n  if [[ -n \\\"${TEST_TIME_TEST_START-}\\\" ]]; then\\n    s_test=\\\"$(( TEST_TIME_TEST_END - TEST_TIME_TEST_START ))\\\"\\n    d_test=\\\"${s_test}s\\\"\\n  fi\\nfi\\n\\nif [[ -n \\\"${TEST_TIME_TEST_START-}\\\" || \\\"${TEST_TIME_INSTALL_START-}\\\" ]]; then\\n  t_start=${TEST_TIME_INSTALL_START:-${TEST_TIME_TEST_START}}\\nfi\\nt_all=${t_test:-${t_install:-${t_now}}}\\nif [[ -n \\\"${t_start-}\\\" ]]; then\\n  s_all=\\\"$(( t_all - t_start ))\\\"\\n  d_all=\\\"${s_all}s\\\"\\nfi\\n\\n# We process this query file one line at a time - if a variable is undefined we'll skip the\\n# entire query.\\ncat \\u003e /tmp/queries \\u003c\\u003c'END'\\n${t_install} cluster:capacity:cpu:total:cores         sum(cluster:capacity_cpu_cores:sum)\\n${t_install} cluster:capacity:cpu:control_plane:cores max(cluster:capacity_cpu_cores:sum{label_node_role_kubernetes_io=\\\"master\\\"})\\n\\n${t_all}     cluster:usage:cpu:total:seconds:quantile      label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[90s:30s]))[${d_all}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_install} cluster:usage:cpu:install:seconds:quantile    label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[90s:30s]))[${d_all}:${d_test}]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_test}    cluster:usage:cpu:test:seconds:quantile       label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[90s:30s]))[${d_test}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n\\n${t_test}    cluster:outage:kubelet:metrics:total:seconds      sum(sum_over_time((1 - up{job=\\\"kubelet\\\",metrics_path=\\\"/metrics\\\"})[8h:1s])) by (metrics_path)\\n\\n${t_all}     cluster:usage:cpu:kubelet:total:seconds:quantile      label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[90s:30s]))[${d_all}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_install} cluster:usage:cpu:kubelet:install:seconds:quantile    label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[90s:30s]))[${d_all}:${d_test}]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_test}    cluster:usage:cpu:kubelet:test:seconds:quantile       label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[90s:30s]))[${d_test}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n\\n${t_all}     cluster:usage:cpu:crio:total:seconds:quantile      label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[90s:30s]))[${d_all}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_install} cluster:usage:cpu:crio:install:seconds:quantile    label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[90s:30s]))[${d_all}:${d_test}]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_test}    cluster:usage:cpu:crio:test:seconds:quantile       label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[90s:30s]))[${d_test}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n\\n${t_all}     cluster:usage:cpu:total:seconds   sum(increase(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:install:seconds sum(increase(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:test:seconds    sum(increase(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:kubelet:total:seconds   sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:kubelet:install:seconds sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:kubelet:test:seconds    sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:crio:total:seconds   sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:crio:install:seconds sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:crio:test:seconds    sum(increase(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:total:rate   sum(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:install:rate sum(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:test:rate    sum(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:kubelet:total:rate   sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:kubelet:install:rate sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:kubelet:test:rate    sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/kubelet.service\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:crio:total:rate   sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_all}]))\\n${t_install} cluster:usage:cpu:crio:install:rate sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_install}]))\\n${t_test}    cluster:usage:cpu:crio:test:rate    sum(rate(container_cpu_usage_seconds_total{id=\\\"/system.slice/crio.service\\\"}[${d_test}]))\\n\\n${t_all}     cluster:usage:cpu:control_plane:total:avg   avg(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_all}]) * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"}))\\n${t_install} cluster:usage:cpu:control_plane:install:avg avg(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_install}]) * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"}))\\n${t_test}    cluster:usage:cpu:control_plane:test:avg    avg(rate(container_cpu_usage_seconds_total{id=\\\"/\\\"}[${d_test}]) * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"}))\\n\\n${t_all}     cluster:usage:cpu:kube_apiserver:total:avg   avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:cpu:kube_apiserver:install:avg avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:cpu:kube_apiserver:test:avg    avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:cpu:apiserver:total:seconds:quantile label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[90s:30s]))[${d_all}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_install} cluster:usage:cpu:apiserver:install:seconds:quantile label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[90s:30s]))[${d_all}:${d_test}]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n${t_test}    cluster:usage:cpu:apiserver:test:seconds:quantile label_replace(quantile_over_time(.95,sum(irate(container_cpu_usage_seconds_total{pod=~\\\"kube-apiserver-ip-.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[90s:30s]))[${d_test}:]),\\\"quantile\\\",\\\"0.95\\\",\\\"\\\",\\\"\\\")\\n\\n${t_all}     cluster:usage:cpu:etcd:total:avg   avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"etcd-ip-.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:cpu:etcd:install:avg avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"etcd-ip-.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:cpu:etcd:test:avg    avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"etcd-ip-.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:cpu:openshift_apiserver:total:avg   avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:cpu:openshift_apiserver:install:avg avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:cpu:openshift_apiserver:test:avg    avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:cpu:oauth_apiserver:total:avg   avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:cpu:oauth_apiserver:install:avg avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:cpu:oauth_apiserver:test:avg    avg(sum(rate(container_cpu_usage_seconds_total{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:mem:rss:control_plane:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_rss{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:control_plane:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_rss{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:control_plane:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_rss{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:rss:kubelet:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_rss{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:kubelet:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_rss{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:kubelet:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_rss{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:rss:crio:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_rss{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:crio:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_rss{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:rss:crio:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_rss{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:working_set:control_plane:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_working_set_bytes{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:control_plane:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_working_set_bytes{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:control_plane:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_working_set_bytes{id=\\\"/\\\"} * on(node) group_left() group by (node) (kube_node_role{role=\\\"master\\\"})))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:working_set:kubelet:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:kubelet:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:kubelet:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:mem:working_set:crio:quantile label_replace(max(quantile_over_time(0.99, ((container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.99\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:crio:quantile label_replace(max(quantile_over_time(0.9, ((container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.9\\\", \\\"\\\", \\\"\\\")\\n${t_all}     cluster:usage:mem:working_set:crio:quantile label_replace(max(quantile_over_time(0.5, ((container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}))[${d_all}:1s] )), \\\"quantile\\\", \\\"0.5\\\", \\\"\\\", \\\"\\\")\\n\\n${t_all}     cluster:usage:memory:kubelet:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}[${t_all}])) by (node))\\n${t_install} cluster:usage:memory:kubelet:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}[${t_install}])) by (node))\\n${t_test}    cluster:usage:memory:kubelet:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/kubelet.service\\\"}[${t_test}])) by (node))\\n\\n${t_all}     cluster:usage:memory:crio:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}[${t_all}])) by (node))\\n${t_install} cluster:usage:memory:crio:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}[${t_install}])) by (node))\\n${t_test}    cluster:usage:memory:crio:total:avg   avg(sum(rate(container_memory_working_set_bytes{id=\\\"/system.slice/crio.service\\\"}[${t_test}])) by (node))\\n\\n${t_all}     cluster:usage:memory:kube_apiserver:total:avg   avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"kube-apiserver-ip.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:memory:kube_apiserver:install:avg avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"kube-apiserver-ip.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:memory:kube_apiserver:test:avg    avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"kube-apiserver-ip.*\\\", namespace=\\\"openshift-kube-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:memory:etcd:total:avg   avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"etcd-ip-.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:memory:etcd:install:avg avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"etcd-ip.*\\\", namespace=\\\"openshift-etcd\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:memory:etcd:test:avg    avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"etcd-ip.*\\\", namespace\\\"openshift-etcd\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:memory:openshift_apiserver:total:avg   avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:memory:openshift_apiserver:install:avg avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:memory:openshift_apiserver:test:avg    avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:usage:memory:oauth_apiserver:total:avg   avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_all}])) by (pod))\\n${t_install} cluster:usage:memory:oauth_apiserver:install:avg avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_install}])) by (pod))\\n${t_test}    cluster:usage:memory:oauth_apiserver:test:avg    avg(sum(rate(container_memory_working_set_bytes{pod=~\\\"apiserver-.*\\\", namespace=\\\"openshift-oauth-apiserver\\\"}[${d_test}])) by (pod))\\n\\n${t_all}     cluster:alerts:total:firing:distinct:severity count by (severity) (count by (alertname,severity) (count_over_time(ALERTS{alertstate=\\\"firing\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}[${d_all}])))\\n\\n${t_test}    cluster:alerts:total:firing:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"firing\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_test}:1s]))\\n${t_install} cluster:alerts:install:firing:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"firing\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_install}:1s]))\\n${t_test}    cluster:alerts:test:firing:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"firing\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_test}:1s]))\\n\\n${t_test}    cluster:alerts:total:pending:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"pending\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_test}:1s]))\\n${t_install} cluster:alerts:install:pending:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"pending\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_install}:1s]))\\n${t_test}    cluster:alerts:test:pending:seconds:severity count_over_time((sum by (severity) (count by (alertname,severity) (ALERTS{alertstate=\\\"pending\\\",alertname!~\\\"AlertmanagerReceiversNotConfigured|Watchdog\\\"}))[${d_test}:1s]))\\n\\n${t_all}     cluster:api:total:requests sum(increase(apiserver_request_total[${d_all}]))\\n${t_install} cluster:api:install:requests sum(increase(apiserver_request_total[${d_install}]))\\n${t_test}    cluster:api:requests:test sum(increase(apiserver_request_total[${d_test}]))\\n\\n${t_all}     cluster:api:read:total:requests sum(increase(apiserver_request_total{verb=~\\\"GET|LIST|WATCH\\\"}[${d_all}]))\\n${t_install} cluster:api:read:install:requests sum(increase(apiserver_request_total{verb=~\\\"GET|LIST|WATCH\\\"}[${d_install}]))\\n${t_test}    cluster:api:read:test:requests sum(increase(apiserver_request_total{verb=~\\\"GET|LIST|WATCH\\\"}[${d_test}]))\\n${t_all}     cluster:api:write:total:requests sum(increase(apiserver_request_total{verb!~\\\"GET|LIST|WATCH\\\"}[${d_all}]))\\n${t_install} cluster:api:write:install:requests sum(increase(apiserver_request_total{verb!~\\\"GET|LIST|WATCH\\\"}[${d_install}]))\\n${t_test}    cluster:api:write:test:requests sum(increase(apiserver_request_total{verb!~\\\"GET|LIST|WATCH\\\"}[${d_test}]))\\n\\n${t_all}     cluster:api:read:requests:latency:total:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_all}])) by (le,scope))\\n${t_install} cluster:api:read:requests:latency:install:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_install}])) by (le,scope))\\n${t_test}    cluster:api:read:requests:latency:test:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_test}])) by (le,scope))\\n${t_all}     cluster:api:write:requests:latency:total:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_all}])) by (le,scope))\\n${t_install} cluster:api:write:requests:latency:install:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_install}])) by (le,scope))\\n${t_test}    cluster:api:write:requests:latency:test:quantile histogram_quantile(0.99, sum(rate(apiserver_request_duration_seconds_bucket{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_test}])) by (le,scope))\\n\\n${t_all}     cluster:api:read:requests:latency:total:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_all}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_all}])) by (le,scope)\\n${t_install} cluster:api:read:requests:latency:install:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_install}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_install}])) by (le,scope)\\n${t_test}    cluster:api:read:requests:latency:test:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_test}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"GET|LIST\\\"}[${d_test}])) by (le,scope)\\n${t_all}     cluster:api:write:requests:latency:total:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_all}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_all}])) by (le,scope)\\n${t_install} cluster:api:write:requests:latency:install:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_install}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_install}])) by (le,scope)\\n${t_test}    cluster:api:write:requests:latency:test:avg sum(rate(apiserver_request_duration_seconds_sum{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_test}])) by (le,scope) / sum(rate(apiserver_request_duration_seconds_count{job=\\\"apiserver\\\",scope!=\\\"\\\",verb=~\\\"POST|PUT|PATCH|DELETE\\\"}[${d_test}])) by (le,scope)\\n\\n${t_all}     cluster:api:errors:total:requests sum(increase(apiserver_request_total{code=~\\\"5\\\\\\\\\\\\\\\\d\\\\\\\\\\\\\\\\d|0\\\"}[${d_all}]))\\n${t_install} cluster:api:errors:install:requests sum(increase(apiserver_request_total{code=~\\\"5\\\\\\\\\\\\\\\\d\\\\\\\\\\\\\\\\d|0\\\"}[${d_install}]))\\n\\n${t_install} cluster:resource:install:count sort_desc(max by(resource) (etcd_object_counts)) \\u003e 1\\n${t_test}    cluster:resource:test:delta sort_desc(max by(resource) (delta(etcd_object_counts[${d_test}]))) != 0\\n\\n${t_all}     cluster:etcd:read:requests:latency:total:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"get|list|listWithCount\\\"}[${d_all}])) by (le,scope))\\n${t_install} cluster:etcd:read:requests:latency:install:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"get|list|listWithCount\\\"}[${d_install}])) by (le,scope))\\n${t_test}    cluster:etcd:read:requests:latency:test:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"get|list|listWithCount\\\"}[${d_test}])) by (le,scope))\\n${t_all}     cluster:etcd:write:requests:latency:total:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"create|update|delete\\\"}[${d_all}])) by (le,scope))\\n${t_install} cluster:etcd:write:requests:latency:install:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"create|update|delete\\\"}[${d_install}])) by (le,scope))\\n${t_test}    cluster:etcd:write:requests:latency:test:quantile histogram_quantile(0.99, sum(rate(etcd_request_duration_seconds_bucket{operation=~\\\"create|update|delete\\\"}[${d_test}])) by (le,scope))\\n\\n${t_all}     cluster:etcd:read:requests:latency:total:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"get|list|listWithCount\\\"}[${d_all}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"get|list|listWithCount\\\"}[${d_all}])) by (le,scope)\\n${t_install} cluster:etcd:read:requests:latency:install:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"get|list|listWithCount\\\"}[${d_install}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"get|list|listWithCount\\\"}[${d_install}])) by (le,scope)\\n${t_test}    cluster:etcd:read:requests:latency:test:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"get|list|listWithCount\\\"}[${d_test}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"get|list|listWithCount\\\"}[${d_test}])) by (le,scope)\\n${t_all}     cluster:etcd:write:requests:latency:total:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"create|update|delete\\\"}[${d_all}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"create|update|delete\\\"}[${d_all}])) by (le,scope)\\n${t_install} cluster:etcd:write:requests:latency:install:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"create|update|delete\\\"}[${d_install}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"create|update|delete\\\"}[${d_install}])) by (le,scope)\\n${t_test}    cluster:etcd:write:requests:latency:test:avg sum(rate(etcd_request_duration_seconds_sum{operation=~\\\"create|update|delete\\\"}[${d_test}])) by (le,scope) / sum(rate(etcd_request_duration_seconds_count{operation=~\\\"create|update|delete\\\"}[${d_test}])) by (le,scope)\\n\\n${t_all}     cluster:node:total:boots sum(increase(node_boots_total[${d_all}]))\\n${t_test}    cluster:node:test:boots sum(increase(node_boots_total[${d_test}]))\\n\\n${t_all}     cluster:pod:openshift:unready:total:fraction   1-max(avg_over_time(cluster:usage:openshift:kube_running_pod_ready:avg[${d_all}]))\\n${t_install} cluster:pod:openshift:unready:install:fraction 1-max(avg_over_time(cluster:usage:openshift:kube_running_pod_ready:avg[${d_install}]))\\n${t_test}    cluster:pod:openshift:unready:test:fraction    1-max(avg_over_time(cluster:usage:openshift:kube_running_pod_ready:avg[${d_test}]))\\n\\n${t_all}     cluster:pod:openshift:started:total:count sum(changes(kube_pod_start_time{namespace=~\\\"openshift-.*\\\"}[${d_all}]) + 1)\\n${t_install} cluster:pod:openshift:started:install:count sum(changes(kube_pod_start_time{namespace=~\\\"openshift-.*\\\"}[${d_install}]) + 1)\\n${t_test}    cluster:pod:openshift:started:test:count sum(changes(kube_pod_start_time{namespace=~\\\"openshift-.*\\\"}[${d_test}]))\\n\\n${t_all}     cluster:container:total:started count(count_over_time((count without(container,endpoint,name,namespace,pod,service,job,metrics_path,instance,image) (container_start_time_seconds{container!=\\\"\\\",container!=\\\"POD\\\",pod!=\\\"\\\"}))[${d_all}:30s]))\\n${t_install} cluster:container:install:started  count(count_over_time((count without(container,endpoint,name,namespace,pod,service,job,metrics_path,instance,image) (container_start_time_seconds{container!=\\\"\\\",container!=\\\"POD\\\",pod!=\\\"\\\"}))[${d_install}:30s]))\\n${t_test}    cluster:container:test:started  count(count_over_time((count without(container,endpoint,name,namespace,pod,service,job,metrics_path,instance,image) (container_start_time_seconds{container!=\\\"\\\",container!=\\\"POD\\\",pod!=\\\"\\\"} \\u003e (${t_test}-${s_test})))[${d_test}:30s]))\\n\\n${t_all}     cluster:version:info:total   topk(1, max by (version) (max_over_time(cluster_version{type=\\\"completed\\\"}[${d_all}])))*0+1\\n${t_install} cluster:version:info:install topk(1, max by (version) (max_over_time(cluster_version{type=\\\"completed\\\"}[${d_install}])))*0+1\\n\\n${t_all}     cluster:version:current:seconds count_over_time(max by (version) ((cluster_version{type=\\\"current\\\"}))[${d_all}:1s])\\n${t_test}    cluster:version:updates:seconds max by (from_version,version) (max_over_time(((time() - cluster_version{type=\\\"updating\\\",version!=\\\"\\\",from_version!=\\\"\\\"}))[${d_test}:1s]))\\n\\n${t_all}     job:duration:total:seconds vector(${s_all})\\n${t_install} job:duration:install:seconds vector(${s_install})\\n${t_test}    job:duration:test:seconds vector(${s_test})\\n\\n${t_all}     cluster:rest:client:requests:latency:total:quantile sum by(type) (histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"},\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\")[${d_all}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\")[${d_all}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\")[${d_all}:30s])) by (le,type)))\\n${t_install} cluster:rest:client:requests:latency:install:quantile sum by(type) (histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"},\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\")[${d_install}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\")[${d_install}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\")[${d_install}:30s])) by (le,type)))\\n${t_test}    cluster:rest:client:requests:latency:test:quantile sum by(type) (histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"},\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\")[${d_test}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\")[${d_test}:30s])) by (le,type)) or histogram_quantile(0.99, sum(rate(label_replace(rest_client_request_duration_seconds_bucket{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"},\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\")[${d_test}:30s])) by (le,type)))\\n\\n${t_all}     cluster:rest:client:requests:latency:total:avg sum by(type) (label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_all}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_all}:30s])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}:30s])) /sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}:30s])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}:30s])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n${t_install} cluster:rest:client:requests:latency:install:avg sum by(type) (label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_install}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_install}:30s])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}:30s])) /sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}:30s])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}:30s])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n${t_test}    cluster:rest:client:requests:latency:test:avg sum by(type) (label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_test}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"api-int.*\\\"}[${d_test}:30s])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}:30s])) /sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}:30s])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_request_duration_seconds_sum{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}:30s])) / sum(rate(rest_client_request_duration_seconds_count{verb=\\\"GET\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}:30s])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n\\n${t_all}     cluster:rest:client:requests:error:total:rate sum by(type) (label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"api-int.*\\\"}[${d_all}])) / sum(rate(rest_client_requests_total{host=~\\\"api-int.*\\\"}[${d_all}])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}])) / sum(rate(rest_client_requests_total{host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}])) / sum(rate(rest_client_requests_total{host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_all}])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n${t_install} cluster:rest:client:requests:error:install:rate sum by(type) (label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"api-int.*\\\"}[${d_install}])) / sum(rate(rest_client_requests_total{host=~\\\"api-int.*\\\"}[${d_install}])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}])) / sum(rate(rest_client_requests_total{host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}])) / sum(rate(rest_client_requests_total{host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_install}])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n${t_test}    cluster:rest:client:requests:error:test:rate sum by(type) (label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"api-int.*\\\"}[${d_test}])) / sum(rate(rest_client_requests_total{host=~\\\"api-int.*\\\"}[${d_test}])),\\\"type\\\",\\\"load_balancer\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}])) / sum(rate(rest_client_requests_total{host!~\\\"(api-int|\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}])),\\\"type\\\",\\\"service\\\",\\\"\\\",\\\"\\\") or label_replace(sum(rate(rest_client_requests_total{code=\\\"\\u003cerror\\u003e\\\",host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}])) / sum(rate(rest_client_requests_total{host=~\\\"(\\\\\\\\[::1\\\\\\\\]|127\\\\\\\\.0\\\\\\\\.0\\\\\\\\.1|localhost).*\\\"}[${d_test}])),\\\"type\\\",\\\"pod\\\",\\\"\\\",\\\"\\\"))\\n\\nEND\\n\\n# topk(1, max by (image, version) (max_over_time(cluster_version{type=\\\"completed\\\"}[30m])))\\n\\n# Perform variable replacement by putting each line of the query file through an eval and then outputting\\n# it back to a file.\\n# glob expansion is disabled because we use '*' in queries for multiplication\\nset -f\\n# clear the file\\necho \\u003e /tmp/queries_resolved\\nwhile IFS= read -r i; do\\n  if [[ -z \\\"${i}\\\" ]]; then continue; fi\\n  # Try to convert the line of the file into a query, performing bash substitution AND catch undefined variables\\n  # The heredoc is necessary because bash will perform quote evaluation on labels in queries (pod=\\\"x\\\" becomes pod=x)\\n  if ! q=$( eval $'cat \\u003c\\u003cEND\\\\n'$i$'\\\\nEND\\\\n' 2\\u003e/dev/null ); then\\n    # evaluate the errors and output them to stderr\\n    (\\n      set +e\\n      set +x\\n      q=$( eval $'cat \\u003c\\u003cEND\\\\n'$i$'\\\\nEND\\\\n' 2\\u003e\\u00261 1\\u003e/dev/null )\\n      echo \\\"error: Query '${i}' was not valid:$(echo \\\"${q}\\\" | cut -f 3- -d ':')\\\" 1\\u003e\\u00262\\n    )\\n    continue\\n  fi\\n  echo \\\"${q}\\\" \\u003e\\u003e /tmp/queries_resolved\\ndone \\u003c /tmp/queries\\nset +f\\n\\n# Output the script to execute. The first part embeds the evaluated queries and will write them to /tmp\\n# on the remote system.\\ncat \\u003c\\u003cSCRIPT\\n#!/bin/bash\\nset -euo pipefail\\n\\ncat \\u003e /tmp/queries \\u003c\\u003c'END'\\n$( cat /tmp/queries_resolved )\\nEND\\nSCRIPT\\n# The second part of the script iterates over the evaluated queries and queries a local prometheus.\\n# Variables are not expanded in this section.\\ncat \\u003c\\u003c'SCRIPT'\\nwhile IFS= read -r q; do\\n  if [[ -z \\\"${q}\\\" ]]; then continue; fi\\n  # part up the line '\\u003cunix_timestamp_query_time\\u003e \\u003cname\\u003e \\u003cquery\\u003e'\\n  timestamp=${q%% *}\\n  q=${q#* }\\n  name=${q%% *}\\n  query=\\\"${q#* }\\\"\\n  # perform the query against the local prometheus instance\\n  if ! out=$( curl -f --silent http://localhost:9090/api/v1/query --data-urlencode \\\"time=${timestamp}\\\" --data-urlencode \\\"query=${query}\\\" ); then\\n    echo \\\"error: Query ${name} failed at ${timestamp}: ${query}\\\" 1\\u003e\\u00262\\n    continue\\n  fi\\n  # wrap the\\n  echo \\\"{\\\\\\\"${name}\\\\\\\":${out}}\\\"\\ndone \\u003c /tmp/queries\\nSCRIPT\\nGENERATE\\nscript=\\\"$(\\n  TEST_TIME_INSTALL_START=\\\"$( cat ${SHARED_DIR}/TEST_TIME_INSTALL_START || true )\\\" \\\\\\n  TEST_TIME_INSTALL_END=\\\"$( cat ${SHARED_DIR}/TEST_TIME_INSTALL_END || true  )\\\" \\\\\\n  TEST_TIME_TEST_START=\\\"$( cat ${SHARED_DIR}/TEST_TIME_TEST_START || true  )\\\" \\\\\\n  TEST_TIME_TEST_END=\\\"$( cat ${SHARED_DIR}/TEST_TIME_TEST_END || true  )\\\" \\\\\\n  bash /tmp/generate.sh\\n)\\\"\\nqueue ${ARTIFACT_DIR}/metrics/job_metrics.json oc --insecure-skip-tls-verify rsh -T -n openshift-monitoring -c thanos-query deploy/thanos-querier /bin/bash -c \\\"${script}\\\"\\n\\nwait\\n\\nmkdir -p ${ARTIFACT_DIR}/junit/\\n\\nif openshift-tests e2e-analysis --help \\u0026\\u003e/dev/null; then\\n    echo \\\"Post e2e-analysis check for the cluster\\\"\\n    openshift-tests e2e-analysis --junit-dir \\\"${ARTIFACT_DIR}/junit\\\" || true\\nfi\\n\\n# C2S/SC2S proxy can not access internet\\nif [[ \\\"${CLUSTER_TYPE:-}\\\" =~ ^aws-s?c2s$ ]]; then\\n  source \\\"${SHARED_DIR}/unset-proxy.sh\\\"\\nfi\\n# This is a temporary conversion of cluster operator status to JSON matching the upgrade - may be moved to code in the future\\ncurl -sL https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64 \\u003e/tmp/jq \\u0026\\u0026 chmod ug+x /tmp/jq\\n\\n\\u003c${ARTIFACT_DIR}/clusteroperators.json /tmp/jq -r 'def one(condition; t): t as $t | first([.[] | select(condition)] | map(.type=t)[]) // null; def msg: \\\"Operator \\\\(.type) (\\\\(.reason)): \\\\(.message)\\\"; def xmlfailure: if .failure then \\\"\\u003cfailure message=\\\\\\\"\\\\(.failure | @html)\\\\\\\"\\u003e\\\\(.failure | @html)\\u003c/failure\\u003e\\\" else \\\"\\\" end; def xmltest: \\\"\\u003ctestcase name=\\\\\\\"\\\\(.name | @html)\\\\\\\"\\u003e\\\\( xmlfailure )\\u003c/testcase\\u003e\\\"; def withconditions: map({name: \\\"operator conditions \\\\(.metadata.name)\\\"} + ((.status.conditions // [{type:\\\"Available\\\",status: \\\"False\\\",message:\\\"operator is not reporting conditions\\\"}]) | (one(.type==\\\"Available\\\" and .status!=\\\"True\\\"; \\\"unavailable\\\") // one(.type==\\\"Degraded\\\" and .status==\\\"True\\\"; \\\"degraded\\\") // one(.type==\\\"Progressing\\\" and .status==\\\"True\\\"; \\\"progressing\\\") // null) | if . then {failure: .|msg} else null end)); .items | withconditions | \\\"\\u003ctestsuite name=\\\\\\\"Operator results\\\\\\\" tests=\\\\\\\"\\\\( length )\\\\\\\" failures=\\\\\\\"\\\\( [.[] | select(.failure)] | length )\\\\\\\"\\u003e\\\\n\\\\( [.[] | xmltest] | join(\\\"\\\\n\\\"))\\\\n\\u003c/testsuite\\u003e\\\"' \\u003e${ARTIFACT_DIR}/junit/junit_install_status.xml\\n\\n# This is an experimental wiring of autogenerated failure detection.\\necho \\\"Detect known failures from symptoms (experimental) ...\\\"\\ncurl -f https://gist.githubusercontent.com/liangxia/1188ce4d25f42138694e32ac8ee9a373/raw/994d3bedeb7cb4cfc679b1e27e1a659a3d845d61/symptom.sh 2\\u003e/dev/null | bash -s ${ARTIFACT_DIR} \\u003e ${ARTIFACT_DIR}/junit/junit_symptoms.xml\\n\\nif test -f \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nthen\\n    # shellcheck disable=SC1090\\n    source \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nfi\\n\\n# Create custom-link-tools.html from custom-links.txt\\nREPORT=\\\"${ARTIFACT_DIR}/custom-link-tools.html\\\"\\ncat \\u003e\\u003e ${REPORT} \\u003c\\u003c EOF\\n\\u003chtml\\u003e\\n\\u003chead\\u003e\\n  \\u003ctitle\\u003eDebug tools\\u003c/title\\u003e\\n  \\u003cmeta name=\\\"description\\\" content=\\\"Contains links to OpenShift-specific tools like Loki log collection, PromeCIeus, etc.\\\"\\u003e\\n  \\u003clink rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"/static/style.css\\\"\\u003e\\n  \\u003clink rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"/static/extensions/style.css\\\"\\u003e\\n  \\u003clink href=\\\"https://fonts.googleapis.com/css?family=Roboto:400,700\\\" rel=\\\"stylesheet\\\"\\u003e\\n  \\u003clink rel=\\\"stylesheet\\\" href=\\\"https://code.getmdl.io/1.3.0/material.indigo-pink.min.css\\\"\\u003e\\n  \\u003clink rel=\\\"stylesheet\\\" type=\\\"text/css\\\" href=\\\"/static/spyglass/spyglass.css\\\"\\u003e\\n  \\u003cstyle\\u003e\\n    a {\\n        display: inline-block;\\n        padding: 5px 20px 5px 20px;\\n        margin: 10px;\\n        border: 2px solid #4E9AF1;\\n        border-radius: 1em;\\n        text-decoration: none;\\n        color: #FFFFFF !important;\\n        text-align: center;\\n        transition: all 0.2s;\\n        background-color: #4E9AF1\\n    }\\n\\n    a:hover {\\n        border-color: #FFFFFF;\\n    }\\n  \\u003c/style\\u003e\\n\\u003c/head\\u003e\\n\\u003cbody\\u003e\\nEOF\\n\\nif [[ -f ${SHARED_DIR}/custom-links.txt ]]; then\\n  cat ${SHARED_DIR}/custom-links.txt \\u003e\\u003e ${REPORT}\\nfi\\n\\ncat \\u003e\\u003e ${REPORT} \\u003c\\u003c EOF\\n\\u003c/body\\u003e\\n\\u003c/html\\u003e\\nEOF\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}],\"ignore_interrupts\":true,\"censoring_options\":{\"secret_directories\":[\"/secrets/builder-dockercfg-4z6z8\",\"/secrets/ci-operator-dockercfg-shmx5\",\"/secrets/ci-pull-credentials\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\",\"/secrets/default-dockercfg-b9qkj\",\"/secrets/deployer-dockercfg-4l8ch\",\"/secrets/gce-sa-credentials-gcs-publisher\",\"/secrets/registry-pull-credentials\",\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\",\"/secrets/test-credentials-cnv-ci-brew-pull-secret\",\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"],\"minimum_secret_length\":6}}"
              }
            ],
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-5rz2n",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "restartPolicy": "Never",
        "terminationGracePeriodSeconds": 75,
        "dnsPolicy": "ClusterFirst",
        "nodeSelector": {
          "ci-workload": "tests"
        },
        "serviceAccountName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "serviceAccount": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "nodeName": "ip-10-28-65-106.us-east-2.compute.internal",
        "securityContext": {
          "seLinuxOptions": {
            "level": "s0:c68,c27"
          },
          "fsGroup": 1004610000,
          "seccompProfile": {
            "type": "RuntimeDefault"
          }
        },
        "imagePullSecrets": [
          {
            "name": "registry-pull-credentials"
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
          }
        ],
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "NotIn",
                      "values": [
                        "ip-10-28-65-78.us-east-2.compute.internal"
                      ]
                    },
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              ]
            },
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 100,
                "preference": {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "schedulerName": "default-scheduler",
        "tolerations": [
          {
            "key": "node.kubernetes.io/not-ready",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/unreachable",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/memory-pressure",
            "operator": "Exists",
            "effect": "NoSchedule"
          },
          {
            "key": "node-role.kubernetes.io/ci-tests-worker",
            "operator": "Exists",
            "effect": "NoSchedule"
          }
        ],
        "priority": 0,
        "runtimeClassName": "ci-scheduler-runtime-tests",
        "enableServiceLinks": true,
        "preemptionPolicy": "PreemptLowerPriority",
        "overhead": {
          "cpu": "300m",
          "memory": "600Mi"
        }
      },
      "status": {
        "phase": "Running",
        "conditions": [
          {
            "type": "PodReadyToStartContainers",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:42:42Z"
          },
          {
            "type": "Initialized",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:42:45Z"
          },
          {
            "type": "Ready",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T05:43:53Z",
            "reason": "ContainersNotReady",
            "message": "containers with unready status: [test]"
          },
          {
            "type": "ContainersReady",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T05:43:53Z",
            "reason": "ContainersNotReady",
            "message": "containers with unready status: [test]"
          },
          {
            "type": "PodScheduled",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:42:40Z"
          }
        ],
        "hostIP": "10.28.65.106",
        "hostIPs": [
          {
            "ip": "10.28.65.106"
          }
        ],
        "podIP": "172.24.150.83",
        "podIPs": [
          {
            "ip": "172.24.150.83"
          }
        ],
        "startTime": "2025-10-16T03:42:40Z",
        "initContainerStatuses": [
          {
            "name": "ci-scheduling-dns-wait",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:42:41Z",
                "finishedAt": "2025-10-16T03:42:42Z",
                "containerID": "cri-o://8a593cf340205838fcd8f9ac6971bb1d1be6a84e5a0756ce6f7b46fe00c992d6"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "registry.access.redhat.com/ubi8:latest",
            "imageID": "registry.access.redhat.com/ubi8@sha256:96ede92bab65df0386c9dabe6ec946aaa13a8717d2d5ad52d5d9a1d2e1f90e0f",
            "containerID": "cri-o://8a593cf340205838fcd8f9ac6971bb1d1be6a84e5a0756ce6f7b46fe00c992d6",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "200Mi"
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-5rz2n",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "place-entrypoint",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:42:43Z",
                "finishedAt": "2025-10-16T03:42:43Z",
                "containerID": "cri-o://a885ff58cfa6039164144ee475aae03f4c0ef0d8a03a62747e357e0ca23b9ce4"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint@sha256:543f25b78ff850958624960f8f9e2cd73a680ea80a97746b957dbab9d210e6e9",
            "containerID": "cri-o://a885ff58cfa6039164144ee475aae03f4c0ef0d8a03a62747e357e0ca23b9ce4",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "25Mi"
            },
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-5rz2n",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:42:44Z",
                "finishedAt": "2025-10-16T03:42:44Z",
                "containerID": "cri-o://b7068e945b6bd1bb9f4e93cefcecd48b3869ff7e0ce68d587313efcf0ba814d5"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "imageID": "quay-proxy.ci.openshift.org/openshift/ci@sha256:151ebf56bbf1251ff0283b9e0852891cba51d6aa4f3ed88a3127a401f3232949",
            "containerID": "cri-o://b7068e945b6bd1bb9f4e93cefcecd48b3869ff7e0ce68d587313efcf0ba814d5",
            "started": false,
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-5rz2n",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "containerStatuses": [
          {
            "name": "sidecar",
            "state": {
              "running": {
                "startedAt": "2025-10-16T03:42:53Z"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar@sha256:41d0901d20b0546472edd74026e1bb03b4d71c739b06a7a06dbecdb967e2a910",
            "containerID": "cri-o://f1be920d294e366c5f47d9bf8456f9a58fbd7eb43789e366903cd65eeaf60fdf",
            "started": true,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "250Mi"
            },
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-5rz2n",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "test",
            "state": {
              "terminated": {
                "exitCode": 127,
                "reason": "Error",
                "message": "r: ./01K7N8FTPSKRNXAKSCTNBDSQAQ: File removed before we read it\n./01K6R2NQKPMS3F4JZ8TH4V98VT/\n./01K6R2NQKPMS3F4JZ8TH4V98VT/chunks/\n./01K6R2NQKPMS3F4JZ8TH4V98VT/chunks/000001\n./01K6R2NQKPMS3F4JZ8TH4V98VT/chunks/000002\n./01K6R2NQKPMS3F4JZ8TH4V98VT/chunks/000003\n./01K6R2NQKPMS3F4JZ8TH4V98VT/chunks/000004\n./01K6R2NQKPMS3F4JZ8TH4V98VT/index\n./01K6R2NQKPMS3F4JZ8TH4V98VT/meta.json\n./01K6R2NQKPMS3F4JZ8TH4V98VT/tombstones\n./01K6ZSVTMR9HZ041WDQ7HMNK81/\n./01K6ZSVTMR9HZ041WDQ7HMNK81/chunks/\n./01K6ZSVTMR9HZ041WDQ7HMNK81/chunks/000001\n./01K6ZSVTMR9HZ041WDQ7HMNK81/chunks/000002\n{\"component\":\"entrypoint\",\"file\":\"sigs.k8s.io/prow/pkg/entrypoint/run.go:169\",\"func\":\"sigs.k8s.io/prow/pkg/entrypoint.Options.ExecuteProcess\",\"level\":\"error\",\"msg\":\"Process did not finish before 2h0m0s timeout\",\"severity\":\"error\",\"time\":\"2025-10-16T05:42:53Z\"}\n{\"component\":\"entrypoint\",\"error\":\"os: process already finished\",\"file\":\"sigs.k8s.io/prow/pkg/entrypoint/run.go:255\",\"func\":\"sigs.k8s.io/prow/pkg/entrypoint.gracefullyTerminate\",\"level\":\"error\",\"msg\":\"Could not interrupt process after timeout\",\"severity\":\"error\",\"time\":\"2025-10-16T05:42:53Z\"}\n./01K6ZSVTMR9HZ041WDQ7HMNK81/chunks/000003\n{\"component\":\"entrypoint\",\"file\":\"sigs.k8s.io/prow/pkg/entrypoint/run.go:267\",\"func\":\"sigs.k8s.io/prow/pkg/entrypoint.gracefullyTerminate\",\"level\":\"error\",\"msg\":\"Process did not exit before 1m0s grace period\",\"severity\":\"error\",\"time\":\"2025-10-16T05:43:53Z\"}\n{\"component\":\"entrypoint\",\"error\":\"os: process already finished\",\"file\":\"sigs.k8s.io/prow/pkg/entrypoint/run.go:269\",\"func\":\"sigs.k8s.io/prow/pkg/entrypoint.gracefullyTerminate\",\"level\":\"error\",\"msg\":\"Could not kill process after grace period\",\"severity\":\"error\",\"time\":\"2025-10-16T05:43:53Z\"}\n{\"component\":\"entrypoint\",\"error\":\"process timed out\",\"file\":\"sigs.k8s.io/prow/pkg/entrypoint/run.go:84\",\"func\":\"sigs.k8s.io/prow/pkg/entrypoint.Options.internalRun\",\"level\":\"error\",\"msg\":\"Error executing test process\",\"severity\":\"error\",\"time\":\"2025-10-16T05:43:53Z\"}\nerror: failed to execute wrapped command: exit status 127\n",
                "startedAt": "2025-10-16T03:42:53Z",
                "finishedAt": "2025-10-16T05:43:53Z",
                "containerID": "cri-o://e355bacc3267d976883b8e5112afbffde5e199f91495b09661958fd9bc274868"
              }
            },
            "lastState": {},
            "ready": false,
            "restartCount": 0,
            "image": "quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:cb036d946c201af0690e24cde73d291aa4b30e5b8c17a4537548e6d15645bed5",
            "imageID": "quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:cb036d946c201af0690e24cde73d291aa4b30e5b8c17a4537548e6d15645bed5",
            "containerID": "cri-o://e355bacc3267d976883b8e5112afbffde5e199f91495b09661958fd9bc274868",
            "started": false,
            "allocatedResources": {
              "cpu": "300m",
              "memory": "619569230"
            },
            "resources": {
              "requests": {
                "cpu": "300m",
                "memory": "619569230"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "kube-api-access-5rz2n",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "qosClass": "Burstable"
      }
    },
    {
      "metadata": {
        "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-gather-must-gather",
        "namespace": "ci-op-9gmi3mdh",
        "uid": "a3314e85-ce8a-4eef-8907-6513ef59742d",
        "resourceVersion": "624721435",
        "generation": 2,
        "creationTimestamp": "2025-10-16T03:26:39Z",
        "labels": {
          "OPENSHIFT_CI": "true",
          "ci-workload": "tests",
          "ci-workload-namespace": "ci-op-9gmi3mdh",
          "ci.openshift.io/jobid": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5",
          "ci.openshift.io/jobname": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cxxx",
          "ci.openshift.io/jobtype": "presubmit",
          "ci.openshift.io/metadata.branch": "master",
          "ci.openshift.io/metadata.org": "RedHatQE",
          "ci.openshift.io/metadata.repo": "interop-testing",
          "ci.openshift.io/metadata.step": "gather-must-gather",
          "ci.openshift.io/metadata.target": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "ci.openshift.io/metadata.variant": "cnv-odf-ocp4.19-lp-gs_baremetal",
          "ci.openshift.io/multi-stage-test": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "created-by-ci": "true",
          "multiarch.openshift.io/amd64": "",
          "multiarch.openshift.io/node-affinity": "set",
          "multiarch.openshift.io/preferred-node-affinity": "set",
          "multiarch.openshift.io/scheduling-gate": "removed",
          "multiarch.openshift.io/single-arch": ""
        },
        "annotations": {
          "ci-operator.openshift.io/container-sub-tests": "test",
          "ci-operator.openshift.io/save-container-logs": "true",
          "ci.openshift.io/job-spec": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}",
          "k8s.ovn.org/pod-networks": "{\"default\":{\"ip_addresses\":[\"172.24.150.20/23\"],\"mac_address\":\"0a:58:ac:18:96:14\",\"gateway_ips\":[\"172.24.150.1\"],\"routes\":[{\"dest\":\"172.24.0.0/16\",\"nextHop\":\"172.24.150.1\"},{\"dest\":\"172.30.0.0/16\",\"nextHop\":\"172.24.150.1\"},{\"dest\":\"169.254.0.5/32\",\"nextHop\":\"172.24.150.1\"},{\"dest\":\"100.64.0.0/16\",\"nextHop\":\"172.24.150.1\"}],\"ip_address\":\"172.24.150.20/23\",\"gateway_ip\":\"172.24.150.1\",\"role\":\"primary\"}}",
          "k8s.v1.cni.cncf.io/network-status": "[{\n    \"name\": \"ovn-kubernetes\",\n    \"interface\": \"eth0\",\n    \"ips\": [\n        \"172.24.150.20\"\n    ],\n    \"mac\": \"0a:58:ac:18:96:14\",\n    \"default\": true,\n    \"dns\": {}\n}]",
          "openshift.io/scc": "restricted-v2",
          "seccomp.security.alpha.kubernetes.io/pod": "runtime/default",
          "security.openshift.io/validated-scc-subject-type": "user"
        },
        "ownerReferences": [
          {
            "apiVersion": "image.openshift.io/v1",
            "kind": "ImageStream",
            "name": "pipeline",
            "uid": "9700f4ec-d56c-4638-afaf-6ab72b2e7e93"
          }
        ],
        "managedFields": [
          {
            "manager": "ci-operator",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:26:39Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:ci-operator.openshift.io/container-sub-tests": {},
                  "f:ci-operator.openshift.io/save-container-logs": {},
                  "f:ci.openshift.io/job-spec": {}
                },
                "f:labels": {
                  ".": {},
                  "f:OPENSHIFT_CI": {},
                  "f:ci.openshift.io/jobid": {},
                  "f:ci.openshift.io/jobname": {},
                  "f:ci.openshift.io/jobtype": {},
                  "f:ci.openshift.io/metadata.branch": {},
                  "f:ci.openshift.io/metadata.org": {},
                  "f:ci.openshift.io/metadata.repo": {},
                  "f:ci.openshift.io/metadata.step": {},
                  "f:ci.openshift.io/metadata.target": {},
                  "f:ci.openshift.io/metadata.variant": {},
                  "f:ci.openshift.io/multi-stage-test": {},
                  "f:created-by-ci": {}
                },
                "f:ownerReferences": {
                  ".": {},
                  "k:{\"uid\":\"9700f4ec-d56c-4638-afaf-6ab72b2e7e93\"}": {}
                }
              },
              "f:spec": {
                "f:containers": {
                  "k:{\"name\":\"sidecar\"}": {
                    ".": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SIDECAR_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/builder-dockercfg-4z6z8\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-operator-dockercfg-shmx5\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/default-dockercfg-b9qkj\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/deployer-dockercfg-4l8ch\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gce-sa-credentials-gcs-publisher\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gcs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/registry-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cnv-ci-brew-pull-secret\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"test\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"ARTIFACT_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"BUILD_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ENTRYPOINT_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"EXTRA_MG_ARGS\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_COUNT\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_KEY_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_VALUE_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"IMAGE_FORMAT\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"JOB_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_SAFE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBEADMIN_PASSWORD_FILE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIG\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIGMINIMAL\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"LEASED_RESOURCE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"MUST_GATHER_TIMEOUT\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"NAMESPACE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"OPENSHIFT_CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ORIGINAL_RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PROW_JOB_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_REF\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_HEAD_REF\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"PULL_NUMBER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_PULL_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_REFS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_TITLE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_OWNER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SHARED_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"UNIQUE_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/alabama\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/multi-stage\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:dnsPolicy": {},
                "f:enableServiceLinks": {},
                "f:initContainers": {
                  ".": {},
                  "k:{\"name\":\"cp-entrypoint-wrapper\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {},
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"place-entrypoint\"}": {
                    ".": {},
                    "f:args": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:restartPolicy": {},
                "f:schedulerName": {},
                "f:securityContext": {},
                "f:serviceAccount": {},
                "f:serviceAccountName": {},
                "f:terminationGracePeriodSeconds": {},
                "f:volumes": {
                  ".": {},
                  "k:{\"name\":\"censor-0\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-1\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-10\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-11\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-2\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-3\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-4\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-5\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-6\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-7\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-8\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-9\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cluster-profile\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"entrypoint-wrapper\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"gcs-credentials\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"home\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"logs\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"tools\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  }
                }
              }
            }
          },
          {
            "manager": "ip-10-28-65-106",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:26:40Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.ovn.org/pod-networks": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "manager",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:26:40Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:labels": {
                  "f:multiarch.openshift.io/amd64": {},
                  "f:multiarch.openshift.io/node-affinity": {},
                  "f:multiarch.openshift.io/preferred-node-affinity": {},
                  "f:multiarch.openshift.io/scheduling-gate": {},
                  "f:multiarch.openshift.io/single-arch": {}
                }
              },
              "f:spec": {
                "f:affinity": {
                  "f:nodeAffinity": {
                    "f:preferredDuringSchedulingIgnoredDuringExecution": {},
                    "f:requiredDuringSchedulingIgnoredDuringExecution": {}
                  }
                }
              }
            }
          },
          {
            "manager": "multus-daemon",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:26:40Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.v1.cni.cncf.io/network-status": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "kubelet",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:42:40Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:conditions": {
                  "k:{\"type\":\"ContainersReady\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Initialized\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"PodReadyToStartContainers\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Ready\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                },
                "f:containerStatuses": {},
                "f:hostIP": {},
                "f:hostIPs": {},
                "f:initContainerStatuses": {},
                "f:phase": {},
                "f:podIP": {},
                "f:podIPs": {
                  ".": {},
                  "k:{\"ip\":\"172.24.150.20\"}": {
                    ".": {},
                    "f:ip": {}
                  }
                },
                "f:startTime": {}
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "volumes": [
          {
            "name": "logs",
            "emptyDir": {}
          },
          {
            "name": "tools",
            "emptyDir": {}
          },
          {
            "name": "gcs-credentials",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "home",
            "emptyDir": {}
          },
          {
            "name": "censor-0",
            "secret": {
              "secretName": "builder-dockercfg-4z6z8",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-1",
            "secret": {
              "secretName": "ci-operator-dockercfg-shmx5",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-2",
            "secret": {
              "secretName": "ci-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-3",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-4",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-5",
            "secret": {
              "secretName": "default-dockercfg-b9qkj",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-6",
            "secret": {
              "secretName": "deployer-dockercfg-4l8ch",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-7",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-8",
            "secret": {
              "secretName": "registry-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-9",
            "secret": {
              "secretName": "test-credentials-cluster-secrets-aws-interop-qe",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-10",
            "secret": {
              "secretName": "test-credentials-cnv-ci-brew-pull-secret",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-11",
            "secret": {
              "secretName": "test-credentials-openshift-virtualization-tests-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "entrypoint-wrapper",
            "emptyDir": {}
          },
          {
            "name": "cluster-profile",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
              "defaultMode": 420
            }
          },
          {
            "name": "kube-api-access-77pdx",
            "projected": {
              "sources": [
                {
                  "serviceAccountToken": {
                    "expirationSeconds": 3607,
                    "path": "token"
                  }
                },
                {
                  "configMap": {
                    "name": "kube-XXXX-ca.crt",
                    "items": [
                      {
                        "key": "ca.crt",
                        "path": "ca.crt"
                      }
                    ]
                  }
                },
                {
                  "downwardAPI": {
                    "items": [
                      {
                        "path": "namespace",
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.namespace"
                        }
                      }
                    ]
                  }
                },
                {
                  "configMap": {
                    "name": "openshift-service-ca.crt",
                    "items": [
                      {
                        "key": "service-ca.crt",
                        "path": "service-ca.crt"
                      }
                    ]
                  }
                }
              ],
              "defaultMode": 420
            }
          }
        ],
        "initContainers": [
          {
            "name": "ci-scheduling-dns-wait",
            "image": "registry.access.redhat.com/ubi8",
            "command": [
              "/bin/sh",
              "-c",
              "declare -i T; until [[ \"$ret\" == \"0\" ]] || [[ \"$T\" -gt \"120\" ]]; do curl http://static.redhat.com/test/rhel-networkmanager.txt \u003e /dev/null; ret=$?; sleep 1; let \"T+=1\"; done"
            ],
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-77pdx",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "Always",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "place-entrypoint",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "args": [
              "--copy-mode-only"
            ],
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-77pdx",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "command": [
              "cp"
            ],
            "args": [
              "/bin/entrypoint-wrapper",
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-77pdx",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "containers": [
          {
            "name": "test",
            "image": "quay-proxy.ci.openshift.org/openshift/ci@sha256:64d611a0baa708e16bbd95413fed8bf57a06ca57ca9a732e2b7b7661326824ce",
            "command": [
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "args": [
              "/tools/entrypoint"
            ],
            "env": [
              {
                "name": "BUILD_ID",
                "value": "1978661561102766080"
              },
              {
                "name": "CI",
                "value": "true"
              },
              {
                "name": "JOB_NAME",
                "value": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"2h0m0s\",\"grace_period\":\"15s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "JOB_TYPE",
                "value": "presubmit"
              },
              {
                "name": "OPENSHIFT_CI",
                "value": "true"
              },
              {
                "name": "PROW_JOB_ID",
                "value": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5"
              },
              {
                "name": "PULL_BASE_REF",
                "value": "master"
              },
              {
                "name": "PULL_BASE_SHA",
                "value": "3847d2254f63a2740d3b9c81edab848d00aeec49"
              },
              {
                "name": "PULL_HEAD_REF"
              },
              {
                "name": "PULL_NUMBER",
                "value": "70234"
              },
              {
                "name": "PULL_PULL_SHA",
                "value": "f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_REFS",
                "value": "master:3847d2254f63a2740d3b9c81edab848d00aeec49,70234:f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_TITLE",
                "value": "[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster."
              },
              {
                "name": "REPO_NAME",
                "value": "release"
              },
              {
                "name": "REPO_OWNER",
                "value": "openshift"
              },
              {
                "name": "GIT_CONFIG_COUNT",
                "value": "1"
              },
              {
                "name": "GIT_CONFIG_KEY_0",
                "value": "safe.directory"
              },
              {
                "name": "GIT_CONFIG_VALUE_0",
                "value": "*"
              },
              {
                "name": "ENTRYPOINT_OPTIONS",
                "value": "{\"timeout\":7200000000000,\"grace_period\":15000000000,\"artifact_dir\":\"/logs/artifacts\",\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\n\\nset -o nounset\\nset -o errexit\\nset -o pipefail\\n\\nfunction createInstallJunit() {\\n  EXIT_CODE_CONFIG=3\\n  EXIT_CODE_INFRA=4\\n  EXIT_CODE_BOOTSTRAP=5\\n  EXIT_CODE_CLUSTER=6\\n  EXIT_CODE_OPERATORS=7\\n  EXIT_CODE_PRECONFIG=100\\n  EXIT_CODE_POSTCHECK=101\\n  if test -f \\\"${SHARED_DIR}/install-status.txt\\\"\\n  then\\n    EXIT_CODE=`tail -n1 \\\"${SHARED_DIR}/install-status.txt\\\" | awk '{print $1}'`\\n    cp \\\"${SHARED_DIR}/install-status.txt\\\" \\\"${ARTIFACT_DIR}/\\\"\\n    if [ \\\"$EXIT_CODE\\\" ==  0  ]\\n    then\\n      set +o errexit\\n      grep -q \\\"^$EXIT_CODE_INFRA$\\\" \\\"${SHARED_DIR}/install-status.txt\\\"\\n      PREVIOUS_INFRA_FAILURE=$((1-$?))\\n      set -o errexit\\n\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"$((PREVIOUS_INFRA_FAILURE+7))\\\" failures=\\\"$PREVIOUS_INFRA_FAILURE\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster creation\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster operator stability\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"/\\u003e\\nEOF\\n\\n      # If we ultimately succeeded, but encountered at least 1 infra\\n      # failure, insert that failure case so CI tracks it as a flake.\\n      if [ \\\"$PREVIOUS_INFRA_FAILURE\\\" = 1 ]\\n      then\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with infrastructure setup\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\nEOF\\n      fi\\n\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_CONFIG\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"3\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with config validation error\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_INFRA\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"4\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with infrastructure setup\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_BOOTSTRAP\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"5\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with cluster bootstrap\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_CLUSTER\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"6\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster creation\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with cluster creation\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_OPERATORS\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"7\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster creation\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster operator stability\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with cluster operator stability failure\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    else\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"2\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with other errors\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    fi\\n  fi\\n\\n  # generate junit file for pre configuration steps failed\\n  if test -f \\\"${SHARED_DIR}/install-pre-config-status.txt\\\" \\u0026\\u0026 [ \\\"$(\\u003c\\\"${SHARED_DIR}/install-pre-config-status.txt\\\")\\\" == \\\"${EXIT_CODE_PRECONFIG}\\\" ]\\n  then\\n    cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"2\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: pre configuration\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003epre configuration failed\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n  fi\\n\\n  # overide junit file to insert post check\\n  # once found installation post check failure\\n  if test -f \\\"${SHARED_DIR}/install-post-check-status.txt\\\"\\n  then\\n    if grep -q \\\"^$EXIT_CODE_POSTCHECK$\\\" \\\"${SHARED_DIR}/install-post-check-status.txt\\\"; then\\n      INSTALL_POSTCHECK_FAILURE=2\\n    else\\n      INSTALL_POSTCHECK_FAILURE=0\\n    fi\\n\\n    if test -f \\\"${SHARED_DIR}/install-pre-config-status.txt\\\"; then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"9\\\" failures=\\\"$INSTALL_POSTCHECK_FAILURE\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: pre configuration\\\"/\\u003e\\nEOF\\n    else\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"8\\\" failures=\\\"$INSTALL_POSTCHECK_FAILURE\\\"\\u003e\\nEOF\\n    fi\\n\\n    cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster creation\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster operator stability\\\"/\\u003e\\nEOF\\n    if [ \\\"$INSTALL_POSTCHECK_FAILURE\\\" = 0 ]\\n    then\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n        \\u003ctestcase name=\\\"install should succeed: post check\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"/\\u003e\\nEOF\\n    else\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n        \\u003ctestcase name=\\\"install should succeed: post check\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install succedded, but failed at post check steps\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\nEOF\\n    fi\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003c/testsuite\\u003e\\nEOF\\n  fi\\n}\\n\\n# camgi is a tool that creates an html document for investigating an OpenShift cluster\\n# see https://github.com/elmiko/camgi.rs for more information\\nfunction installCamgi() {\\n    CAMGI_VERSION=\\\"0.10.0\\\"\\n    pushd /tmp\\n\\n    # no internet access in C2S/SC2S env, disable proxy\\n    if [[ \\\"${CLUSTER_TYPE:-}\\\" =~ ^aws-s?c2s$ ]]; then\\n      if [ ! -f \\\"${SHARED_DIR}/unset-proxy.sh\\\" ]; then\\n        echo \\\"ERROR, unset-proxy.sh does not exist.\\\"\\n        return 1\\n      fi\\n      source \\\"${SHARED_DIR}/unset-proxy.sh\\\"\\n    fi\\n\\n    curl -L -o camgi.tar https://github.com/elmiko/camgi.rs/releases/download/v\\\"$CAMGI_VERSION\\\"/camgi-\\\"$CAMGI_VERSION\\\"-linux-x86_64.tar\\n    tar xvf camgi.tar\\n    sha256sum -c camgi.sha256\\n    echo \\\"camgi version $CAMGI_VERSION downloaded\\\"\\n\\n    if [[ \\\"${CLUSTER_TYPE:-}\\\" =~ ^aws-s?c2s$ ]]; then\\n      if [ ! -f \\\"${SHARED_DIR}/proxy-conf.sh\\\" ]; then\\n        echo \\\"ERROR, proxy-conf.sh does not exist.\\\"\\n        return 1\\n      fi\\n      source \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\n    fi\\n\\n    popd\\n}\\n\\ncreateInstallJunit\\n\\nif test ! -f \\\"${KUBECONFIG}\\\"\\nthen\\n\\techo \\\"No kubeconfig, so no point in calling must-gather.\\\"\\n\\texit 0\\nfi\\n\\n# For disconnected or otherwise unreachable environments, we want to\\n# have steps use an HTTP(S) proxy to reach the API server. This proxy\\n# configuration file should export HTTP_PROXY, HTTPS_PROXY, and NO_PROXY\\n# environment variables, as well as their lowercase equivalents (note\\n# that libcurl doesn't recognize the uppercase variables).\\nif test -f \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nthen\\n\\t# shellcheck disable=SC1090\\n\\tsource \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nfi\\n\\n# Allow a job to override the must-gather image, this is needed for\\n# disconnected environments prior to 4.8.\\nif test -f \\\"${SHARED_DIR}/must-gather-image.sh\\\"\\nthen\\n\\t# shellcheck disable=SC1090\\n\\tsource \\\"${SHARED_DIR}/must-gather-image.sh\\\"\\nelse\\n\\tMUST_GATHER_IMAGE=${MUST_GATHER_IMAGE:-\\\"\\\"}\\nfi\\n\\nMUST_GATHER_TIMEOUT=${MUST_GATHER_TIMEOUT:-\\\"15m\\\"}\\n\\nset -x # log the MG commands\\necho \\\"Running must-gather...\\\"\\nmkdir -p ${ARTIFACT_DIR}/must-gather\\nif [ -n \\\"$MUST_GATHER_IMAGE\\\" ]; then\\n    EXTRA_MG_ARGS=\\\"${EXTRA_MG_ARGS} ${MUST_GATHER_IMAGE}\\\"\\nfi\\nVOLUME_PERCENTAGE_FLAG=\\\"\\\"\\nif oc adm must-gather --help 2\\u003e\\u00261 | grep -q -- '--volume-percentage'; then\\n   VOLUME_PERCENTAGE_FLAG=\\\"--volume-percentage=100\\\"\\nfi\\noc --insecure-skip-tls-verify adm must-gather $VOLUME_PERCENTAGE_FLAG --timeout=\\\"$MUST_GATHER_TIMEOUT\\\" --dest-dir \\\"${ARTIFACT_DIR}/must-gather\\\" ${EXTRA_MG_ARGS} \\u003e \\\"${ARTIFACT_DIR}/must-gather/must-gather.log\\\"\\nfind \\\"${ARTIFACT_DIR}/must-gather\\\" -type f -path '*/cluster-scoped-resources/machineconfiguration.openshift.io/*' -exec sh -c 'echo \\\"REDACTED\\\" \\u003e \\\"$1\\\" \\u0026\\u0026 mv \\\"$1\\\" \\\"$1.redacted\\\"' _ {} \\\\;\\n[ -f \\\"${ARTIFACT_DIR}/must-gather/event-filter.html\\\" ] \\u0026\\u0026 cp \\\"${ARTIFACT_DIR}/must-gather/event-filter.html\\\" \\\"${ARTIFACT_DIR}/event-filter.html\\\"\\ninstallCamgi\\n/tmp/camgi \\\"${ARTIFACT_DIR}/must-gather\\\" \\u003e \\\"${ARTIFACT_DIR}/must-gather/camgi.html\\\"\\n[ -f \\\"${ARTIFACT_DIR}/must-gather/camgi.html\\\" ] \\u0026\\u0026 cp \\\"${ARTIFACT_DIR}/must-gather/camgi.html\\\" \\\"${ARTIFACT_DIR}/camgi.html\\\"\\ntar -czC \\\"${ARTIFACT_DIR}/must-gather\\\" -f \\\"${ARTIFACT_DIR}/must-gather.tar.gz\\\" .\\nrm -rf \\\"${ARTIFACT_DIR}\\\"/must-gather\\nset +x # stop logging commands\\n\\ncat \\u003e\\u003e ${SHARED_DIR}/custom-links.txt \\u003c\\u003c EOF\\n\\u003cscript\\u003e\\nlet kaas = document.createElement('a');\\nkaas.href=\\\"https://kaas.dptools.openshift.org/?search=\\\"+document.referrer;\\n  kaas.title=\\\"KaaS is a service to spawn a fake API service that parses must-gather data. As a result, users can pass Prow CI URL to the service, fetch generated kubeconfig and use kubectl/oc/k9s/openshift-console to investigate the state of the cluster at the time must-gather was collected. Note, on Chromium-based browsers you'll need to fill-in the Prow URL manually. Security settings prevent getting the referrer automatically.\\\"\\nkaas.innerHTML=\\\"KaaS\\\";\\nkaas.target=\\\"_blank\\\";\\ndocument.getElementById(\\\"wrapper\\\").append(kaas);\\n\\u003c/script\\u003e\\nEOF\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}"
              },
              {
                "name": "ARTIFACT_DIR",
                "value": "/logs/artifacts"
              },
              {
                "name": "NAMESPACE",
                "value": "ci-op-9gmi3mdh"
              },
              {
                "name": "JOB_NAME_SAFE",
                "value": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_NAME_HASH",
                "value": "59604"
              },
              {
                "name": "UNIQUE_HASH",
                "value": "59604"
              },
              {
                "name": "LEASED_RESOURCE",
                "value": "9c68b29a-693f-4a38-b1e6-f559fa73f31a"
              },
              {
                "name": "ORIGINAL_RELEASE_IMAGE_LATEST",
                "value": "registry.ci.openshift.org/ocp/release:4.19.0-0.nightly-2025-10-15-051359"
              },
              {
                "name": "RELEASE_IMAGE_LATEST",
                "value": "registry.build10.ci.openshift.org/ci-op-9gmi3mdh/release@sha256:88597cc1247e97e4fbe14ead836fc08d776787e825fa3455c031e770442669fc"
              },
              {
                "name": "IMAGE_FORMAT"
              },
              {
                "name": "MUST_GATHER_TIMEOUT",
                "value": "35m"
              },
              {
                "name": "EXTRA_MG_ARGS"
              },
              {
                "name": "KUBECONFIG",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig"
              },
              {
                "name": "KUBECONFIGMINIMAL",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig-minimal"
              },
              {
                "name": "KUBEADMIN_PASSWORD_FILE",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeadmin-password"
              },
              {
                "name": "CLUSTER_PROFILE_NAME",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_TYPE",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_PROFILE_DIR",
                "value": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "SHARED_DIR",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage"
              }
            ],
            "resources": {
              "requests": {
                "cpu": "300m",
                "memory": "300Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "kube-api-access-77pdx",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "sidecar",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "env": [
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "SIDECAR_OPTIONS",
                "value": "{\"gcs_options\":{\"items\":[\"/logs/artifacts\"],\"sub_dir\":\"artifacts/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal/gather-must-gather\",\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"],\"gcs_credentials_file\":\"/secrets/gcs/service-account.json\",\"dry_run\":false},\"entries\":[{\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\n\\nset -o nounset\\nset -o errexit\\nset -o pipefail\\n\\nfunction createInstallJunit() {\\n  EXIT_CODE_CONFIG=3\\n  EXIT_CODE_INFRA=4\\n  EXIT_CODE_BOOTSTRAP=5\\n  EXIT_CODE_CLUSTER=6\\n  EXIT_CODE_OPERATORS=7\\n  EXIT_CODE_PRECONFIG=100\\n  EXIT_CODE_POSTCHECK=101\\n  if test -f \\\"${SHARED_DIR}/install-status.txt\\\"\\n  then\\n    EXIT_CODE=`tail -n1 \\\"${SHARED_DIR}/install-status.txt\\\" | awk '{print $1}'`\\n    cp \\\"${SHARED_DIR}/install-status.txt\\\" \\\"${ARTIFACT_DIR}/\\\"\\n    if [ \\\"$EXIT_CODE\\\" ==  0  ]\\n    then\\n      set +o errexit\\n      grep -q \\\"^$EXIT_CODE_INFRA$\\\" \\\"${SHARED_DIR}/install-status.txt\\\"\\n      PREVIOUS_INFRA_FAILURE=$((1-$?))\\n      set -o errexit\\n\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"$((PREVIOUS_INFRA_FAILURE+7))\\\" failures=\\\"$PREVIOUS_INFRA_FAILURE\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster creation\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster operator stability\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"/\\u003e\\nEOF\\n\\n      # If we ultimately succeeded, but encountered at least 1 infra\\n      # failure, insert that failure case so CI tracks it as a flake.\\n      if [ \\\"$PREVIOUS_INFRA_FAILURE\\\" = 1 ]\\n      then\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with infrastructure setup\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\nEOF\\n      fi\\n\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_CONFIG\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"3\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with config validation error\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_INFRA\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"4\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with infrastructure setup\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_BOOTSTRAP\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"5\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with cluster bootstrap\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_CLUSTER\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"6\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster creation\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with cluster creation\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    elif [ \\\"$EXIT_CODE\\\" == \\\"$EXIT_CODE_OPERATORS\\\" ]\\n    then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"7\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster creation\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster operator stability\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with cluster operator stability failure\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    else\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"2\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed with other errors\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n    fi\\n  fi\\n\\n  # generate junit file for pre configuration steps failed\\n  if test -f \\\"${SHARED_DIR}/install-pre-config-status.txt\\\" \\u0026\\u0026 [ \\\"$(\\u003c\\\"${SHARED_DIR}/install-pre-config-status.txt\\\")\\\" == \\\"${EXIT_CODE_PRECONFIG}\\\" ]\\n  then\\n    cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"2\\\" failures=\\\"2\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: pre configuration\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003epre configuration failed\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n      \\u003c/testsuite\\u003e\\nEOF\\n  fi\\n\\n  # overide junit file to insert post check\\n  # once found installation post check failure\\n  if test -f \\\"${SHARED_DIR}/install-post-check-status.txt\\\"\\n  then\\n    if grep -q \\\"^$EXIT_CODE_POSTCHECK$\\\" \\\"${SHARED_DIR}/install-post-check-status.txt\\\"; then\\n      INSTALL_POSTCHECK_FAILURE=2\\n    else\\n      INSTALL_POSTCHECK_FAILURE=0\\n    fi\\n\\n    if test -f \\\"${SHARED_DIR}/install-pre-config-status.txt\\\"; then\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"9\\\" failures=\\\"$INSTALL_POSTCHECK_FAILURE\\\"\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: pre configuration\\\"/\\u003e\\nEOF\\n    else\\n      cat \\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003ctestsuite name=\\\"cluster install\\\" tests=\\\"8\\\" failures=\\\"$INSTALL_POSTCHECK_FAILURE\\\"\\u003e\\nEOF\\n    fi\\n\\n    cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n        \\u003ctestcase name=\\\"install should succeed: other\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: configuration\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: infrastructure\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster bootstrap\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster creation\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: cluster operator stability\\\"/\\u003e\\nEOF\\n    if [ \\\"$INSTALL_POSTCHECK_FAILURE\\\" = 0 ]\\n    then\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n        \\u003ctestcase name=\\\"install should succeed: post check\\\"/\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"/\\u003e\\nEOF\\n    else\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n        \\u003ctestcase name=\\\"install should succeed: post check\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install succedded, but failed at post check steps\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\n        \\u003ctestcase name=\\\"install should succeed: overall\\\"\\u003e\\n          \\u003cfailure message=\\\"\\\"\\u003eopenshift cluster install failed overall\\u003c/failure\\u003e\\n        \\u003c/testcase\\u003e\\nEOF\\n    fi\\n      cat \\u003e\\u003e\\\"${ARTIFACT_DIR}/junit_install.xml\\\" \\u003c\\u003cEOF\\n      \\u003c/testsuite\\u003e\\nEOF\\n  fi\\n}\\n\\n# camgi is a tool that creates an html document for investigating an OpenShift cluster\\n# see https://github.com/elmiko/camgi.rs for more information\\nfunction installCamgi() {\\n    CAMGI_VERSION=\\\"0.10.0\\\"\\n    pushd /tmp\\n\\n    # no internet access in C2S/SC2S env, disable proxy\\n    if [[ \\\"${CLUSTER_TYPE:-}\\\" =~ ^aws-s?c2s$ ]]; then\\n      if [ ! -f \\\"${SHARED_DIR}/unset-proxy.sh\\\" ]; then\\n        echo \\\"ERROR, unset-proxy.sh does not exist.\\\"\\n        return 1\\n      fi\\n      source \\\"${SHARED_DIR}/unset-proxy.sh\\\"\\n    fi\\n\\n    curl -L -o camgi.tar https://github.com/elmiko/camgi.rs/releases/download/v\\\"$CAMGI_VERSION\\\"/camgi-\\\"$CAMGI_VERSION\\\"-linux-x86_64.tar\\n    tar xvf camgi.tar\\n    sha256sum -c camgi.sha256\\n    echo \\\"camgi version $CAMGI_VERSION downloaded\\\"\\n\\n    if [[ \\\"${CLUSTER_TYPE:-}\\\" =~ ^aws-s?c2s$ ]]; then\\n      if [ ! -f \\\"${SHARED_DIR}/proxy-conf.sh\\\" ]; then\\n        echo \\\"ERROR, proxy-conf.sh does not exist.\\\"\\n        return 1\\n      fi\\n      source \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\n    fi\\n\\n    popd\\n}\\n\\ncreateInstallJunit\\n\\nif test ! -f \\\"${KUBECONFIG}\\\"\\nthen\\n\\techo \\\"No kubeconfig, so no point in calling must-gather.\\\"\\n\\texit 0\\nfi\\n\\n# For disconnected or otherwise unreachable environments, we want to\\n# have steps use an HTTP(S) proxy to reach the API server. This proxy\\n# configuration file should export HTTP_PROXY, HTTPS_PROXY, and NO_PROXY\\n# environment variables, as well as their lowercase equivalents (note\\n# that libcurl doesn't recognize the uppercase variables).\\nif test -f \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nthen\\n\\t# shellcheck disable=SC1090\\n\\tsource \\\"${SHARED_DIR}/proxy-conf.sh\\\"\\nfi\\n\\n# Allow a job to override the must-gather image, this is needed for\\n# disconnected environments prior to 4.8.\\nif test -f \\\"${SHARED_DIR}/must-gather-image.sh\\\"\\nthen\\n\\t# shellcheck disable=SC1090\\n\\tsource \\\"${SHARED_DIR}/must-gather-image.sh\\\"\\nelse\\n\\tMUST_GATHER_IMAGE=${MUST_GATHER_IMAGE:-\\\"\\\"}\\nfi\\n\\nMUST_GATHER_TIMEOUT=${MUST_GATHER_TIMEOUT:-\\\"15m\\\"}\\n\\nset -x # log the MG commands\\necho \\\"Running must-gather...\\\"\\nmkdir -p ${ARTIFACT_DIR}/must-gather\\nif [ -n \\\"$MUST_GATHER_IMAGE\\\" ]; then\\n    EXTRA_MG_ARGS=\\\"${EXTRA_MG_ARGS} ${MUST_GATHER_IMAGE}\\\"\\nfi\\nVOLUME_PERCENTAGE_FLAG=\\\"\\\"\\nif oc adm must-gather --help 2\\u003e\\u00261 | grep -q -- '--volume-percentage'; then\\n   VOLUME_PERCENTAGE_FLAG=\\\"--volume-percentage=100\\\"\\nfi\\noc --insecure-skip-tls-verify adm must-gather $VOLUME_PERCENTAGE_FLAG --timeout=\\\"$MUST_GATHER_TIMEOUT\\\" --dest-dir \\\"${ARTIFACT_DIR}/must-gather\\\" ${EXTRA_MG_ARGS} \\u003e \\\"${ARTIFACT_DIR}/must-gather/must-gather.log\\\"\\nfind \\\"${ARTIFACT_DIR}/must-gather\\\" -type f -path '*/cluster-scoped-resources/machineconfiguration.openshift.io/*' -exec sh -c 'echo \\\"REDACTED\\\" \\u003e \\\"$1\\\" \\u0026\\u0026 mv \\\"$1\\\" \\\"$1.redacted\\\"' _ {} \\\\;\\n[ -f \\\"${ARTIFACT_DIR}/must-gather/event-filter.html\\\" ] \\u0026\\u0026 cp \\\"${ARTIFACT_DIR}/must-gather/event-filter.html\\\" \\\"${ARTIFACT_DIR}/event-filter.html\\\"\\ninstallCamgi\\n/tmp/camgi \\\"${ARTIFACT_DIR}/must-gather\\\" \\u003e \\\"${ARTIFACT_DIR}/must-gather/camgi.html\\\"\\n[ -f \\\"${ARTIFACT_DIR}/must-gather/camgi.html\\\" ] \\u0026\\u0026 cp \\\"${ARTIFACT_DIR}/must-gather/camgi.html\\\" \\\"${ARTIFACT_DIR}/camgi.html\\\"\\ntar -czC \\\"${ARTIFACT_DIR}/must-gather\\\" -f \\\"${ARTIFACT_DIR}/must-gather.tar.gz\\\" .\\nrm -rf \\\"${ARTIFACT_DIR}\\\"/must-gather\\nset +x # stop logging commands\\n\\ncat \\u003e\\u003e ${SHARED_DIR}/custom-links.txt \\u003c\\u003c EOF\\n\\u003cscript\\u003e\\nlet kaas = document.createElement('a');\\nkaas.href=\\\"https://kaas.dptools.openshift.org/?search=\\\"+document.referrer;\\n  kaas.title=\\\"KaaS is a service to spawn a fake API service that parses must-gather data. As a result, users can pass Prow CI URL to the service, fetch generated kubeconfig and use kubectl/oc/k9s/openshift-console to investigate the state of the cluster at the time must-gather was collected. Note, on Chromium-based browsers you'll need to fill-in the Prow URL manually. Security settings prevent getting the referrer automatically.\\\"\\nkaas.innerHTML=\\\"KaaS\\\";\\nkaas.target=\\\"_blank\\\";\\ndocument.getElementById(\\\"wrapper\\\").append(kaas);\\n\\u003c/script\\u003e\\nEOF\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}],\"ignore_interrupts\":true,\"censoring_options\":{\"secret_directories\":[\"/secrets/builder-dockercfg-4z6z8\",\"/secrets/ci-operator-dockercfg-shmx5\",\"/secrets/ci-pull-credentials\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\",\"/secrets/default-dockercfg-b9qkj\",\"/secrets/deployer-dockercfg-4l8ch\",\"/secrets/gce-sa-credentials-gcs-publisher\",\"/secrets/registry-pull-credentials\",\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\",\"/secrets/test-credentials-cnv-ci-brew-pull-secret\",\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"],\"minimum_secret_length\":6}}"
              }
            ],
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "1",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-77pdx",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "restartPolicy": "Never",
        "terminationGracePeriodSeconds": 18,
        "dnsPolicy": "ClusterFirst",
        "nodeSelector": {
          "ci-workload": "tests"
        },
        "serviceAccountName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "serviceAccount": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "nodeName": "ip-10-28-65-106.us-east-2.compute.internal",
        "securityContext": {
          "seLinuxOptions": {
            "level": "s0:c68,c27"
          },
          "fsGroup": 1004610000,
          "seccompProfile": {
            "type": "RuntimeDefault"
          }
        },
        "imagePullSecrets": [
          {
            "name": "registry-pull-credentials"
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
          }
        ],
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "NotIn",
                      "values": [
                        "ip-10-28-65-78.us-east-2.compute.internal"
                      ]
                    },
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              ]
            },
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 100,
                "preference": {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "schedulerName": "default-scheduler",
        "tolerations": [
          {
            "key": "node.kubernetes.io/not-ready",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/unreachable",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/memory-pressure",
            "operator": "Exists",
            "effect": "NoSchedule"
          },
          {
            "key": "node-role.kubernetes.io/ci-tests-worker",
            "operator": "Exists",
            "effect": "NoSchedule"
          }
        ],
        "priority": 0,
        "runtimeClassName": "ci-scheduler-runtime-tests",
        "enableServiceLinks": true,
        "preemptionPolicy": "PreemptLowerPriority",
        "overhead": {
          "cpu": "300m",
          "memory": "600Mi"
        }
      },
      "status": {
        "phase": "Succeeded",
        "conditions": [
          {
            "type": "PodReadyToStartContainers",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:42:40Z"
          },
          {
            "type": "Initialized",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:26:47Z",
            "reason": "PodCompleted"
          },
          {
            "type": "Ready",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:37:23Z",
            "reason": "PodCompleted"
          },
          {
            "type": "ContainersReady",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:37:23Z",
            "reason": "PodCompleted"
          },
          {
            "type": "PodScheduled",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:26:40Z"
          }
        ],
        "hostIP": "10.28.65.106",
        "hostIPs": [
          {
            "ip": "10.28.65.106"
          }
        ],
        "podIP": "172.24.150.20",
        "podIPs": [
          {
            "ip": "172.24.150.20"
          }
        ],
        "startTime": "2025-10-16T03:26:40Z",
        "initContainerStatuses": [
          {
            "name": "ci-scheduling-dns-wait",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:26:43Z",
                "finishedAt": "2025-10-16T03:26:44Z",
                "containerID": "cri-o://2b9d77fbd68267c6ecead24f194a2fafe47d57e7efad2ac9efe5127b0f09fef4"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "registry.access.redhat.com/ubi8:latest",
            "imageID": "registry.access.redhat.com/ubi8@sha256:96ede92bab65df0386c9dabe6ec946aaa13a8717d2d5ad52d5d9a1d2e1f90e0f",
            "containerID": "cri-o://2b9d77fbd68267c6ecead24f194a2fafe47d57e7efad2ac9efe5127b0f09fef4",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "200Mi"
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-77pdx",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "place-entrypoint",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:26:45Z",
                "finishedAt": "2025-10-16T03:26:45Z",
                "containerID": "cri-o://d7496c3785a0370ca0afdb6279af50b8cf561523f98548dc7355931dfe496961"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint@sha256:543f25b78ff850958624960f8f9e2cd73a680ea80a97746b957dbab9d210e6e9",
            "containerID": "cri-o://d7496c3785a0370ca0afdb6279af50b8cf561523f98548dc7355931dfe496961",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "25Mi"
            },
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-77pdx",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:26:46Z",
                "finishedAt": "2025-10-16T03:26:46Z",
                "containerID": "cri-o://bc8c961a8dd826a57de3831f38097e8a5d640e1c9e50e1aaf32cda4b56ea7bba"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "imageID": "quay-proxy.ci.openshift.org/openshift/ci@sha256:151ebf56bbf1251ff0283b9e0852891cba51d6aa4f3ed88a3127a401f3232949",
            "containerID": "cri-o://bc8c961a8dd826a57de3831f38097e8a5d640e1c9e50e1aaf32cda4b56ea7bba",
            "started": false,
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-77pdx",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "containerStatuses": [
          {
            "name": "sidecar",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:26:58Z",
                "finishedAt": "2025-10-16T03:42:38Z",
                "containerID": "cri-o://2e2c6ec2aa01753aaea49a4e88979fbee1a30f861ed18e44adb9e4e2e5c64e49"
              }
            },
            "lastState": {},
            "ready": false,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar@sha256:41d0901d20b0546472edd74026e1bb03b4d71c739b06a7a06dbecdb967e2a910",
            "containerID": "cri-o://2e2c6ec2aa01753aaea49a4e88979fbee1a30f861ed18e44adb9e4e2e5c64e49",
            "started": false,
            "allocatedResources": {
              "cpu": "1",
              "memory": "250Mi"
            },
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "1",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-77pdx",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "test",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:26:58Z",
                "finishedAt": "2025-10-16T03:37:22Z",
                "containerID": "cri-o://b6fe28ec92978c9358511e9e42cfac38a7ff91eefccfb7af3fae8e4c7d64d4f2"
              }
            },
            "lastState": {},
            "ready": false,
            "restartCount": 0,
            "image": "quay-proxy.ci.openshift.org/openshift/ci@sha256:64d611a0baa708e16bbd95413fed8bf57a06ca57ca9a732e2b7b7661326824ce",
            "imageID": "quay-proxy.ci.openshift.org/openshift/ci@sha256:64d611a0baa708e16bbd95413fed8bf57a06ca57ca9a732e2b7b7661326824ce",
            "containerID": "cri-o://b6fe28ec92978c9358511e9e42cfac38a7ff91eefccfb7af3fae8e4c7d64d4f2",
            "started": false,
            "allocatedResources": {
              "cpu": "300m",
              "memory": "300Mi"
            },
            "resources": {
              "requests": {
                "cpu": "300m",
                "memory": "300Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "kube-api-access-77pdx",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "qosClass": "Burstable"
      }
    },
    {
      "metadata": {
        "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-interop-tests-cnv-tests-gs-baremetal-localnet",
        "namespace": "ci-op-9gmi3mdh",
        "uid": "64171b32-7bc7-43b9-bcce-aa9f98148e7f",
        "resourceVersion": "624673239",
        "generation": 2,
        "creationTimestamp": "2025-10-16T03:20:15Z",
        "labels": {
          "OPENSHIFT_CI": "true",
          "ci-workload": "tests",
          "ci-workload-namespace": "ci-op-9gmi3mdh",
          "ci.openshift.io/jobid": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5",
          "ci.openshift.io/jobname": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cxxx",
          "ci.openshift.io/jobtype": "presubmit",
          "ci.openshift.io/metadata.branch": "master",
          "ci.openshift.io/metadata.org": "RedHatQE",
          "ci.openshift.io/metadata.repo": "interop-testing",
          "ci.openshift.io/metadata.step": "interop-tests-cnv-tests-gs-baremetal-localnet",
          "ci.openshift.io/metadata.target": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "ci.openshift.io/metadata.variant": "cnv-odf-ocp4.19-lp-gs_baremetal",
          "ci.openshift.io/multi-stage-test": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "created-by-ci": "true",
          "multiarch.openshift.io/amd64": "",
          "multiarch.openshift.io/node-affinity": "set",
          "multiarch.openshift.io/preferred-node-affinity": "set",
          "multiarch.openshift.io/scheduling-gate": "removed",
          "multiarch.openshift.io/single-arch": ""
        },
        "annotations": {
          "ci-operator.openshift.io/container-sub-tests": "test",
          "ci-operator.openshift.io/save-container-logs": "true",
          "ci.openshift.io/job-spec": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}",
          "k8s.ovn.org/pod-networks": "{\"default\":{\"ip_addresses\":[\"172.24.99.125/23\"],\"mac_address\":\"0a:58:ac:18:63:7d\",\"gateway_ips\":[\"172.24.98.1\"],\"routes\":[{\"dest\":\"172.24.0.0/16\",\"nextHop\":\"172.24.98.1\"},{\"dest\":\"172.30.0.0/16\",\"nextHop\":\"172.24.98.1\"},{\"dest\":\"169.254.0.5/32\",\"nextHop\":\"172.24.98.1\"},{\"dest\":\"100.64.0.0/16\",\"nextHop\":\"172.24.98.1\"}],\"ip_address\":\"172.24.99.125/23\",\"gateway_ip\":\"172.24.98.1\",\"role\":\"primary\"}}",
          "k8s.v1.cni.cncf.io/network-status": "[{\n    \"name\": \"ovn-kubernetes\",\n    \"interface\": \"eth0\",\n    \"ips\": [\n        \"172.24.99.125\"\n    ],\n    \"mac\": \"0a:58:ac:18:63:7d\",\n    \"default\": true,\n    \"dns\": {}\n}]",
          "openshift.io/scc": "restricted-v2",
          "seccomp.security.alpha.kubernetes.io/pod": "runtime/default",
          "security.openshift.io/validated-scc-subject-type": "user"
        },
        "ownerReferences": [
          {
            "apiVersion": "image.openshift.io/v1",
            "kind": "ImageStream",
            "name": "pipeline",
            "uid": "9700f4ec-d56c-4638-afaf-6ab72b2e7e93"
          }
        ],
        "managedFields": [
          {
            "manager": "ci-operator",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:20:15Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:ci-operator.openshift.io/container-sub-tests": {},
                  "f:ci-operator.openshift.io/save-container-logs": {},
                  "f:ci.openshift.io/job-spec": {}
                },
                "f:labels": {
                  ".": {},
                  "f:OPENSHIFT_CI": {},
                  "f:ci.openshift.io/jobid": {},
                  "f:ci.openshift.io/jobname": {},
                  "f:ci.openshift.io/jobtype": {},
                  "f:ci.openshift.io/metadata.branch": {},
                  "f:ci.openshift.io/metadata.org": {},
                  "f:ci.openshift.io/metadata.repo": {},
                  "f:ci.openshift.io/metadata.step": {},
                  "f:ci.openshift.io/metadata.target": {},
                  "f:ci.openshift.io/metadata.variant": {},
                  "f:ci.openshift.io/multi-stage-test": {},
                  "f:created-by-ci": {}
                },
                "f:ownerReferences": {
                  ".": {},
                  "k:{\"uid\":\"9700f4ec-d56c-4638-afaf-6ab72b2e7e93\"}": {}
                }
              },
              "f:spec": {
                "f:containers": {
                  "k:{\"name\":\"sidecar\"}": {
                    ".": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SIDECAR_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/builder-dockercfg-4z6z8\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-operator-dockercfg-shmx5\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/default-dockercfg-b9qkj\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/deployer-dockercfg-4l8ch\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gce-sa-credentials-gcs-publisher\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gcs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/registry-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cnv-ci-brew-pull-secret\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"test\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"ARTIFACTS_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ARTIFACT_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"BREW_IMAGE_REGISTRY_TOKEN_PATH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"BREW_IMAGE_REGISTRY_USERNAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"BUILD_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"BW_PATH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLI_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ENTRYPOINT_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_COUNT\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_KEY_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_VALUE_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"IMAGE_FORMAT\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"JOB_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_SAFE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBEADMIN_PASSWORD_FILE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIG\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIGMINIMAL\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBEVIRT_RELEASE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"LEASED_RESOURCE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"NAMESPACE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"OCP_VERSION\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"OPENSHIFT_CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ORIGINAL_RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PROW_JOB_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_REF\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_HEAD_REF\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"PULL_NUMBER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_PULL_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_REFS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_TITLE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_OWNER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SHARED_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"TARGET_NAMESPACE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"UNIQUE_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/alabama\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/bw\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/cli\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/cnv-ci-brew-pull-secret\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/multi-stage\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:dnsPolicy": {},
                "f:enableServiceLinks": {},
                "f:initContainers": {
                  ".": {},
                  "k:{\"name\":\"cp-entrypoint-wrapper\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {},
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"inject-cli\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {},
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/cli\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"place-entrypoint\"}": {
                    ".": {},
                    "f:args": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:restartPolicy": {},
                "f:schedulerName": {},
                "f:securityContext": {},
                "f:serviceAccount": {},
                "f:serviceAccountName": {},
                "f:terminationGracePeriodSeconds": {},
                "f:volumes": {
                  ".": {},
                  "k:{\"name\":\"censor-0\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-1\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-10\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-11\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-2\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-3\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-4\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-5\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-6\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-7\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-8\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-9\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cli\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"cluster-profile\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"entrypoint-wrapper\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"gcs-credentials\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"home\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"logs\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"test-credentials-cluster-secrets-aws-interop-qe\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"test-credentials-cnv-ci-brew-pull-secret\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"test-credentials-openshift-virtualization-tests-credentials\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"tools\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  }
                }
              }
            }
          },
          {
            "manager": "kube-scheduler",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:20:16Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:conditions": {
                  "k:{\"type\":\"PodScheduled\"}": {
                    "f:message": {},
                    "f:reason": {}
                  }
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "manager",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:20:16Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:labels": {
                  "f:multiarch.openshift.io/amd64": {},
                  "f:multiarch.openshift.io/node-affinity": {},
                  "f:multiarch.openshift.io/preferred-node-affinity": {},
                  "f:multiarch.openshift.io/scheduling-gate": {},
                  "f:multiarch.openshift.io/single-arch": {}
                }
              },
              "f:spec": {
                "f:affinity": {
                  "f:nodeAffinity": {
                    "f:preferredDuringSchedulingIgnoredDuringExecution": {},
                    "f:requiredDuringSchedulingIgnoredDuringExecution": {}
                  }
                }
              }
            }
          },
          {
            "manager": "ip-10-28-65-116",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:21:33Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.ovn.org/pod-networks": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "multus-daemon",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:21:34Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.v1.cni.cncf.io/network-status": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "kubelet",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:28:17Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:conditions": {
                  "k:{\"type\":\"ContainersReady\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Initialized\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"PodReadyToStartContainers\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Ready\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                },
                "f:containerStatuses": {},
                "f:hostIP": {},
                "f:hostIPs": {},
                "f:initContainerStatuses": {},
                "f:phase": {},
                "f:podIP": {},
                "f:podIPs": {
                  ".": {},
                  "k:{\"ip\":\"172.24.99.125\"}": {
                    ".": {},
                    "f:ip": {}
                  }
                },
                "f:startTime": {}
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "volumes": [
          {
            "name": "logs",
            "emptyDir": {}
          },
          {
            "name": "tools",
            "emptyDir": {}
          },
          {
            "name": "gcs-credentials",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "home",
            "emptyDir": {}
          },
          {
            "name": "censor-0",
            "secret": {
              "secretName": "builder-dockercfg-4z6z8",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-1",
            "secret": {
              "secretName": "ci-operator-dockercfg-shmx5",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-2",
            "secret": {
              "secretName": "ci-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-3",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-4",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-5",
            "secret": {
              "secretName": "default-dockercfg-b9qkj",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-6",
            "secret": {
              "secretName": "deployer-dockercfg-4l8ch",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-7",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-8",
            "secret": {
              "secretName": "registry-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-9",
            "secret": {
              "secretName": "test-credentials-cluster-secrets-aws-interop-qe",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-10",
            "secret": {
              "secretName": "test-credentials-cnv-ci-brew-pull-secret",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-11",
            "secret": {
              "secretName": "test-credentials-openshift-virtualization-tests-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "entrypoint-wrapper",
            "emptyDir": {}
          },
          {
            "name": "cluster-profile",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "cli",
            "emptyDir": {}
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
              "defaultMode": 420
            }
          },
          {
            "name": "test-credentials-cluster-secrets-aws-interop-qe",
            "secret": {
              "secretName": "test-credentials-cluster-secrets-aws-interop-qe",
              "defaultMode": 420
            }
          },
          {
            "name": "test-credentials-cnv-ci-brew-pull-secret",
            "secret": {
              "secretName": "test-credentials-cnv-ci-brew-pull-secret",
              "defaultMode": 420
            }
          },
          {
            "name": "test-credentials-openshift-virtualization-tests-credentials",
            "secret": {
              "secretName": "test-credentials-openshift-virtualization-tests-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "kube-api-access-g9892",
            "projected": {
              "sources": [
                {
                  "serviceAccountToken": {
                    "expirationSeconds": 3607,
                    "path": "token"
                  }
                },
                {
                  "configMap": {
                    "name": "kube-XXXX-ca.crt",
                    "items": [
                      {
                        "key": "ca.crt",
                        "path": "ca.crt"
                      }
                    ]
                  }
                },
                {
                  "downwardAPI": {
                    "items": [
                      {
                        "path": "namespace",
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.namespace"
                        }
                      }
                    ]
                  }
                },
                {
                  "configMap": {
                    "name": "openshift-service-ca.crt",
                    "items": [
                      {
                        "key": "service-ca.crt",
                        "path": "service-ca.crt"
                      }
                    ]
                  }
                }
              ],
              "defaultMode": 420
            }
          }
        ],
        "initContainers": [
          {
            "name": "ci-scheduling-dns-wait",
            "image": "registry.access.redhat.com/ubi8",
            "command": [
              "/bin/sh",
              "-c",
              "declare -i T; until [[ \"$ret\" == \"0\" ]] || [[ \"$T\" -gt \"120\" ]]; do curl http://static.redhat.com/test/rhel-networkmanager.txt \u003e /dev/null; ret=$?; sleep 1; let \"T+=1\"; done"
            ],
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-g9892",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "Always",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "place-entrypoint",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "args": [
              "--copy-mode-only"
            ],
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-g9892",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "command": [
              "cp"
            ],
            "args": [
              "/bin/entrypoint-wrapper",
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-g9892",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "inject-cli",
            "image": "quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:62d95d6217b7e6a431d433ca7c27b8e58483b442679b1123e67b8215db6d08ca",
            "command": [
              "/bin/sh"
            ],
            "args": [
              "-c",
              "ARCH=$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/'); if [[ -e /usr/share/openshift/linux_${ARCH}/oc.rhel8 ]]; then /bin/cp /usr/share/openshift/linux_${ARCH}/oc.rhel8 /cli/oc; else /bin/cp /usr/share/openshift/linux_${ARCH}/oc /cli; fi"
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "cli",
                "mountPath": "/cli"
              },
              {
                "name": "kube-api-access-g9892",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "containers": [
          {
            "name": "test",
            "image": "quay-proxy.ci.openshift.org/openshift/ci@sha256:6f31925ab892e14d4c6f3af7bafa4c4fd3850dfb11c67b5b4c09bcaa2b78b265",
            "command": [
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "args": [
              "/tools/entrypoint"
            ],
            "env": [
              {
                "name": "BUILD_ID",
                "value": "1978661561102766080"
              },
              {
                "name": "CI",
                "value": "true"
              },
              {
                "name": "JOB_NAME",
                "value": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"4h0m0s\",\"grace_period\":\"2h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "JOB_TYPE",
                "value": "presubmit"
              },
              {
                "name": "OPENSHIFT_CI",
                "value": "true"
              },
              {
                "name": "PROW_JOB_ID",
                "value": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5"
              },
              {
                "name": "PULL_BASE_REF",
                "value": "master"
              },
              {
                "name": "PULL_BASE_SHA",
                "value": "3847d2254f63a2740d3b9c81edab848d00aeec49"
              },
              {
                "name": "PULL_HEAD_REF"
              },
              {
                "name": "PULL_NUMBER",
                "value": "70234"
              },
              {
                "name": "PULL_PULL_SHA",
                "value": "f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_REFS",
                "value": "master:3847d2254f63a2740d3b9c81edab848d00aeec49,70234:f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_TITLE",
                "value": "[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster."
              },
              {
                "name": "REPO_NAME",
                "value": "release"
              },
              {
                "name": "REPO_OWNER",
                "value": "openshift"
              },
              {
                "name": "GIT_CONFIG_COUNT",
                "value": "1"
              },
              {
                "name": "GIT_CONFIG_KEY_0",
                "value": "safe.directory"
              },
              {
                "name": "GIT_CONFIG_VALUE_0",
                "value": "*"
              },
              {
                "name": "ENTRYPOINT_OPTIONS",
                "value": "{\"timeout\":14400000000000,\"grace_period\":7200000000000,\"artifact_dir\":\"/logs/artifacts\",\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\n\\nset -o nounset\\nset -o errexit\\nset -o pipefail\\n\\nstart_time=$SECONDS\\n\\n# --- Trap definition ---\\n# This trap will be executed when the script exits for any reason (successful, error, or signal).\\ntrap 'debug_on_exit' EXIT\\n\\n# shellcheck disable=SC2329\\ndebug_on_exit() {\\n  local exit_code=$?\\n  local end_time=$SECONDS\\n  local execution_time=$((end_time - start_time))\\n  local debug_threshold=1200 # 20 minutes in seconds\\n  local hco_namespace=openshift-cnv\\n\\n  if [[ (${execution_time} -lt ${debug_threshold}) || ${exit_code} -ne 0 ]]; then\\n    echo\\n    echo \\\"--------------------------------------------------------\\\"\\n    echo \\\" SCRIPT EXITED PREMATURELY (runtime: ${execution_time}s) \\\"\\n    echo \\\"--------------------------------------------------------\\\"\\n    echo \\\"Entering 2-hour debug sleep. Press Ctrl+C to terminate.\\\"\\n    echo \\\"You can now inspect the system state.\\\"\\n    echo \\\"PID: $$\\\"\\n    echo \\\"Exit Code: ${exit_code}\\\"\\n    echo \\\"--------------------------------------------------------\\\"\\n    # The 'sleep' command will be interrupted by Ctrl+C.\\n    # To make the sleep uninterruptible by Ctrl+C, you could add:\\n    # trap '' SIGINT SIGTERM\\n    oc get -n \\\"${hco_namespace}\\\" hco kubevirt-hyperconverged -o yaml \\u003e \\\"${ARTIFACT_DIR}\\\"/hco-kubevirt-hyperconverged-cr.yaml\\n    oc logs --since=1h -n \\\"${hco_namespace}\\\" -l name=hyperconverged-cluster-operator \\u003e \\\"${ARTIFACT_DIR}\\\"/hco.log\\n\\n    runMustGather\\n    echo \\\"    😴 😴 😴\\\"\\n  fi\\n\\n  # exit with the original exit code.\\n  exit \\\"${exit_code}\\\"\\n}\\n\\nfunction setDefaultStorageClass() {\\n    local storageclass_name=$1\\n    oc get storageclass -o name | xargs -trI{} oc patch {} -p '{\\\"metadata\\\": {\\\"annotations\\\": {\\\"storageclass.kubernetes.io/is-default-class\\\": \\\"false\\\"}}}'\\n    oc patch storageclass \\\"${storageclass_name}\\\" -p '{\\\"metadata\\\": {\\\"annotations\\\": {\\\"storageclass.kubernetes.io/is-default-class\\\": \\\"true\\\"}}}'\\n}\\n\\n# shellcheck disable=SC2329\\nfunction getMustGatherImage() {\\n    oc get csv --namespace='openshift-cnv' --selector='!olm.copiedFrom' --output='json' \\\\\\n        | jq -r '\\n            .items[]\\n            | select(.metadata.name | contains(\\\"kubevirt-hyperconverged-operator\\\"))\\n            | .spec.relatedImages[]\\n            | select(.name | contains(\\\"must-gather\\\"))\\n            | .image'\\n}\\n\\n# shellcheck disable=SC2329\\nfunction runMustGather() {\\n    local IMAGE\\n    local FALLBACK_IMAGE=\\\"registry.redhat.io/container-native-virtualization/cnv-must-gather-rhel9:v${OCP_VERSION}\\\"\\n    local MUST_GATHER_CNV_DIR=\\\"${ARTIFACT_DIR}/must-gather-cnv\\\"\\n\\n    IMAGE=$(getMustGatherImage)\\n    if [[ -z $IMAGE ]]; then\\n        IMAGE=$FALLBACK_IMAGE\\n    fi\\n\\n    mkdir -p \\\"${MUST_GATHER_CNV_DIR}\\\"\\n    oc adm must-gather --dest-dir=\\\"${MUST_GATHER_CNV_DIR}\\\" --image=\\\"${IMAGE}\\\" -- /usr/bin/gather --vms_details | tee \\\"${MUST_GATHER_CNV_DIR}\\\"/must-gather-cnv.log || true\\n    # tar -czf must-gather-cnv.tar.gz must-gather-cnv || true\\n}\\n\\n#\\n# Enable or disable Common Boot Image Import\\n#\\n# Inputs:\\n#   * status - true / false\\nfunction cnv::toggle_common_boot_image_import () {\\n  local status=\\\"${1}\\\"\\n  oc patch hco kubevirt-hyperconverged -n openshift-cnv \\\\\\n    --type=merge \\\\\\n    -p \\\"{\\\\\\\"spec\\\\\\\":{\\\\\\\"enableCommonBootImageImport\\\\\\\": ${status}}}\\\"\\n\\n    # In some edge cases, the HCO deployment will be scaled down, and not scale up.\\n    oc scale deployment hco-operator --replicas 1 -n openshift-cnv\\n\\n    oc wait hco kubevirt-hyperconverged -n openshift-cnv  \\\\\\n    --for=condition='Available' \\\\\\n    --timeout='5m'\\n}\\n\\n#\\n# Re-import datavolumes, for example after changing the default storage class\\n#\\nfunction cnv::reimport_datavolumes() {\\n  local dvnamespace=\\\"openshift-virtualization-os-images\\\"\\n  echo \\\"[DEBUG] Disable DataImportCron\\\"\\n  cnv::toggle_common_boot_image_import \\\"false\\\"\\n  sleep 1\\n\\n  oc wait dataimportcrons -n \\\"${dvnamespace}\\\" --all --for='delete'\\n  echo \\\"[DEBUG] Delete all DataSources, DataVolumes, VolumeSnapshots and PVCs of CNV default volumes\\\"\\n  # `oc delete`` command does not account for dependencies or the sequence in which OpenShift resources are managed.\\n  # So we need to run the following commands in order to avoid issues like:\\n  # VolumeSnapshot references a PVC which no longer exist, and then snapshot-controller will no longer be able proceed with the cleanup,\\n  # potentially leaving the snapshot's finalizer in place\\n\\n  # Delete these first since they might reference datavolumes or snapshots indirectly\\n  oc delete datasources -n \\\"${dvnamespace}\\\" --selector='cdi.kubevirt.io/dataImportCron'\\n\\n  # Delete next because they might have dependencies on PVCs\\n  oc delete datavolumes -n \\\"${dvnamespace}\\\" --selector='cdi.kubevirt.io/dataImportCron'\\n\\n  # Ugly hack for this external-snapshotter bug: https://github.com/kubernetes-csi/external-snapshotter/issues/1258.\\n  local retry_count=0\\n  local max_retries=10\\n  local interval=30\\n  while [[ $retry_count -lt $max_retries ]]; do\\n      echo \\\"Attempting to delete all volumesnapshots in namespace ${dvnamespace} (Attempt $((retry_count + 1)) of ${max_retries})...\\\"\\n\\n      if oc delete volumesnapshots -n \\\"${dvnamespace}\\\" --selector=cdi.kubevirt.io/dataImportCron --timeout=\\\"${interval}s\\\" --ignore-not-found; then\\n          echo \\\"Successfully deleted all volumesnapshots\\\"\\n          break\\n      else\\n          echo \\\"Failed to delete some volumesnapshots. Trying to send dummy annotation to all dangling volumesnapshots\\\"\\n          retry_count=$((retry_count + 1))\\n\\n          # send dummy-annotation so the CSI-sidecar will send a DeleteSnapshot RPC\\n          for name in $(oc get volumesnapshot -n \\\"${dvnamespace}\\\" --selector=cdi.kubevirt.io/dataImportCron -ojsonpath='{.items[*].metadata.name}'); do\\n            # Unfortunately, VolumeSnapshotContent resources do not include the label selectors of their associated VolumeSnapshots\\n            volumesnapshotcontent_name=$(oc get volumesnapshotcontent -o json | jq -r \\\".items[] | select(.spec.volumeSnapshotRef.name == \\\\\\\"$name\\\\\\\") | .metadata.name\\\")\\n            oc annotate volumesnapshotcontent \\\"${volumesnapshotcontent_name}\\\" example.com/dummy-annotation=\\\"This is a dummy annotation\\\"\\n          done\\n      fi\\n  done\\n\\n  if [[ $retry_count -ge $max_retries ]]; then\\n    echo \\\"failed to delete all volumesnapshot after $max_retries attempts.\\\"\\n    exit 1\\n  fi\\n\\n  # Finally, delete PVCs\\n  oc delete pvc -n \\\"${dvnamespace}\\\" --selector='cdi.kubevirt.io/dataImportCron'\\n\\n  echo \\\"[DEBUG] Enable DataImportCron\\\"\\n  cnv::toggle_common_boot_image_import \\\"true\\\"\\n  sleep 10\\n  echo \\\"[DEBUG] Wait for DataImportCron to re-import volumes\\\"\\n  oc wait DataImportCron -n \\\"${dvnamespace}\\\" --all --for=condition=UpToDate --timeout=20m\\n  echo \\\"[DEBUG] Printing persistent volume claims\\\"\\n  oc get pvc -n \\\"${dvnamespace}\\\"\\n}\\n\\nfunction install_yq_if_not_exists() {\\n    # Install yq manually if not found in image\\n    echo \\\"Checking if yq exists\\\"\\n    cmd_yq=\\\"$(yq --version 2\\u003e/dev/null || true)\\\"\\n    if [ -n \\\"$cmd_yq\\\" ]; then\\n        echo \\\"yq version: $cmd_yq\\\"\\n    else\\n        echo \\\"Installing yq\\\"\\n        mkdir -p /tmp/bin\\n        export PATH=$PATH:/tmp/bin/\\n        curl -L \\\"https://github.com/mikefarah/yq/releases/latest/download/yq_linux_$(uname -m | sed 's/aarch64/arm64/;s/x86_64/amd64/')\\\" \\\\\\n         -o /tmp/bin/yq \\u0026\\u0026 chmod +x /tmp/bin/yq\\n    fi\\n}\\n\\nBIN_FOLDER=$(mktemp -d /tmp/bin.XXXX)\\nOC_URL=\\\"https://mirror.openshift.com/pub/openshift-v4/amd64/clients/ocp/latest/openshift-client-linux.tar.gz\\\"\\n\\n# Exports\\nexport PATH=\\\"${BIN_FOLDER}:${PATH}\\\"\\nexport OPENSHIFT_PYTHON_WRAPPER_LOG_FILE=\\\"${ARTIFACT_DIR}/openshift_python_wrapper.log\\\"\\nexport JUNIT_RESULTS_FILE=\\\"${ARTIFACT_DIR}/junit_results.xml\\\"\\nexport HTML_RESULTS_FILE=\\\"${ARTIFACT_DIR}/report.html\\\"\\nset +x # We don't wan't to see it in the logs\\nARTIFACTORY_USER=$(head -1 \\\"${BW_PATH}\\\"/artifactory-user || printf ci-read-only-user)\\nARTIFACTORY_TOKEN=$(head -1 \\\"${BW_PATH}\\\"/artifactory-token)\\nARTIFACTORY_SERVER=$(head -1 \\\"${BW_PATH}\\\"/artifactory-server)\\nACCESS_TOKEN=$(head -1 \\\"${BW_PATH}\\\"/bitwarden-client-secret)\\nORGANIZATION_ID=$(head -1 \\\"${BW_PATH}\\\"/bitwarden-org-id)\\nset -x\\nexport ORGANIZATION_ID ACCESS_TOKEN ARTIFACTORY_USER ARTIFACTORY_TOKEN ARTIFACTORY_SERVER\\n\\n# Unset the following environment variables to avoid issues with oc command\\nunset KUBERNETES_SERVICE_PORT_HTTPS\\nunset KUBERNETES_SERVICE_PORT\\nunset KUBERNETES_PORT_443_TCP\\nunset KUBERNETES_PORT_443_TCP_PROTO\\nunset KUBERNETES_PORT_443_TCP_ADDR\\nunset KUBERNETES_SERVICE_HOST\\nunset KUBERNETES_PORT\\nunset KUBERNETES_PORT_443_TCP_PORT\\n\\n###########################################################################\\n# Get oc binary\\ncurl -sL \\\"${OC_URL}\\\" | tar -C \\\"${BIN_FOLDER}\\\" -xzvf - oc\\n\\noc whoami --show-console\\nHCO_SUBSCRIPTION=$(oc get subscription.operators.coreos.com -n openshift-cnv -o jsonpath='{.items[0].metadata.name}')\\n\\n# TODO: We might need to re-import all the images to utlize the new default storage class.\\noc get sc\\nsetDefaultStorageClass 'ocs-storagecluster-ceph-rbd-virtualization'\\noc get sc\\ncnv::reimport_datavolumes\\n\\nrc=0\\nuv run --verbose --cache-dir /tmp/uv-cache pytest  \\\\\\n    -s \\\\\\n    -o log_cli=true \\\\\\n    -o cache_dir=/tmp/pytest-cache \\\\\\n    --pytest-log-file \\\"${ARTIFACT_DIR}/tests.log\\\" \\\\\\n    --data-collector --data-collector-output-dir=\\\"${ARTIFACT_DIR}/\\\" \\\\\\n    --junitxml \\\"${JUNIT_RESULTS_FILE}\\\" \\\\\\n    --html=\\\"${HTML_RESULTS_FILE}\\\" --self-contained-html \\\\\\n    --tb=native \\\\\\n    --tc default_storage_class:ocs-storagecluster-ceph-rbd-virtualization \\\\\\n    --tc default_volume_mode:Block \\\\\\n    --tc \\\"hco_subscription:${HCO_SUBSCRIPTION}\\\" \\\\\\n    --latest-rhel \\\\\\n    --storage-class-matrix=ocs-storagecluster-ceph-rbd-virtualization \\\\\\n    --leftovers-collector \\\\\\n    tests/network/localnet/test_default_bridge.py || rc=$?\\n\\n# TODO: Fix junit, spyglass still show \\\"nil\\\" for failed jobs.\\n#       (This attempt didn't work)\\n# if [[ -f \\\"${JUNIT_RESULTS_FILE}\\\" ]]; then\\n#     cp -v \\\"${JUNIT_RESULTS_FILE}\\\" \\\"${JUNIT_RESULTS_FILE}.original\\\"\\n#     xmllint --format \\\"${JUNIT_RESULTS_FILE}.original\\\" \\\\\\n#         | sed --regexp-extended 's#\\u003c/?testsuites([^\\u003e]+)?\\u003e##g' \\\\\\n#         | xmllint --format - \\u003e \\\"${JUNIT_RESULTS_FILE}\\\"\\n# fi\\n\\n# Send junit file to shared dir for Data Router Reporter step\\ncp \\\"${JUNIT_RESULTS_FILE}\\\" \\\"${SHARED_DIR}\\\"\\n\\nexit ${rc}\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}"
              },
              {
                "name": "ARTIFACT_DIR",
                "value": "/logs/artifacts"
              },
              {
                "name": "NAMESPACE",
                "value": "ci-op-9gmi3mdh"
              },
              {
                "name": "JOB_NAME_SAFE",
                "value": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_NAME_HASH",
                "value": "59604"
              },
              {
                "name": "UNIQUE_HASH",
                "value": "59604"
              },
              {
                "name": "LEASED_RESOURCE",
                "value": "9c68b29a-693f-4a38-b1e6-f559fa73f31a"
              },
              {
                "name": "ORIGINAL_RELEASE_IMAGE_LATEST",
                "value": "registry.ci.openshift.org/ocp/release:4.19.0-0.nightly-2025-10-15-051359"
              },
              {
                "name": "RELEASE_IMAGE_LATEST",
                "value": "registry.build10.ci.openshift.org/ci-op-9gmi3mdh/release@sha256:88597cc1247e97e4fbe14ead836fc08d776787e825fa3455c031e770442669fc"
              },
              {
                "name": "IMAGE_FORMAT"
              },
              {
                "name": "BW_PATH",
                "value": "/bw"
              },
              {
                "name": "OCP_VERSION",
                "value": "4.19"
              },
              {
                "name": "BREW_IMAGE_REGISTRY_USERNAME",
                "value": "|7820aea2-0d75-11e7-9259-28d244ea5a6d.hhav.f63e13"
              },
              {
                "name": "BREW_IMAGE_REGISTRY_TOKEN_PATH",
                "value": "/var/run/cnv-ci-brew-pull-secret/token"
              },
              {
                "name": "KUBEVIRT_RELEASE",
                "value": "v0.59.0-alpha.0"
              },
              {
                "name": "ARTIFACTS_DIR",
                "value": "/tmp/artifacts"
              },
              {
                "name": "TARGET_NAMESPACE",
                "value": "openshift-cnv"
              },
              {
                "name": "KUBECONFIG",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig"
              },
              {
                "name": "KUBECONFIGMINIMAL",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig-minimal"
              },
              {
                "name": "KUBEADMIN_PASSWORD_FILE",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeadmin-password"
              },
              {
                "name": "CLUSTER_PROFILE_NAME",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_TYPE",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_PROFILE_DIR",
                "value": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "CLI_DIR",
                "value": "/cli"
              },
              {
                "name": "SHARED_DIR",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage"
              }
            ],
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cli",
                "mountPath": "/cli"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "test-credentials-cluster-secrets-aws-interop-qe",
                "mountPath": "/secrets"
              },
              {
                "name": "test-credentials-cnv-ci-brew-pull-secret",
                "mountPath": "/var/run/cnv-ci-brew-pull-secret"
              },
              {
                "name": "test-credentials-openshift-virtualization-tests-credentials",
                "mountPath": "/bw"
              },
              {
                "name": "kube-api-access-g9892",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "sidecar",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "env": [
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "SIDECAR_OPTIONS",
                "value": "{\"gcs_options\":{\"items\":[\"/logs/artifacts\"],\"sub_dir\":\"artifacts/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal/interop-tests-cnv-tests-gs-baremetal-localnet\",\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"],\"gcs_credentials_file\":\"/secrets/gcs/service-account.json\",\"dry_run\":false},\"entries\":[{\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\n\\nset -o nounset\\nset -o errexit\\nset -o pipefail\\n\\nstart_time=$SECONDS\\n\\n# --- Trap definition ---\\n# This trap will be executed when the script exits for any reason (successful, error, or signal).\\ntrap 'debug_on_exit' EXIT\\n\\n# shellcheck disable=SC2329\\ndebug_on_exit() {\\n  local exit_code=$?\\n  local end_time=$SECONDS\\n  local execution_time=$((end_time - start_time))\\n  local debug_threshold=1200 # 20 minutes in seconds\\n  local hco_namespace=openshift-cnv\\n\\n  if [[ (${execution_time} -lt ${debug_threshold}) || ${exit_code} -ne 0 ]]; then\\n    echo\\n    echo \\\"--------------------------------------------------------\\\"\\n    echo \\\" SCRIPT EXITED PREMATURELY (runtime: ${execution_time}s) \\\"\\n    echo \\\"--------------------------------------------------------\\\"\\n    echo \\\"Entering 2-hour debug sleep. Press Ctrl+C to terminate.\\\"\\n    echo \\\"You can now inspect the system state.\\\"\\n    echo \\\"PID: $$\\\"\\n    echo \\\"Exit Code: ${exit_code}\\\"\\n    echo \\\"--------------------------------------------------------\\\"\\n    # The 'sleep' command will be interrupted by Ctrl+C.\\n    # To make the sleep uninterruptible by Ctrl+C, you could add:\\n    # trap '' SIGINT SIGTERM\\n    oc get -n \\\"${hco_namespace}\\\" hco kubevirt-hyperconverged -o yaml \\u003e \\\"${ARTIFACT_DIR}\\\"/hco-kubevirt-hyperconverged-cr.yaml\\n    oc logs --since=1h -n \\\"${hco_namespace}\\\" -l name=hyperconverged-cluster-operator \\u003e \\\"${ARTIFACT_DIR}\\\"/hco.log\\n\\n    runMustGather\\n    echo \\\"    😴 😴 😴\\\"\\n  fi\\n\\n  # exit with the original exit code.\\n  exit \\\"${exit_code}\\\"\\n}\\n\\nfunction setDefaultStorageClass() {\\n    local storageclass_name=$1\\n    oc get storageclass -o name | xargs -trI{} oc patch {} -p '{\\\"metadata\\\": {\\\"annotations\\\": {\\\"storageclass.kubernetes.io/is-default-class\\\": \\\"false\\\"}}}'\\n    oc patch storageclass \\\"${storageclass_name}\\\" -p '{\\\"metadata\\\": {\\\"annotations\\\": {\\\"storageclass.kubernetes.io/is-default-class\\\": \\\"true\\\"}}}'\\n}\\n\\n# shellcheck disable=SC2329\\nfunction getMustGatherImage() {\\n    oc get csv --namespace='openshift-cnv' --selector='!olm.copiedFrom' --output='json' \\\\\\n        | jq -r '\\n            .items[]\\n            | select(.metadata.name | contains(\\\"kubevirt-hyperconverged-operator\\\"))\\n            | .spec.relatedImages[]\\n            | select(.name | contains(\\\"must-gather\\\"))\\n            | .image'\\n}\\n\\n# shellcheck disable=SC2329\\nfunction runMustGather() {\\n    local IMAGE\\n    local FALLBACK_IMAGE=\\\"registry.redhat.io/container-native-virtualization/cnv-must-gather-rhel9:v${OCP_VERSION}\\\"\\n    local MUST_GATHER_CNV_DIR=\\\"${ARTIFACT_DIR}/must-gather-cnv\\\"\\n\\n    IMAGE=$(getMustGatherImage)\\n    if [[ -z $IMAGE ]]; then\\n        IMAGE=$FALLBACK_IMAGE\\n    fi\\n\\n    mkdir -p \\\"${MUST_GATHER_CNV_DIR}\\\"\\n    oc adm must-gather --dest-dir=\\\"${MUST_GATHER_CNV_DIR}\\\" --image=\\\"${IMAGE}\\\" -- /usr/bin/gather --vms_details | tee \\\"${MUST_GATHER_CNV_DIR}\\\"/must-gather-cnv.log || true\\n    # tar -czf must-gather-cnv.tar.gz must-gather-cnv || true\\n}\\n\\n#\\n# Enable or disable Common Boot Image Import\\n#\\n# Inputs:\\n#   * status - true / false\\nfunction cnv::toggle_common_boot_image_import () {\\n  local status=\\\"${1}\\\"\\n  oc patch hco kubevirt-hyperconverged -n openshift-cnv \\\\\\n    --type=merge \\\\\\n    -p \\\"{\\\\\\\"spec\\\\\\\":{\\\\\\\"enableCommonBootImageImport\\\\\\\": ${status}}}\\\"\\n\\n    # In some edge cases, the HCO deployment will be scaled down, and not scale up.\\n    oc scale deployment hco-operator --replicas 1 -n openshift-cnv\\n\\n    oc wait hco kubevirt-hyperconverged -n openshift-cnv  \\\\\\n    --for=condition='Available' \\\\\\n    --timeout='5m'\\n}\\n\\n#\\n# Re-import datavolumes, for example after changing the default storage class\\n#\\nfunction cnv::reimport_datavolumes() {\\n  local dvnamespace=\\\"openshift-virtualization-os-images\\\"\\n  echo \\\"[DEBUG] Disable DataImportCron\\\"\\n  cnv::toggle_common_boot_image_import \\\"false\\\"\\n  sleep 1\\n\\n  oc wait dataimportcrons -n \\\"${dvnamespace}\\\" --all --for='delete'\\n  echo \\\"[DEBUG] Delete all DataSources, DataVolumes, VolumeSnapshots and PVCs of CNV default volumes\\\"\\n  # `oc delete`` command does not account for dependencies or the sequence in which OpenShift resources are managed.\\n  # So we need to run the following commands in order to avoid issues like:\\n  # VolumeSnapshot references a PVC which no longer exist, and then snapshot-controller will no longer be able proceed with the cleanup,\\n  # potentially leaving the snapshot's finalizer in place\\n\\n  # Delete these first since they might reference datavolumes or snapshots indirectly\\n  oc delete datasources -n \\\"${dvnamespace}\\\" --selector='cdi.kubevirt.io/dataImportCron'\\n\\n  # Delete next because they might have dependencies on PVCs\\n  oc delete datavolumes -n \\\"${dvnamespace}\\\" --selector='cdi.kubevirt.io/dataImportCron'\\n\\n  # Ugly hack for this external-snapshotter bug: https://github.com/kubernetes-csi/external-snapshotter/issues/1258.\\n  local retry_count=0\\n  local max_retries=10\\n  local interval=30\\n  while [[ $retry_count -lt $max_retries ]]; do\\n      echo \\\"Attempting to delete all volumesnapshots in namespace ${dvnamespace} (Attempt $((retry_count + 1)) of ${max_retries})...\\\"\\n\\n      if oc delete volumesnapshots -n \\\"${dvnamespace}\\\" --selector=cdi.kubevirt.io/dataImportCron --timeout=\\\"${interval}s\\\" --ignore-not-found; then\\n          echo \\\"Successfully deleted all volumesnapshots\\\"\\n          break\\n      else\\n          echo \\\"Failed to delete some volumesnapshots. Trying to send dummy annotation to all dangling volumesnapshots\\\"\\n          retry_count=$((retry_count + 1))\\n\\n          # send dummy-annotation so the CSI-sidecar will send a DeleteSnapshot RPC\\n          for name in $(oc get volumesnapshot -n \\\"${dvnamespace}\\\" --selector=cdi.kubevirt.io/dataImportCron -ojsonpath='{.items[*].metadata.name}'); do\\n            # Unfortunately, VolumeSnapshotContent resources do not include the label selectors of their associated VolumeSnapshots\\n            volumesnapshotcontent_name=$(oc get volumesnapshotcontent -o json | jq -r \\\".items[] | select(.spec.volumeSnapshotRef.name == \\\\\\\"$name\\\\\\\") | .metadata.name\\\")\\n            oc annotate volumesnapshotcontent \\\"${volumesnapshotcontent_name}\\\" example.com/dummy-annotation=\\\"This is a dummy annotation\\\"\\n          done\\n      fi\\n  done\\n\\n  if [[ $retry_count -ge $max_retries ]]; then\\n    echo \\\"failed to delete all volumesnapshot after $max_retries attempts.\\\"\\n    exit 1\\n  fi\\n\\n  # Finally, delete PVCs\\n  oc delete pvc -n \\\"${dvnamespace}\\\" --selector='cdi.kubevirt.io/dataImportCron'\\n\\n  echo \\\"[DEBUG] Enable DataImportCron\\\"\\n  cnv::toggle_common_boot_image_import \\\"true\\\"\\n  sleep 10\\n  echo \\\"[DEBUG] Wait for DataImportCron to re-import volumes\\\"\\n  oc wait DataImportCron -n \\\"${dvnamespace}\\\" --all --for=condition=UpToDate --timeout=20m\\n  echo \\\"[DEBUG] Printing persistent volume claims\\\"\\n  oc get pvc -n \\\"${dvnamespace}\\\"\\n}\\n\\nfunction install_yq_if_not_exists() {\\n    # Install yq manually if not found in image\\n    echo \\\"Checking if yq exists\\\"\\n    cmd_yq=\\\"$(yq --version 2\\u003e/dev/null || true)\\\"\\n    if [ -n \\\"$cmd_yq\\\" ]; then\\n        echo \\\"yq version: $cmd_yq\\\"\\n    else\\n        echo \\\"Installing yq\\\"\\n        mkdir -p /tmp/bin\\n        export PATH=$PATH:/tmp/bin/\\n        curl -L \\\"https://github.com/mikefarah/yq/releases/latest/download/yq_linux_$(uname -m | sed 's/aarch64/arm64/;s/x86_64/amd64/')\\\" \\\\\\n         -o /tmp/bin/yq \\u0026\\u0026 chmod +x /tmp/bin/yq\\n    fi\\n}\\n\\nBIN_FOLDER=$(mktemp -d /tmp/bin.XXXX)\\nOC_URL=\\\"https://mirror.openshift.com/pub/openshift-v4/amd64/clients/ocp/latest/openshift-client-linux.tar.gz\\\"\\n\\n# Exports\\nexport PATH=\\\"${BIN_FOLDER}:${PATH}\\\"\\nexport OPENSHIFT_PYTHON_WRAPPER_LOG_FILE=\\\"${ARTIFACT_DIR}/openshift_python_wrapper.log\\\"\\nexport JUNIT_RESULTS_FILE=\\\"${ARTIFACT_DIR}/junit_results.xml\\\"\\nexport HTML_RESULTS_FILE=\\\"${ARTIFACT_DIR}/report.html\\\"\\nset +x # We don't wan't to see it in the logs\\nARTIFACTORY_USER=$(head -1 \\\"${BW_PATH}\\\"/artifactory-user || printf ci-read-only-user)\\nARTIFACTORY_TOKEN=$(head -1 \\\"${BW_PATH}\\\"/artifactory-token)\\nARTIFACTORY_SERVER=$(head -1 \\\"${BW_PATH}\\\"/artifactory-server)\\nACCESS_TOKEN=$(head -1 \\\"${BW_PATH}\\\"/bitwarden-client-secret)\\nORGANIZATION_ID=$(head -1 \\\"${BW_PATH}\\\"/bitwarden-org-id)\\nset -x\\nexport ORGANIZATION_ID ACCESS_TOKEN ARTIFACTORY_USER ARTIFACTORY_TOKEN ARTIFACTORY_SERVER\\n\\n# Unset the following environment variables to avoid issues with oc command\\nunset KUBERNETES_SERVICE_PORT_HTTPS\\nunset KUBERNETES_SERVICE_PORT\\nunset KUBERNETES_PORT_443_TCP\\nunset KUBERNETES_PORT_443_TCP_PROTO\\nunset KUBERNETES_PORT_443_TCP_ADDR\\nunset KUBERNETES_SERVICE_HOST\\nunset KUBERNETES_PORT\\nunset KUBERNETES_PORT_443_TCP_PORT\\n\\n###########################################################################\\n# Get oc binary\\ncurl -sL \\\"${OC_URL}\\\" | tar -C \\\"${BIN_FOLDER}\\\" -xzvf - oc\\n\\noc whoami --show-console\\nHCO_SUBSCRIPTION=$(oc get subscription.operators.coreos.com -n openshift-cnv -o jsonpath='{.items[0].metadata.name}')\\n\\n# TODO: We might need to re-import all the images to utlize the new default storage class.\\noc get sc\\nsetDefaultStorageClass 'ocs-storagecluster-ceph-rbd-virtualization'\\noc get sc\\ncnv::reimport_datavolumes\\n\\nrc=0\\nuv run --verbose --cache-dir /tmp/uv-cache pytest  \\\\\\n    -s \\\\\\n    -o log_cli=true \\\\\\n    -o cache_dir=/tmp/pytest-cache \\\\\\n    --pytest-log-file \\\"${ARTIFACT_DIR}/tests.log\\\" \\\\\\n    --data-collector --data-collector-output-dir=\\\"${ARTIFACT_DIR}/\\\" \\\\\\n    --junitxml \\\"${JUNIT_RESULTS_FILE}\\\" \\\\\\n    --html=\\\"${HTML_RESULTS_FILE}\\\" --self-contained-html \\\\\\n    --tb=native \\\\\\n    --tc default_storage_class:ocs-storagecluster-ceph-rbd-virtualization \\\\\\n    --tc default_volume_mode:Block \\\\\\n    --tc \\\"hco_subscription:${HCO_SUBSCRIPTION}\\\" \\\\\\n    --latest-rhel \\\\\\n    --storage-class-matrix=ocs-storagecluster-ceph-rbd-virtualization \\\\\\n    --leftovers-collector \\\\\\n    tests/network/localnet/test_default_bridge.py || rc=$?\\n\\n# TODO: Fix junit, spyglass still show \\\"nil\\\" for failed jobs.\\n#       (This attempt didn't work)\\n# if [[ -f \\\"${JUNIT_RESULTS_FILE}\\\" ]]; then\\n#     cp -v \\\"${JUNIT_RESULTS_FILE}\\\" \\\"${JUNIT_RESULTS_FILE}.original\\\"\\n#     xmllint --format \\\"${JUNIT_RESULTS_FILE}.original\\\" \\\\\\n#         | sed --regexp-extended 's#\\u003c/?testsuites([^\\u003e]+)?\\u003e##g' \\\\\\n#         | xmllint --format - \\u003e \\\"${JUNIT_RESULTS_FILE}\\\"\\n# fi\\n\\n# Send junit file to shared dir for Data Router Reporter step\\ncp \\\"${JUNIT_RESULTS_FILE}\\\" \\\"${SHARED_DIR}\\\"\\n\\nexit ${rc}\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}],\"ignore_interrupts\":true,\"censoring_options\":{\"secret_directories\":[\"/secrets/builder-dockercfg-4z6z8\",\"/secrets/ci-operator-dockercfg-shmx5\",\"/secrets/ci-pull-credentials\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\",\"/secrets/default-dockercfg-b9qkj\",\"/secrets/deployer-dockercfg-4l8ch\",\"/secrets/gce-sa-credentials-gcs-publisher\",\"/secrets/registry-pull-credentials\",\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\",\"/secrets/test-credentials-cnv-ci-brew-pull-secret\",\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"],\"minimum_secret_length\":6}}"
              }
            ],
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-g9892",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "restartPolicy": "Never",
        "terminationGracePeriodSeconds": 9000,
        "dnsPolicy": "ClusterFirst",
        "nodeSelector": {
          "ci-workload": "tests"
        },
        "serviceAccountName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "serviceAccount": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "nodeName": "ip-10-28-65-116.us-east-2.compute.internal",
        "securityContext": {
          "seLinuxOptions": {
            "level": "s0:c68,c27"
          },
          "fsGroup": 1004610000,
          "seccompProfile": {
            "type": "RuntimeDefault"
          }
        },
        "imagePullSecrets": [
          {
            "name": "registry-pull-credentials"
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
          }
        ],
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "NotIn",
                      "values": [
                        "ip-10-28-65-78.us-east-2.compute.internal"
                      ]
                    },
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              ]
            },
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 100,
                "preference": {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "schedulerName": "default-scheduler",
        "tolerations": [
          {
            "key": "node.kubernetes.io/not-ready",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/unreachable",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/memory-pressure",
            "operator": "Exists",
            "effect": "NoSchedule"
          },
          {
            "key": "node-role.kubernetes.io/ci-tests-worker",
            "operator": "Exists",
            "effect": "NoSchedule"
          }
        ],
        "priority": 0,
        "runtimeClassName": "ci-scheduler-runtime-tests",
        "enableServiceLinks": true,
        "preemptionPolicy": "PreemptLowerPriority",
        "overhead": {
          "cpu": "300m",
          "memory": "600Mi"
        }
      },
      "status": {
        "phase": "Failed",
        "conditions": [
          {
            "type": "PodReadyToStartContainers",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:28:17Z"
          },
          {
            "type": "Initialized",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:21:40Z"
          },
          {
            "type": "Ready",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:26:38Z",
            "reason": "PodFailed"
          },
          {
            "type": "ContainersReady",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:26:38Z",
            "reason": "PodFailed"
          },
          {
            "type": "PodScheduled",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:21:33Z"
          }
        ],
        "hostIP": "10.28.65.116",
        "hostIPs": [
          {
            "ip": "10.28.65.116"
          }
        ],
        "podIP": "172.24.99.125",
        "podIPs": [
          {
            "ip": "172.24.99.125"
          }
        ],
        "startTime": "2025-10-16T03:21:33Z",
        "initContainerStatuses": [
          {
            "name": "ci-scheduling-dns-wait",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:21:35Z",
                "finishedAt": "2025-10-16T03:21:36Z",
                "containerID": "cri-o://ef308c922d763c03aac47e0d75d1fc0022175271dea05490438e30b33136c8c5"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "registry.access.redhat.com/ubi8:latest",
            "imageID": "registry.access.redhat.com/ubi8@sha256:96ede92bab65df0386c9dabe6ec946aaa13a8717d2d5ad52d5d9a1d2e1f90e0f",
            "containerID": "cri-o://ef308c922d763c03aac47e0d75d1fc0022175271dea05490438e30b33136c8c5",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "200Mi"
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-g9892",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "place-entrypoint",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:21:37Z",
                "finishedAt": "2025-10-16T03:21:37Z",
                "containerID": "cri-o://6bfdc86363bcc001f46d661d0c8522e0549c03f821df52fd15184a6792c8f8f2"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint@sha256:543f25b78ff850958624960f8f9e2cd73a680ea80a97746b957dbab9d210e6e9",
            "containerID": "cri-o://6bfdc86363bcc001f46d661d0c8522e0549c03f821df52fd15184a6792c8f8f2",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "25Mi"
            },
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-g9892",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:21:38Z",
                "finishedAt": "2025-10-16T03:21:38Z",
                "containerID": "cri-o://b667cf1672e47cc6542530a75be0583cd8cb005940ef26fd4efe6ceaffbbf6f3"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "imageID": "quay-proxy.ci.openshift.org/openshift/ci@sha256:5092ebbc6a951284f2c5389556826b4a3403bc3a02f37ee9358b9fc2824e65fc",
            "containerID": "cri-o://b667cf1672e47cc6542530a75be0583cd8cb005940ef26fd4efe6ceaffbbf6f3",
            "started": false,
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-g9892",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "inject-cli",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:21:39Z",
                "finishedAt": "2025-10-16T03:21:39Z",
                "containerID": "cri-o://bdf14b7c7b7d4343bb0b3c3423ff5e968cab102aa48e7087632338d5bb23c80c"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:62d95d6217b7e6a431d433ca7c27b8e58483b442679b1123e67b8215db6d08ca",
            "imageID": "quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:62d95d6217b7e6a431d433ca7c27b8e58483b442679b1123e67b8215db6d08ca",
            "containerID": "cri-o://bdf14b7c7b7d4343bb0b3c3423ff5e968cab102aa48e7087632338d5bb23c80c",
            "started": false,
            "resources": {},
            "volumeMounts": [
              {
                "name": "cli",
                "mountPath": "/cli"
              },
              {
                "name": "kube-api-access-g9892",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "containerStatuses": [
          {
            "name": "sidecar",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:22:04Z",
                "finishedAt": "2025-10-16T03:28:16Z",
                "containerID": "cri-o://fc7d0393e0c63913a53b15bf9b8ce18ce766459757af45f76ab409bc95825d39"
              }
            },
            "lastState": {},
            "ready": false,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar@sha256:41d0901d20b0546472edd74026e1bb03b4d71c739b06a7a06dbecdb967e2a910",
            "containerID": "cri-o://fc7d0393e0c63913a53b15bf9b8ce18ce766459757af45f76ab409bc95825d39",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "250Mi"
            },
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-g9892",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "test",
            "state": {
              "terminated": {
                "exitCode": 1,
                "reason": "Error",
                "message": "2j5k/service.yaml\n[must-gather-82nr5] OUT 2025-10-16T03:26:37.595069211Z webhooks/validating/vselfnoderemediation.kb.io-p2j5k/validatingwebhookconfiguration.yaml\n[must-gather-82nr5] OUT 2025-10-16T03:26:37.595127905Z webhooks/validating/vselfnoderemediationconfig.kb.io-8jc6w/\n[must-gather-82nr5] OUT 2025-10-16T03:26:37.595212981Z webhooks/validating/vselfnoderemediationconfig.kb.io-8jc6w/service.yaml\n[must-gather-82nr5] OUT 2025-10-16T03:26:37.595326238Z webhooks/validating/vselfnoderemediationconfig.kb.io-8jc6w/validatingwebhookconfiguration.yaml\n[must-gather-82nr5] OUT 2025-10-16T03:26:37.595381822Z webhooks/validating/vselfnoderemediationtemplate.kb.io-9kmhs/\n[must-gather-82nr5] OUT 2025-10-16T03:26:37.595446806Z webhooks/validating/vselfnoderemediationtemplate.kb.io-9kmhs/service.yaml\n[must-gather-82nr5] OUT 2025-10-16T03:26:37.595551792Z webhooks/validating/vselfnoderemediationtemplate.kb.io-9kmhs/validatingwebhookconfiguration.yaml\n[must-gather-82nr5] OUT 2025-10-16T03:26:37.638878362Z \n[must-gather-82nr5] OUT 2025-10-16T03:26:37.638919055Z sent 75,828 bytes  received 88,919,155 bytes  3,236,181.20 bytes/sec\n[must-gather-82nr5] OUT 2025-10-16T03:26:37.638949947Z total size is 1,089,062,796  speedup is 12.24\n[must-gather      ] OUT 2025-10-16T03:26:37.894807575Z namespace/openshift-must-gather-v278c deleted\n\n\nReprinting Cluster State:\nWhen opening a support case, bugzilla, or issue please include the following summary data along with any other requested information:\nClusterID: c97809fa-3487-4b06-97ef-3599dde2d222\nClientVersion: 4.19.16\nClusterVersion: Stable at \"4.16.41\"\nClusterOperators:\n\tAll healthy and stable\n\n\n+ echo '    😴 😴 😴'\n    😴 😴 😴\n+ exit 1\n{\"component\":\"entrypoint\",\"error\":\"wrapped process failed: exit status 1\",\"file\":\"sigs.k8s.io/prow/pkg/entrypoint/run.go:84\",\"func\":\"sigs.k8s.io/prow/pkg/entrypoint.Options.internalRun\",\"level\":\"error\",\"msg\":\"Error executing test process\",\"severity\":\"error\",\"time\":\"2025-10-16T03:26:38Z\"}\nerror: failed to execute wrapped command: exit status 1\n",
                "startedAt": "2025-10-16T03:22:04Z",
                "finishedAt": "2025-10-16T03:26:38Z",
                "containerID": "cri-o://9a14749520fb8d07a543b07b3a9984622fdbc4ea602b018df3cad0dcda0fb111"
              }
            },
            "lastState": {},
            "ready": false,
            "restartCount": 0,
            "image": "quay-proxy.ci.openshift.org/openshift/ci@sha256:6f31925ab892e14d4c6f3af7bafa4c4fd3850dfb11c67b5b4c09bcaa2b78b265",
            "imageID": "quay-proxy.ci.openshift.org/openshift/ci@sha256:6f31925ab892e14d4c6f3af7bafa4c4fd3850dfb11c67b5b4c09bcaa2b78b265",
            "containerID": "cri-o://9a14749520fb8d07a543b07b3a9984622fdbc4ea602b018df3cad0dcda0fb111",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "200Mi"
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cli",
                "mountPath": "/cli"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "test-credentials-cluster-secrets-aws-interop-qe",
                "mountPath": "/secrets"
              },
              {
                "name": "test-credentials-cnv-ci-brew-pull-secret",
                "mountPath": "/var/run/cnv-ci-brew-pull-secret"
              },
              {
                "name": "test-credentials-openshift-virtualization-tests-credentials",
                "mountPath": "/bw"
              },
              {
                "name": "kube-api-access-g9892",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "qosClass": "Burstable"
      }
    },
    {
      "metadata": {
        "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-openshift-qe-installer-bm-load-kubeconfig",
        "namespace": "ci-op-9gmi3mdh",
        "uid": "7ed98b50-b31f-434e-aff5-9ca42be89eb4",
        "resourceVersion": "624654499",
        "generation": 2,
        "creationTimestamp": "2025-10-16T03:19:46Z",
        "labels": {
          "OPENSHIFT_CI": "true",
          "ci-workload": "tests",
          "ci-workload-namespace": "ci-op-9gmi3mdh",
          "ci.openshift.io/jobid": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5",
          "ci.openshift.io/jobname": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cxxx",
          "ci.openshift.io/jobtype": "presubmit",
          "ci.openshift.io/metadata.branch": "master",
          "ci.openshift.io/metadata.org": "RedHatQE",
          "ci.openshift.io/metadata.repo": "interop-testing",
          "ci.openshift.io/metadata.step": "openshift-qe-installer-bm-load-kubeconfig",
          "ci.openshift.io/metadata.target": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "ci.openshift.io/metadata.variant": "cnv-odf-ocp4.19-lp-gs_baremetal",
          "ci.openshift.io/multi-stage-test": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
          "created-by-ci": "true",
          "multiarch.openshift.io/amd64": "",
          "multiarch.openshift.io/node-affinity": "set",
          "multiarch.openshift.io/preferred-node-affinity": "set",
          "multiarch.openshift.io/scheduling-gate": "removed",
          "multiarch.openshift.io/single-arch": ""
        },
        "annotations": {
          "ci-operator.openshift.io/container-sub-tests": "test",
          "ci-operator.openshift.io/save-container-logs": "true",
          "ci.openshift.io/job-spec": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}",
          "k8s.ovn.org/pod-networks": "{\"default\":{\"ip_addresses\":[\"172.24.99.113/23\"],\"mac_address\":\"0a:58:ac:18:63:71\",\"gateway_ips\":[\"172.24.98.1\"],\"routes\":[{\"dest\":\"172.24.0.0/16\",\"nextHop\":\"172.24.98.1\"},{\"dest\":\"172.30.0.0/16\",\"nextHop\":\"172.24.98.1\"},{\"dest\":\"169.254.0.5/32\",\"nextHop\":\"172.24.98.1\"},{\"dest\":\"100.64.0.0/16\",\"nextHop\":\"172.24.98.1\"}],\"ip_address\":\"172.24.99.113/23\",\"gateway_ip\":\"172.24.98.1\",\"role\":\"primary\"}}",
          "k8s.v1.cni.cncf.io/network-status": "[{\n    \"name\": \"ovn-kubernetes\",\n    \"interface\": \"eth0\",\n    \"ips\": [\n        \"172.24.99.113\"\n    ],\n    \"mac\": \"0a:58:ac:18:63:71\",\n    \"default\": true,\n    \"dns\": {}\n}]",
          "openshift.io/scc": "restricted-v2",
          "seccomp.security.alpha.kubernetes.io/pod": "runtime/default",
          "security.openshift.io/validated-scc-subject-type": "user"
        },
        "ownerReferences": [
          {
            "apiVersion": "image.openshift.io/v1",
            "kind": "ImageStream",
            "name": "pipeline",
            "uid": "9700f4ec-d56c-4638-afaf-6ab72b2e7e93"
          }
        ],
        "managedFields": [
          {
            "manager": "ci-operator",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:19:46Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  ".": {},
                  "f:ci-operator.openshift.io/container-sub-tests": {},
                  "f:ci-operator.openshift.io/save-container-logs": {},
                  "f:ci.openshift.io/job-spec": {}
                },
                "f:labels": {
                  ".": {},
                  "f:OPENSHIFT_CI": {},
                  "f:ci.openshift.io/jobid": {},
                  "f:ci.openshift.io/jobname": {},
                  "f:ci.openshift.io/jobtype": {},
                  "f:ci.openshift.io/metadata.branch": {},
                  "f:ci.openshift.io/metadata.org": {},
                  "f:ci.openshift.io/metadata.repo": {},
                  "f:ci.openshift.io/metadata.step": {},
                  "f:ci.openshift.io/metadata.target": {},
                  "f:ci.openshift.io/metadata.variant": {},
                  "f:ci.openshift.io/multi-stage-test": {},
                  "f:created-by-ci": {}
                },
                "f:ownerReferences": {
                  ".": {},
                  "k:{\"uid\":\"9700f4ec-d56c-4638-afaf-6ab72b2e7e93\"}": {}
                }
              },
              "f:spec": {
                "f:containers": {
                  "k:{\"name\":\"sidecar\"}": {
                    ".": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SIDECAR_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/builder-dockercfg-4z6z8\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-operator-dockercfg-shmx5\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/ci-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/default-dockercfg-b9qkj\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/deployer-dockercfg-4l8ch\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gce-sa-credentials-gcs-publisher\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/gcs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/registry-pull-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-cnv-ci-brew-pull-secret\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"test\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:env": {
                      ".": {},
                      "k:{\"name\":\"ARTIFACT_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"BUILD_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLI_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_PROFILE_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"CLUSTER_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ENTRYPOINT_OPTIONS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_COUNT\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_KEY_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"GIT_CONFIG_VALUE_0\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"IMAGE_FORMAT\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"JOB_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_NAME_SAFE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_SPEC\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"JOB_TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KCFG_SRC_SFX\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBEADMIN_PASSWORD_FILE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIG\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIGMINIMAL\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIG_ORIGIN\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"KUBECONFIG_PATH\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"LEASED_RESOURCE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"NAMESPACE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"OPENSHIFT_CI\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"ORIGINAL_RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PROW_JOB_ID\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PUBLIC_VLAN\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_REF\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_BASE_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_HEAD_REF\"}": {
                        ".": {},
                        "f:name": {}
                      },
                      "k:{\"name\":\"PULL_NUMBER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_PULL_SHA\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_REFS\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"PULL_TITLE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"RELEASE_IMAGE_LATEST\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_NAME\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"REPO_OWNER\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"SHARED_DIR\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"TYPE\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      },
                      "k:{\"name\":\"UNIQUE_HASH\"}": {
                        ".": {},
                        "f:name": {},
                        "f:value": {}
                      }
                    },
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/alabama\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/cli\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/logs\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/cluster-profile\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      },
                      "k:{\"mountPath\":\"/var/run/secrets/ci.openshift.io/multi-stage\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:dnsPolicy": {},
                "f:enableServiceLinks": {},
                "f:initContainers": {
                  ".": {},
                  "k:{\"name\":\"cp-entrypoint-wrapper\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {},
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tmp/entrypoint-wrapper\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"inject-cli\"}": {
                    ".": {},
                    "f:args": {},
                    "f:command": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {},
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/cli\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  },
                  "k:{\"name\":\"place-entrypoint\"}": {
                    ".": {},
                    "f:args": {},
                    "f:image": {},
                    "f:imagePullPolicy": {},
                    "f:name": {},
                    "f:resources": {
                      ".": {},
                      "f:limits": {
                        ".": {},
                        "f:memory": {}
                      },
                      "f:requests": {
                        ".": {},
                        "f:cpu": {},
                        "f:memory": {}
                      }
                    },
                    "f:terminationMessagePath": {},
                    "f:terminationMessagePolicy": {},
                    "f:volumeMounts": {
                      ".": {},
                      "k:{\"mountPath\":\"/tools\"}": {
                        ".": {},
                        "f:mountPath": {},
                        "f:name": {}
                      }
                    }
                  }
                },
                "f:restartPolicy": {},
                "f:schedulerName": {},
                "f:securityContext": {},
                "f:serviceAccount": {},
                "f:serviceAccountName": {},
                "f:terminationGracePeriodSeconds": {},
                "f:volumes": {
                  ".": {},
                  "k:{\"name\":\"censor-0\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-1\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-10\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-11\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-2\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-3\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-4\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-5\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-6\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-7\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-8\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"censor-9\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cli\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"cluster-profile\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"entrypoint-wrapper\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"gcs-credentials\"}": {
                    ".": {},
                    "f:name": {},
                    "f:secret": {
                      ".": {},
                      "f:defaultMode": {},
                      "f:secretName": {}
                    }
                  },
                  "k:{\"name\":\"home\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"logs\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  },
                  "k:{\"name\":\"tools\"}": {
                    ".": {},
                    "f:emptyDir": {},
                    "f:name": {}
                  }
                }
              }
            }
          },
          {
            "manager": "ip-10-28-65-116",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:19:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.ovn.org/pod-networks": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "manager",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:19:49Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:labels": {
                  "f:multiarch.openshift.io/amd64": {},
                  "f:multiarch.openshift.io/node-affinity": {},
                  "f:multiarch.openshift.io/preferred-node-affinity": {},
                  "f:multiarch.openshift.io/scheduling-gate": {},
                  "f:multiarch.openshift.io/single-arch": {}
                }
              },
              "f:spec": {
                "f:affinity": {
                  "f:nodeAffinity": {
                    "f:preferredDuringSchedulingIgnoredDuringExecution": {},
                    "f:requiredDuringSchedulingIgnoredDuringExecution": {}
                  }
                }
              }
            }
          },
          {
            "manager": "multus-daemon",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:19:50Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:metadata": {
                "f:annotations": {
                  "f:k8s.v1.cni.cncf.io/network-status": {}
                }
              }
            },
            "subresource": "status"
          },
          {
            "manager": "kubelet",
            "operation": "Update",
            "apiVersion": "v1",
            "time": "2025-10-16T03:20:15Z",
            "fieldsType": "FieldsV1",
            "fieldsV1": {
              "f:status": {
                "f:conditions": {
                  "k:{\"type\":\"ContainersReady\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Initialized\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"PodReadyToStartContainers\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:status": {},
                    "f:type": {}
                  },
                  "k:{\"type\":\"Ready\"}": {
                    ".": {},
                    "f:lastProbeTime": {},
                    "f:lastTransitionTime": {},
                    "f:reason": {},
                    "f:status": {},
                    "f:type": {}
                  }
                },
                "f:containerStatuses": {},
                "f:hostIP": {},
                "f:hostIPs": {},
                "f:initContainerStatuses": {},
                "f:phase": {},
                "f:podIP": {},
                "f:podIPs": {
                  ".": {},
                  "k:{\"ip\":\"172.24.99.113\"}": {
                    ".": {},
                    "f:ip": {}
                  }
                },
                "f:startTime": {}
              }
            },
            "subresource": "status"
          }
        ]
      },
      "spec": {
        "volumes": [
          {
            "name": "logs",
            "emptyDir": {}
          },
          {
            "name": "tools",
            "emptyDir": {}
          },
          {
            "name": "gcs-credentials",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "home",
            "emptyDir": {}
          },
          {
            "name": "censor-0",
            "secret": {
              "secretName": "builder-dockercfg-4z6z8",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-1",
            "secret": {
              "secretName": "ci-operator-dockercfg-shmx5",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-2",
            "secret": {
              "secretName": "ci-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-3",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-4",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-5",
            "secret": {
              "secretName": "default-dockercfg-b9qkj",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-6",
            "secret": {
              "secretName": "deployer-dockercfg-4l8ch",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-7",
            "secret": {
              "secretName": "gce-sa-credentials-gcs-publisher",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-8",
            "secret": {
              "secretName": "registry-pull-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-9",
            "secret": {
              "secretName": "test-credentials-cluster-secrets-aws-interop-qe",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-10",
            "secret": {
              "secretName": "test-credentials-cnv-ci-brew-pull-secret",
              "defaultMode": 420
            }
          },
          {
            "name": "censor-11",
            "secret": {
              "secretName": "test-credentials-openshift-virtualization-tests-credentials",
              "defaultMode": 420
            }
          },
          {
            "name": "entrypoint-wrapper",
            "emptyDir": {}
          },
          {
            "name": "cluster-profile",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile",
              "defaultMode": 420
            }
          },
          {
            "name": "cli",
            "emptyDir": {}
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
            "secret": {
              "secretName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
              "defaultMode": 420
            }
          },
          {
            "name": "kube-api-access-xtd68",
            "projected": {
              "sources": [
                {
                  "serviceAccountToken": {
                    "expirationSeconds": 3607,
                    "path": "token"
                  }
                },
                {
                  "configMap": {
                    "name": "kube-XXXX-ca.crt",
                    "items": [
                      {
                        "key": "ca.crt",
                        "path": "ca.crt"
                      }
                    ]
                  }
                },
                {
                  "downwardAPI": {
                    "items": [
                      {
                        "path": "namespace",
                        "fieldRef": {
                          "apiVersion": "v1",
                          "fieldPath": "metadata.namespace"
                        }
                      }
                    ]
                  }
                },
                {
                  "configMap": {
                    "name": "openshift-service-ca.crt",
                    "items": [
                      {
                        "key": "service-ca.crt",
                        "path": "service-ca.crt"
                      }
                    ]
                  }
                }
              ],
              "defaultMode": 420
            }
          }
        ],
        "initContainers": [
          {
            "name": "ci-scheduling-dns-wait",
            "image": "registry.access.redhat.com/ubi8",
            "command": [
              "/bin/sh",
              "-c",
              "declare -i T; until [[ \"$ret\" == \"0\" ]] || [[ \"$T\" -gt \"120\" ]]; do curl http://static.redhat.com/test/rhel-networkmanager.txt \u003e /dev/null; ret=$?; sleep 1; let \"T+=1\"; done"
            ],
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-xtd68",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "Always",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "place-entrypoint",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "args": [
              "--copy-mode-only"
            ],
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-xtd68",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "command": [
              "cp"
            ],
            "args": [
              "/bin/entrypoint-wrapper",
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-xtd68",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "inject-cli",
            "image": "quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:62d95d6217b7e6a431d433ca7c27b8e58483b442679b1123e67b8215db6d08ca",
            "command": [
              "/bin/sh"
            ],
            "args": [
              "-c",
              "ARCH=$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/'); if [[ -e /usr/share/openshift/linux_${ARCH}/oc.rhel8 ]]; then /bin/cp /usr/share/openshift/linux_${ARCH}/oc.rhel8 /cli/oc; else /bin/cp /usr/share/openshift/linux_${ARCH}/oc /cli; fi"
            ],
            "resources": {},
            "volumeMounts": [
              {
                "name": "cli",
                "mountPath": "/cli"
              },
              {
                "name": "kube-api-access-xtd68",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "File",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "containers": [
          {
            "name": "test",
            "image": "quay-proxy.ci.openshift.org/openshift/ci@sha256:671b41f8d5f738332c0aa9a92ff7c847b03b59b5ebf49b69efa9fd78778d8b67",
            "command": [
              "/tmp/entrypoint-wrapper/entrypoint-wrapper"
            ],
            "args": [
              "/tools/entrypoint"
            ],
            "env": [
              {
                "name": "BUILD_ID",
                "value": "1978661561102766080"
              },
              {
                "name": "CI",
                "value": "true"
              },
              {
                "name": "JOB_NAME",
                "value": "rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"2h0m0s\",\"grace_period\":\"1m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "JOB_TYPE",
                "value": "presubmit"
              },
              {
                "name": "OPENSHIFT_CI",
                "value": "true"
              },
              {
                "name": "PROW_JOB_ID",
                "value": "bb824fb5-4278-4a50-8c4e-00fc7f6c19a5"
              },
              {
                "name": "PULL_BASE_REF",
                "value": "master"
              },
              {
                "name": "PULL_BASE_SHA",
                "value": "3847d2254f63a2740d3b9c81edab848d00aeec49"
              },
              {
                "name": "PULL_HEAD_REF"
              },
              {
                "name": "PULL_NUMBER",
                "value": "70234"
              },
              {
                "name": "PULL_PULL_SHA",
                "value": "f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_REFS",
                "value": "master:3847d2254f63a2740d3b9c81edab848d00aeec49,70234:f7663d446694f4f3b8f2ec8e97863ae6c8e175fa"
              },
              {
                "name": "PULL_TITLE",
                "value": "[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster."
              },
              {
                "name": "REPO_NAME",
                "value": "release"
              },
              {
                "name": "REPO_OWNER",
                "value": "openshift"
              },
              {
                "name": "GIT_CONFIG_COUNT",
                "value": "1"
              },
              {
                "name": "GIT_CONFIG_KEY_0",
                "value": "safe.directory"
              },
              {
                "name": "GIT_CONFIG_VALUE_0",
                "value": "*"
              },
              {
                "name": "ENTRYPOINT_OPTIONS",
                "value": "{\"timeout\":7200000000000,\"grace_period\":60000000000,\"artifact_dir\":\"/logs/artifacts\",\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\nset -x\\n\\ncase ${KUBECONFIG_ORIGIN} in\\n  (bastion)\\n    SSH_ARGS=\\\"-i ${CLUSTER_PROFILE_DIR}/jh_priv_ssh_key -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null\\\"\\n    bastion=$(cat ${CLUSTER_PROFILE_DIR}/address)\\n    LAB=$(cat ${CLUSTER_PROFILE_DIR}/lab)\\n    LAB_CLOUD=$(cat ${CLUSTER_PROFILE_DIR}/lab_cloud)\\n\\n    if [ -z \\\"${KUBECONFIG_PATH}\\\" ]; then\\n        scp -q ${SSH_ARGS} XXXX@${bastion}:/XXXX/$LAB/$LAB_CLOUD/$TYPE/kubeconfig ${SHARED_DIR}/kubeconfig\\n    else\\n        scp -q ${SSH_ARGS} XXXX@${bastion}:/$KUBECONFIG_PATH/kubeconfig ${SHARED_DIR}/kubeconfig\\n    fi\\n\\n    # Create proxy configuration for private VLAN deployments\\n    if [[ ${PUBLIC_VLAN} == \\\"false\\\" ]]; then\\n      cat \\u003e ${SHARED_DIR}/proxy-conf.sh \\u003c\\u003c 'PROXY_EOF'\\n#!/bin/bash\\n\\ncleanup_ssh() {\\n  # Kill the SOCKS proxy running on the jumphost\\n  ssh ${SSH_ARGS} XXXX@${jumphost} \\\"pkill -f 'ssh XXXX@${bastion} -fNT -D'\\\" 2\\u003e/dev/null || true\\n  # Kill local SSH processes\\n  pkill ssh\\n}\\n\\nSSH_ARGS=\\\"-i ${CLUSTER_PROFILE_DIR}/jh_priv_ssh_key -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null\\\"\\njumphost=$(cat ${CLUSTER_PROFILE_DIR}/address)\\nbastion=$(cat ${CLUSTER_PROFILE_DIR}/bastion)\\n\\n# Generate a random port between 10000-65535 for SOCKS proxy\\nSOCKS_PORT=$((RANDOM % 55536 + 10000))\\n\\n# Step 1: Start SOCKS proxy on jumphost connecting to bastion (runs in background on jumphost)\\nssh ${SSH_ARGS} XXXX@${jumphost} \\\"ssh XXXX@${bastion} -fNT -D 0.0.0.0:${SOCKS_PORT}\\\" \\u0026\\n\\n# Step 2: Forward the SOCKS proxy from jumphost back to CI host\\nssh ${SSH_ARGS} XXXX@${jumphost} -fNT -L ${SOCKS_PORT}:localhost:${SOCKS_PORT}\\n\\n# Give SSH tunnels a moment to establish\\nsleep 3\\n\\n# Configure proxy settings for oc commands\\nexport KUBECONFIG=${SHARED_DIR}/kubeconfig\\nexport https_proxy=socks5://localhost:${SOCKS_PORT}\\nexport http_proxy=socks5://localhost:${SOCKS_PORT}\\n\\n# Configure oc to use the proxy\\noc --kubeconfig=${SHARED_DIR}/kubeconfig config set-cluster \\\"$(oc config current-context)\\\" --proxy-url=socks5://localhost:${SOCKS_PORT}\\n\\ntrap 'cleanup_ssh' EXIT\\nPROXY_EOF\\n    fi\\n    ;;\\n  (vault)\\n    typeset srcFile='' tgtFile=''\\n\\n    for tgtFile in kube{admin-password,config}; do\\n        srcFile=\\\"${tgtFile}${KCFG_SRC_SFX:+\\\"--${KCFG_SRC_SFX}\\\"}\\\"\\n        if [ -r \\\"${CLUSTER_PROFILE_DIR}/${srcFile}\\\" ]; then\\n            cp \\\"${CLUSTER_PROFILE_DIR}/${srcFile}\\\" \\\"${SHARED_DIR}/${tgtFile}\\\"\\n            [ \\\"${tgtFile}\\\" = kubeconfig ] \\u0026\\u0026 cp \\\"${CLUSTER_PROFILE_DIR}/${srcFile}\\\" \\\"${SHARED_DIR}/${tgtFile}-minimal\\\"\\n        fi\\n    done\\n    ;;\\n  (*)\\n    echo \\\"Unsupported setting \\\\`KUBECONFIG_ORIGIN=${KUBECONFIG_ORIGIN@Q}\\\\`.\\\"\\n    ;;\\nesac\\n\\nexit 0\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}"
              },
              {
                "name": "ARTIFACT_DIR",
                "value": "/logs/artifacts"
              },
              {
                "name": "NAMESPACE",
                "value": "ci-op-9gmi3mdh"
              },
              {
                "name": "JOB_NAME_SAFE",
                "value": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal"
              },
              {
                "name": "JOB_NAME_HASH",
                "value": "59604"
              },
              {
                "name": "UNIQUE_HASH",
                "value": "59604"
              },
              {
                "name": "LEASED_RESOURCE",
                "value": "9c68b29a-693f-4a38-b1e6-f559fa73f31a"
              },
              {
                "name": "ORIGINAL_RELEASE_IMAGE_LATEST",
                "value": "registry.ci.openshift.org/ocp/release:4.19.0-0.nightly-2025-10-15-051359"
              },
              {
                "name": "RELEASE_IMAGE_LATEST",
                "value": "registry.build10.ci.openshift.org/ci-op-9gmi3mdh/release@sha256:88597cc1247e97e4fbe14ead836fc08d776787e825fa3455c031e770442669fc"
              },
              {
                "name": "IMAGE_FORMAT"
              },
              {
                "name": "KUBECONFIG_ORIGIN",
                "value": "vault"
              },
              {
                "name": "KUBECONFIG_PATH"
              },
              {
                "name": "TYPE",
                "value": "mno"
              },
              {
                "name": "PUBLIC_VLAN",
                "value": "true"
              },
              {
                "name": "KCFG_SRC_SFX",
                "value": "dfrazzet--test1"
              },
              {
                "name": "KUBECONFIG",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig"
              },
              {
                "name": "KUBECONFIGMINIMAL",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeconfig-minimal"
              },
              {
                "name": "KUBEADMIN_PASSWORD_FILE",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage/kubeadmin-password"
              },
              {
                "name": "CLUSTER_PROFILE_NAME",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_TYPE",
                "value": "metal-redhat-gs"
              },
              {
                "name": "CLUSTER_PROFILE_DIR",
                "value": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "CLI_DIR",
                "value": "/cli"
              },
              {
                "name": "SHARED_DIR",
                "value": "/var/run/secrets/ci.openshift.io/multi-stage"
              }
            ],
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "100Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cli",
                "mountPath": "/cli"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "kube-api-access-xtd68",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          },
          {
            "name": "sidecar",
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "env": [
              {
                "name": "JOB_SPEC",
                "value": "{\"type\":\"presubmit\",\"job\":\"rehearse-70234-periodic-ci-RedHatQE-interop-testing-master-cnv-odf-ocp4.19-lp-gs_baremetal-cnv-odf-tests-aws-ipi-ocp419-gs-baremetal\",\"buildid\":\"1978661561102766080\",\"prowjobid\":\"bb824fb5-4278-4a50-8c4e-00fc7f6c19a5\",\"refs\":{\"org\":\"openshift\",\"repo\":\"release\",\"base_ref\":\"master\",\"base_sha\":\"3847d2254f63a2740d3b9c81edab848d00aeec49\",\"pulls\":[{\"number\":70234,\"author\":\"dfrazzette\",\"sha\":\"f7663d446694f4f3b8f2ec8e97863ae6c8e175fa\",\"title\":\"[INTEROP-8477] [WIP] Initial PR for CNV `localnet` test on GS bare-metal cluster.\",\"link\":\"https://github.com/openshift/release/pull/70234\"}]},\"extra_refs\":[{\"org\":\"RedHatQE\",\"repo\":\"interop-testing\",\"base_ref\":\"master\",\"workdir\":true}],\"decoration_config\":{\"timeout\":\"6h0m0s\",\"grace_period\":\"1h0m0s\",\"utility_images\":{\"clonerefs\":\"us-docker.pkg.dev/k8s-infra-prow/images/clonerefs:v20251014-8026e8037\",\"initupload\":\"us-docker.pkg.dev/k8s-infra-prow/images/initupload:v20251014-8026e8037\",\"entrypoint\":\"us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037\",\"sidecar\":\"us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037\"},\"resources\":{\"clonerefs\":{\"limits\":{\"memory\":\"3Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"500Mi\"}},\"initupload\":{\"limits\":{\"memory\":\"200Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"50Mi\"}},\"place_entrypoint\":{\"limits\":{\"memory\":\"100Mi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"25Mi\"}},\"sidecar\":{\"limits\":{\"memory\":\"2Gi\"},\"requests\":{\"cpu\":\"100m\",\"memory\":\"250Mi\"}}},\"gcs_configuration\":{\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"]},\"gcs_credentials_secret\":\"gce-sa-credentials-gcs-publisher\",\"skip_cloning\":true,\"censor_secrets\":true,\"censoring_options\":{\"minimum_secret_length\":6}}}"
              },
              {
                "name": "SIDECAR_OPTIONS",
                "value": "{\"gcs_options\":{\"items\":[\"/logs/artifacts\"],\"sub_dir\":\"artifacts/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal/openshift-qe-installer-bm-load-kubeconfig\",\"bucket\":\"test-platform-results\",\"path_strategy\":\"single\",\"default_org\":\"openshift\",\"default_repo\":\"origin\",\"mediaTypes\":{\"log\":\"text/plain\"},\"job_url_prefix\":\"https://prow.ci.openshift.org/view/\",\"compress_file_types\":[\"txt\",\"log\",\"json\",\"tar\",\"html\",\"yaml\"],\"gcs_credentials_file\":\"/secrets/gcs/service-account.json\",\"dry_run\":false},\"entries\":[{\"args\":[\"/bin/bash\",\"-c\",\"#!/bin/bash\\nset -eu\\n#!/bin/bash\\nset -o errexit\\nset -o nounset\\nset -o pipefail\\nset -x\\n\\ncase ${KUBECONFIG_ORIGIN} in\\n  (bastion)\\n    SSH_ARGS=\\\"-i ${CLUSTER_PROFILE_DIR}/jh_priv_ssh_key -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null\\\"\\n    bastion=$(cat ${CLUSTER_PROFILE_DIR}/address)\\n    LAB=$(cat ${CLUSTER_PROFILE_DIR}/lab)\\n    LAB_CLOUD=$(cat ${CLUSTER_PROFILE_DIR}/lab_cloud)\\n\\n    if [ -z \\\"${KUBECONFIG_PATH}\\\" ]; then\\n        scp -q ${SSH_ARGS} XXXX@${bastion}:/XXXX/$LAB/$LAB_CLOUD/$TYPE/kubeconfig ${SHARED_DIR}/kubeconfig\\n    else\\n        scp -q ${SSH_ARGS} XXXX@${bastion}:/$KUBECONFIG_PATH/kubeconfig ${SHARED_DIR}/kubeconfig\\n    fi\\n\\n    # Create proxy configuration for private VLAN deployments\\n    if [[ ${PUBLIC_VLAN} == \\\"false\\\" ]]; then\\n      cat \\u003e ${SHARED_DIR}/proxy-conf.sh \\u003c\\u003c 'PROXY_EOF'\\n#!/bin/bash\\n\\ncleanup_ssh() {\\n  # Kill the SOCKS proxy running on the jumphost\\n  ssh ${SSH_ARGS} XXXX@${jumphost} \\\"pkill -f 'ssh XXXX@${bastion} -fNT -D'\\\" 2\\u003e/dev/null || true\\n  # Kill local SSH processes\\n  pkill ssh\\n}\\n\\nSSH_ARGS=\\\"-i ${CLUSTER_PROFILE_DIR}/jh_priv_ssh_key -oStrictHostKeyChecking=no -oUserKnownHostsFile=/dev/null\\\"\\njumphost=$(cat ${CLUSTER_PROFILE_DIR}/address)\\nbastion=$(cat ${CLUSTER_PROFILE_DIR}/bastion)\\n\\n# Generate a random port between 10000-65535 for SOCKS proxy\\nSOCKS_PORT=$((RANDOM % 55536 + 10000))\\n\\n# Step 1: Start SOCKS proxy on jumphost connecting to bastion (runs in background on jumphost)\\nssh ${SSH_ARGS} XXXX@${jumphost} \\\"ssh XXXX@${bastion} -fNT -D 0.0.0.0:${SOCKS_PORT}\\\" \\u0026\\n\\n# Step 2: Forward the SOCKS proxy from jumphost back to CI host\\nssh ${SSH_ARGS} XXXX@${jumphost} -fNT -L ${SOCKS_PORT}:localhost:${SOCKS_PORT}\\n\\n# Give SSH tunnels a moment to establish\\nsleep 3\\n\\n# Configure proxy settings for oc commands\\nexport KUBECONFIG=${SHARED_DIR}/kubeconfig\\nexport https_proxy=socks5://localhost:${SOCKS_PORT}\\nexport http_proxy=socks5://localhost:${SOCKS_PORT}\\n\\n# Configure oc to use the proxy\\noc --kubeconfig=${SHARED_DIR}/kubeconfig config set-cluster \\\"$(oc config current-context)\\\" --proxy-url=socks5://localhost:${SOCKS_PORT}\\n\\ntrap 'cleanup_ssh' EXIT\\nPROXY_EOF\\n    fi\\n    ;;\\n  (vault)\\n    typeset srcFile='' tgtFile=''\\n\\n    for tgtFile in kube{admin-password,config}; do\\n        srcFile=\\\"${tgtFile}${KCFG_SRC_SFX:+\\\"--${KCFG_SRC_SFX}\\\"}\\\"\\n        if [ -r \\\"${CLUSTER_PROFILE_DIR}/${srcFile}\\\" ]; then\\n            cp \\\"${CLUSTER_PROFILE_DIR}/${srcFile}\\\" \\\"${SHARED_DIR}/${tgtFile}\\\"\\n            [ \\\"${tgtFile}\\\" = kubeconfig ] \\u0026\\u0026 cp \\\"${CLUSTER_PROFILE_DIR}/${srcFile}\\\" \\\"${SHARED_DIR}/${tgtFile}-minimal\\\"\\n        fi\\n    done\\n    ;;\\n  (*)\\n    echo \\\"Unsupported setting \\\\`KUBECONFIG_ORIGIN=${KUBECONFIG_ORIGIN@Q}\\\\`.\\\"\\n    ;;\\nesac\\n\\nexit 0\\n\"],\"container_name\":\"test\",\"process_log\":\"/logs/process-log.txt\",\"marker_file\":\"/logs/marker-file.txt\",\"metadata_file\":\"/logs/artifacts/metadata.json\"}],\"ignore_interrupts\":true,\"censoring_options\":{\"secret_directories\":[\"/secrets/builder-dockercfg-4z6z8\",\"/secrets/ci-operator-dockercfg-shmx5\",\"/secrets/ci-pull-credentials\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile\",\"/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt\",\"/secrets/default-dockercfg-b9qkj\",\"/secrets/deployer-dockercfg-4l8ch\",\"/secrets/gce-sa-credentials-gcs-publisher\",\"/secrets/registry-pull-credentials\",\"/secrets/test-credentials-cluster-secrets-aws-interop-qe\",\"/secrets/test-credentials-cnv-ci-brew-pull-secret\",\"/secrets/test-credentials-openshift-virtualization-tests-credentials\"],\"minimum_secret_length\":6}}"
              }
            ],
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-xtd68",
                "readOnly": true,
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount"
              }
            ],
            "terminationMessagePath": "/dev/termination-log",
            "terminationMessagePolicy": "FallbackToLogsOnError",
            "imagePullPolicy": "IfNotPresent",
            "securityContext": {
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "runAsUser": 1004610000,
              "runAsNonRoot": true,
              "allowPrivilegeEscalation": false
            }
          }
        ],
        "restartPolicy": "Never",
        "terminationGracePeriodSeconds": 75,
        "dnsPolicy": "ClusterFirst",
        "nodeSelector": {
          "ci-workload": "tests"
        },
        "serviceAccountName": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "serviceAccount": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
        "nodeName": "ip-10-28-65-116.us-east-2.compute.internal",
        "securityContext": {
          "seLinuxOptions": {
            "level": "s0:c68,c27"
          },
          "fsGroup": 1004610000,
          "seccompProfile": {
            "type": "RuntimeDefault"
          }
        },
        "imagePullSecrets": [
          {
            "name": "registry-pull-credentials"
          },
          {
            "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
          }
        ],
        "affinity": {
          "nodeAffinity": {
            "requiredDuringSchedulingIgnoredDuringExecution": {
              "nodeSelectorTerms": [
                {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/hostname",
                      "operator": "NotIn",
                      "values": [
                        "ip-10-28-65-78.us-east-2.compute.internal"
                      ]
                    },
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              ]
            },
            "preferredDuringSchedulingIgnoredDuringExecution": [
              {
                "weight": 100,
                "preference": {
                  "matchExpressions": [
                    {
                      "key": "kubernetes.io/arch",
                      "operator": "In",
                      "values": [
                        "amd64"
                      ]
                    }
                  ]
                }
              }
            ]
          }
        },
        "schedulerName": "default-scheduler",
        "tolerations": [
          {
            "key": "node.kubernetes.io/not-ready",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/unreachable",
            "operator": "Exists",
            "effect": "NoExecute",
            "tolerationSeconds": 300
          },
          {
            "key": "node.kubernetes.io/memory-pressure",
            "operator": "Exists",
            "effect": "NoSchedule"
          },
          {
            "key": "node-role.kubernetes.io/ci-tests-worker",
            "operator": "Exists",
            "effect": "NoSchedule"
          }
        ],
        "priority": 0,
        "runtimeClassName": "ci-scheduler-runtime-tests",
        "enableServiceLinks": true,
        "preemptionPolicy": "PreemptLowerPriority",
        "overhead": {
          "cpu": "300m",
          "memory": "600Mi"
        }
      },
      "status": {
        "phase": "Succeeded",
        "conditions": [
          {
            "type": "PodReadyToStartContainers",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:20:15Z"
          },
          {
            "type": "Initialized",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:19:55Z",
            "reason": "PodCompleted"
          },
          {
            "type": "Ready",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:19:49Z",
            "reason": "PodCompleted"
          },
          {
            "type": "ContainersReady",
            "status": "False",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:19:49Z",
            "reason": "PodCompleted"
          },
          {
            "type": "PodScheduled",
            "status": "True",
            "lastProbeTime": null,
            "lastTransitionTime": "2025-10-16T03:19:49Z"
          }
        ],
        "hostIP": "10.28.65.116",
        "hostIPs": [
          {
            "ip": "10.28.65.116"
          }
        ],
        "podIP": "172.24.99.113",
        "podIPs": [
          {
            "ip": "172.24.99.113"
          }
        ],
        "startTime": "2025-10-16T03:19:49Z",
        "initContainerStatuses": [
          {
            "name": "ci-scheduling-dns-wait",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:19:51Z",
                "finishedAt": "2025-10-16T03:19:52Z",
                "containerID": "cri-o://0e39790dae35e85e0f6c1e377901414cb4a6e6f7efbfa36eefbd67206e6f4632"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "registry.access.redhat.com/ubi8:latest",
            "imageID": "registry.access.redhat.com/ubi8@sha256:96ede92bab65df0386c9dabe6ec946aaa13a8717d2d5ad52d5d9a1d2e1f90e0f",
            "containerID": "cri-o://0e39790dae35e85e0f6c1e377901414cb4a6e6f7efbfa36eefbd67206e6f4632",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "200Mi"
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "200Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "kube-api-access-xtd68",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "place-entrypoint",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:19:53Z",
                "finishedAt": "2025-10-16T03:19:53Z",
                "containerID": "cri-o://4c12c3205d28a28953800f2ec44194565b261a6d73ec33a2b945a5bb61f920ac"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/entrypoint@sha256:543f25b78ff850958624960f8f9e2cd73a680ea80a97746b957dbab9d210e6e9",
            "containerID": "cri-o://4c12c3205d28a28953800f2ec44194565b261a6d73ec33a2b945a5bb61f920ac",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "25Mi"
            },
            "resources": {
              "limits": {
                "memory": "100Mi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "25Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "kube-api-access-xtd68",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "cp-entrypoint-wrapper",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:19:54Z",
                "finishedAt": "2025-10-16T03:19:54Z",
                "containerID": "cri-o://51e7c28dd8f930fb53f393880019dd217a19bb567c1b68076fdd72e4a60ebd7e"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "quay-proxy.ci.openshift.org/openshift/ci:ci_entrypoint-wrapper_latest",
            "imageID": "quay-proxy.ci.openshift.org/openshift/ci@sha256:5092ebbc6a951284f2c5389556826b4a3403bc3a02f37ee9358b9fc2824e65fc",
            "containerID": "cri-o://51e7c28dd8f930fb53f393880019dd217a19bb567c1b68076fdd72e4a60ebd7e",
            "started": false,
            "resources": {},
            "volumeMounts": [
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "kube-api-access-xtd68",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "inject-cli",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:19:55Z",
                "finishedAt": "2025-10-16T03:19:55Z",
                "containerID": "cri-o://884528185d616b331a0ca2cd216d1d6ba48ff8ca30c0b1c1f9825c5d0754f58f"
              }
            },
            "lastState": {},
            "ready": true,
            "restartCount": 0,
            "image": "quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:62d95d6217b7e6a431d433ca7c27b8e58483b442679b1123e67b8215db6d08ca",
            "imageID": "quay.io/openshift-release-dev/ocp-v4.0-art-dev@sha256:62d95d6217b7e6a431d433ca7c27b8e58483b442679b1123e67b8215db6d08ca",
            "containerID": "cri-o://884528185d616b331a0ca2cd216d1d6ba48ff8ca30c0b1c1f9825c5d0754f58f",
            "started": false,
            "resources": {},
            "volumeMounts": [
              {
                "name": "cli",
                "mountPath": "/cli"
              },
              {
                "name": "kube-api-access-xtd68",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "containerStatuses": [
          {
            "name": "sidecar",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:20:13Z",
                "finishedAt": "2025-10-16T03:20:14Z",
                "containerID": "cri-o://5c9219beca04ba538cba7fb4e0ee16d8b1af2a0fe80daa6bcc0f1819afd9b931"
              }
            },
            "lastState": {},
            "ready": false,
            "restartCount": 0,
            "image": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar:v20251014-8026e8037",
            "imageID": "us-docker.pkg.dev/k8s-infra-prow/images/sidecar@sha256:41d0901d20b0546472edd74026e1bb03b4d71c739b06a7a06dbecdb967e2a910",
            "containerID": "cri-o://5c9219beca04ba538cba7fb4e0ee16d8b1af2a0fe80daa6bcc0f1819afd9b931",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "250Mi"
            },
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "100m",
                "memory": "250Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "gcs-credentials",
                "mountPath": "/secrets/gcs"
              },
              {
                "name": "censor-0",
                "mountPath": "/secrets/builder-dockercfg-4z6z8"
              },
              {
                "name": "censor-1",
                "mountPath": "/secrets/ci-operator-dockercfg-shmx5"
              },
              {
                "name": "censor-2",
                "mountPath": "/secrets/ci-pull-credentials"
              },
              {
                "name": "censor-3",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-cluster-profile"
              },
              {
                "name": "censor-4",
                "mountPath": "/secrets/cnv-odf-tests-aws-ipi-ocp419-gs-baremetal-dockercfg-d54tt"
              },
              {
                "name": "censor-5",
                "mountPath": "/secrets/default-dockercfg-b9qkj"
              },
              {
                "name": "censor-6",
                "mountPath": "/secrets/deployer-dockercfg-4l8ch"
              },
              {
                "name": "censor-7",
                "mountPath": "/secrets/gce-sa-credentials-gcs-publisher"
              },
              {
                "name": "censor-8",
                "mountPath": "/secrets/registry-pull-credentials"
              },
              {
                "name": "censor-9",
                "mountPath": "/secrets/test-credentials-cluster-secrets-aws-interop-qe"
              },
              {
                "name": "censor-10",
                "mountPath": "/secrets/test-credentials-cnv-ci-brew-pull-secret"
              },
              {
                "name": "censor-11",
                "mountPath": "/secrets/test-credentials-openshift-virtualization-tests-credentials"
              },
              {
                "name": "kube-api-access-xtd68",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          },
          {
            "name": "test",
            "state": {
              "terminated": {
                "exitCode": 0,
                "reason": "Completed",
                "startedAt": "2025-10-16T03:20:13Z",
                "finishedAt": "2025-10-16T03:20:13Z",
                "containerID": "cri-o://b25eb62ed0e1e3c14b98b0df944a3285c326910c26cb274280732cbab3a89bb4"
              }
            },
            "lastState": {},
            "ready": false,
            "restartCount": 0,
            "image": "quay-proxy.ci.openshift.org/openshift/ci@sha256:671b41f8d5f738332c0aa9a92ff7c847b03b59b5ebf49b69efa9fd78778d8b67",
            "imageID": "quay-proxy.ci.openshift.org/openshift/ci@sha256:671b41f8d5f738332c0aa9a92ff7c847b03b59b5ebf49b69efa9fd78778d8b67",
            "containerID": "cri-o://b25eb62ed0e1e3c14b98b0df944a3285c326910c26cb274280732cbab3a89bb4",
            "started": false,
            "allocatedResources": {
              "cpu": "100m",
              "memory": "100Mi"
            },
            "resources": {
              "requests": {
                "cpu": "100m",
                "memory": "100Mi"
              }
            },
            "volumeMounts": [
              {
                "name": "logs",
                "mountPath": "/logs"
              },
              {
                "name": "tools",
                "mountPath": "/tools"
              },
              {
                "name": "home",
                "mountPath": "/alabama"
              },
              {
                "name": "entrypoint-wrapper",
                "mountPath": "/tmp/entrypoint-wrapper"
              },
              {
                "name": "cluster-profile",
                "mountPath": "/var/run/secrets/ci.openshift.io/cluster-profile"
              },
              {
                "name": "cli",
                "mountPath": "/cli"
              },
              {
                "name": "cnv-odf-tests-aws-ipi-ocp419-gs-baremetal",
                "mountPath": "/var/run/secrets/ci.openshift.io/multi-stage"
              },
              {
                "name": "kube-api-access-xtd68",
                "mountPath": "/var/run/secrets/kubernetes.io/serviceaccount",
                "readOnly": true,
                "recursiveReadOnly": "Disabled"
              }
            ],
            "user": {
              "linux": {
                "uid": 1004610000,
                "gid": 0,
                "supplementalGroups": [
                  0,
                  1004610000
                ]
              }
            }
          }
        ],
        "qosClass": "Burstable"
      }
    }
  ]
}